{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { CTA } from '../CTA';\nimport cx from 'classnames';\nimport ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';\nimport { ImageWithCaption } from '../ImageWithCaption';\nimport markdownToHtml from '@carbon/ibmdotcom-utilities/es/utilities/markdownToHtml/markdownToHtml';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { VideoPlayer } from '../VideoPlayer';\nvar stablePrefix = ddsSettings.stablePrefix;\nvar prefix = settings.prefix;\n/**\n * ContentItem Component\n *\n * @param {object} props props object\n * @param {boolean} props.inverse inverse class\n * @param {string} props.customClassName allows user to pass in custom class name\n * @param {string} props.cta cta object\n * @param {string} props.copy copy text\n * @param {string} props.heading  heading object\n * @param {string} props.mediaType Determines the media type (image or video)\n * @param {object} props.mediaData Data properties for image or video\n * @returns {*} JSX ContentItem component\n */\n\nvar ContentItem = function ContentItem(_ref) {\n  var cta = _ref.cta,\n      copy = _ref.copy,\n      heading = _ref.heading,\n      mediaType = _ref.mediaType,\n      mediaData = _ref.mediaData,\n      inverse = _ref.inverse,\n      customClassName = _ref.customClassName;\n  var classnames = cx(\"\".concat(prefix, \"--content-item\"), _defineProperty({}, \"\".concat(prefix, \"--content-item--inverse\"), inverse), customClassName);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames,\n    \"data-autoid\": \"\".concat(stablePrefix, \"--content-item\")\n  }, heading && /*#__PURE__*/React.createElement(\"h4\", {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--content-item__heading\"),\n    className: \"\".concat(prefix, \"--content-item__heading\")\n  }, heading), _renderMedia(mediaType, mediaData, inverse), copy && /*#__PURE__*/React.createElement(\"div\", {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--content-item__copy\"),\n    className: \"\".concat(prefix, \"--content-item__copy\"),\n    dangerouslySetInnerHTML: {\n      __html: markdownToHtml(copy, {\n        bold: false\n      })\n    }\n  }), cta && /*#__PURE__*/React.createElement(CTA, _extends({}, cta, {\n    customClassName: \"\".concat(prefix, \"--content-item__cta\")\n  })));\n};\n/**\n * renders either video or image content\n *\n * @param {string} type cta type ( external | jump | local)\n * @param {object} data cta type ( external | jump | local)\n * @param {boolean} inverse inverse type\n * @private\n * @returns {*} media component\n */\n\n\nvar _renderMedia = function _renderMedia(type, data, inverse) {\n  if (data) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-autoid\": \"\".concat(stablePrefix, \"--content-item__media\")\n    }, type === 'image' && /*#__PURE__*/React.createElement(ImageWithCaption, _extends({\n      inverse: inverse\n    }, data)), type === 'video' && /*#__PURE__*/React.createElement(VideoPlayer, _extends({\n      inverse: inverse\n    }, data)));\n  }\n};\n\nContentItem.propTypes = {\n  /**\n   * CTA object.\n   * See the [`<CTA>`'s README](http://www.ibm.com/standards/carbon/react/?path=/docs/components-cta--default#props) for full usage details.\n   */\n  cta: PropTypes.shape({\n    style: PropTypes.oneOf(['text', 'button']),\n    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),\n    copy: PropTypes.string,\n    href: PropTypes.string,\n    customClassName: PropTypes.string\n  }),\n\n  /**\n   * Allows user to pass in custom class name.\n   */\n  customClassName: PropTypes.string,\n\n  /**\n   * Copy text.\n   */\n  copy: PropTypes.string,\n\n  /**\n   * Heading text.\n   */\n  heading: PropTypes.string,\n\n  /**\n   * Determines media type (image or video).\n   */\n  mediaType: PropTypes.oneOf(['image', 'video']),\n\n  /**\n   * Media Data for either image or video.\n   * See the following components' README for more details:\n   *\n   * * `mediaType=\"image\"`: [`<ImageWithCaption>`](http://www.ibm.com/standards/carbon/react/?path=/docs/components-imagewithcaption--default#props)\n   * * `mediaType=\"video\"`: [`<VideoPlayer>`](http://www.ibm.com/standards/carbon/react/?path=/docs/components-videoplayer--default#props)\n   */\n  mediaData: PropTypes.oneOfType([PropTypes.shape({\n    inverse: PropTypes.bool,\n    image: PropTypes.shape({\n      classname: PropTypes.string,\n      sources: PropTypes.arrayOf(PropTypes.shape({\n        src: PropTypes.string,\n        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n      })),\n      defaultSrc: PropTypes.string.isRequired,\n      alt: PropTypes.string.isRequired,\n      longDescription: PropTypes.string\n    }).isRequired,\n    lightbox: PropTypes.bool,\n    heading: PropTypes.string,\n    copy: PropTypes.string,\n    customClassName: PropTypes.string\n  }), PropTypes.shape({\n    customClassName: PropTypes.string,\n    videoId: PropTypes.string.isRequired,\n    showCaption: PropTypes.bool,\n    inverse: PropTypes.bool\n  })]),\n\n  /**\n   * `true` to changes theme to inverse.\n   */\n  inverse: PropTypes.bool\n};\nexport default ContentItem;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/components/ContentItem/ContentItem.js"],"names":["_extends","_defineProperty","CTA","cx","ddsSettings","ImageWithCaption","markdownToHtml","PropTypes","React","settings","VideoPlayer","stablePrefix","prefix","ContentItem","_ref","cta","copy","heading","mediaType","mediaData","inverse","customClassName","classnames","concat","createElement","className","_renderMedia","dangerouslySetInnerHTML","__html","bold","type","data","propTypes","shape","style","oneOf","oneOfType","arrayOf","string","href","bool","image","classname","sources","src","breakpoint","number","defaultSrc","isRequired","alt","longDescription","lightbox","videoId","showCaption"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { CTA } from '../CTA';\nimport cx from 'classnames';\nimport ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';\nimport { ImageWithCaption } from '../ImageWithCaption';\nimport markdownToHtml from '@carbon/ibmdotcom-utilities/es/utilities/markdownToHtml/markdownToHtml';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport { VideoPlayer } from '../VideoPlayer';\nvar stablePrefix = ddsSettings.stablePrefix;\nvar prefix = settings.prefix;\n/**\n * ContentItem Component\n *\n * @param {object} props props object\n * @param {boolean} props.inverse inverse class\n * @param {string} props.customClassName allows user to pass in custom class name\n * @param {string} props.cta cta object\n * @param {string} props.copy copy text\n * @param {string} props.heading  heading object\n * @param {string} props.mediaType Determines the media type (image or video)\n * @param {object} props.mediaData Data properties for image or video\n * @returns {*} JSX ContentItem component\n */\n\nvar ContentItem = function ContentItem(_ref) {\n  var cta = _ref.cta,\n      copy = _ref.copy,\n      heading = _ref.heading,\n      mediaType = _ref.mediaType,\n      mediaData = _ref.mediaData,\n      inverse = _ref.inverse,\n      customClassName = _ref.customClassName;\n  var classnames = cx(\"\".concat(prefix, \"--content-item\"), _defineProperty({}, \"\".concat(prefix, \"--content-item--inverse\"), inverse), customClassName);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames,\n    \"data-autoid\": \"\".concat(stablePrefix, \"--content-item\")\n  }, heading && /*#__PURE__*/React.createElement(\"h4\", {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--content-item__heading\"),\n    className: \"\".concat(prefix, \"--content-item__heading\")\n  }, heading), _renderMedia(mediaType, mediaData, inverse), copy && /*#__PURE__*/React.createElement(\"div\", {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--content-item__copy\"),\n    className: \"\".concat(prefix, \"--content-item__copy\"),\n    dangerouslySetInnerHTML: {\n      __html: markdownToHtml(copy, {\n        bold: false\n      })\n    }\n  }), cta && /*#__PURE__*/React.createElement(CTA, _extends({}, cta, {\n    customClassName: \"\".concat(prefix, \"--content-item__cta\")\n  })));\n};\n/**\n * renders either video or image content\n *\n * @param {string} type cta type ( external | jump | local)\n * @param {object} data cta type ( external | jump | local)\n * @param {boolean} inverse inverse type\n * @private\n * @returns {*} media component\n */\n\n\nvar _renderMedia = function _renderMedia(type, data, inverse) {\n  if (data) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-autoid\": \"\".concat(stablePrefix, \"--content-item__media\")\n    }, type === 'image' && /*#__PURE__*/React.createElement(ImageWithCaption, _extends({\n      inverse: inverse\n    }, data)), type === 'video' && /*#__PURE__*/React.createElement(VideoPlayer, _extends({\n      inverse: inverse\n    }, data)));\n  }\n};\n\nContentItem.propTypes = {\n  /**\n   * CTA object.\n   * See the [`<CTA>`'s README](http://www.ibm.com/standards/carbon/react/?path=/docs/components-cta--default#props) for full usage details.\n   */\n  cta: PropTypes.shape({\n    style: PropTypes.oneOf(['text', 'button']),\n    type: PropTypes.oneOfType([PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']), PropTypes.arrayOf(PropTypes.oneOf(['jump', 'local', 'external', 'download', 'video']))]),\n    copy: PropTypes.string,\n    href: PropTypes.string,\n    customClassName: PropTypes.string\n  }),\n\n  /**\n   * Allows user to pass in custom class name.\n   */\n  customClassName: PropTypes.string,\n\n  /**\n   * Copy text.\n   */\n  copy: PropTypes.string,\n\n  /**\n   * Heading text.\n   */\n  heading: PropTypes.string,\n\n  /**\n   * Determines media type (image or video).\n   */\n  mediaType: PropTypes.oneOf(['image', 'video']),\n\n  /**\n   * Media Data for either image or video.\n   * See the following components' README for more details:\n   *\n   * * `mediaType=\"image\"`: [`<ImageWithCaption>`](http://www.ibm.com/standards/carbon/react/?path=/docs/components-imagewithcaption--default#props)\n   * * `mediaType=\"video\"`: [`<VideoPlayer>`](http://www.ibm.com/standards/carbon/react/?path=/docs/components-videoplayer--default#props)\n   */\n  mediaData: PropTypes.oneOfType([PropTypes.shape({\n    inverse: PropTypes.bool,\n    image: PropTypes.shape({\n      classname: PropTypes.string,\n      sources: PropTypes.arrayOf(PropTypes.shape({\n        src: PropTypes.string,\n        breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n      })),\n      defaultSrc: PropTypes.string.isRequired,\n      alt: PropTypes.string.isRequired,\n      longDescription: PropTypes.string\n    }).isRequired,\n    lightbox: PropTypes.bool,\n    heading: PropTypes.string,\n    copy: PropTypes.string,\n    customClassName: PropTypes.string\n  }), PropTypes.shape({\n    customClassName: PropTypes.string,\n    videoId: PropTypes.string.isRequired,\n    showCaption: PropTypes.bool,\n    inverse: PropTypes.bool\n  })]),\n\n  /**\n   * `true` to changes theme to inverse.\n   */\n  inverse: PropTypes.bool\n};\nexport default ContentItem;"]},"metadata":{},"sourceType":"module"}