{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"children\", \"shouldShowBatchActions\", \"totalSelected\", \"onCancel\", \"translateWithId\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from '../Button';\nimport TableActionList from './TableActionList';\nimport { Text } from '../Text';\nimport { usePrefix } from '../../internal/usePrefix';\nvar translationKeys = {\n  'carbon.table.batch.cancel': 'Cancel',\n  'carbon.table.batch.items.selected': 'items selected',\n  'carbon.table.batch.item.selected': 'item selected'\n};\n\nvar translateWithId = function translateWithId(id, state) {\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n\n  return \"\".concat(state.totalSelected, \" \").concat(translationKeys[id]);\n};\n\nvar TableBatchActions = function TableBatchActions(_ref) {\n  var _cx;\n\n  var className = _ref.className,\n      children = _ref.children,\n      shouldShowBatchActions = _ref.shouldShowBatchActions,\n      totalSelected = _ref.totalSelected,\n      onCancel = _ref.onCancel,\n      t = _ref.translateWithId,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isScrolling = _React$useState2[0],\n      setIsScrolling = _React$useState2[1];\n\n  var prefix = usePrefix();\n  var batchActionsClasses = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--batch-actions\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--batch-actions--active\"), shouldShowBatchActions), _cx), className);\n  var batchSummaryClasses = cx(\"\".concat(prefix, \"--batch-summary\"), _defineProperty({}, \"\".concat(prefix, \"--batch-summary__scroll\"), isScrolling));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    onScroll: function onScroll() {\n      setIsScrolling(!isScrolling);\n    },\n    \"aria-hidden\": !shouldShowBatchActions,\n    className: batchActionsClasses\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: batchSummaryClasses\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--batch-summary__para\")\n  }, /*#__PURE__*/React.createElement(Text, {\n    as: \"span\"\n  }, totalSelected > 1 || totalSelected === 0 ? t('carbon.table.batch.items.selected', {\n    totalSelected: totalSelected\n  }) : t('carbon.table.batch.item.selected', {\n    totalSelected: totalSelected\n  })))), /*#__PURE__*/React.createElement(TableActionList, null, children, /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(prefix, \"--batch-summary__cancel\"),\n    tabIndex: shouldShowBatchActions ? 0 : -1,\n    onClick: onCancel\n  }, t('carbon.table.batch.cancel'))));\n};\n\nTableBatchActions.translationKeys = Object.keys(translationKeys);\nTableBatchActions.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * Hook required to listen for when the user initiates a cancel request\n   * through this component\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Boolean specifier for whether or not the batch action bar should be\n   * displayed\n   */\n  shouldShowBatchActions: PropTypes.bool,\n\n  /**\n   * Numeric representation of the total number of items selected in a table.\n   * This number is used to derive the selection message\n   */\n  totalSelected: PropTypes.number.isRequired,\n\n  /**\n   * Supply a method to translate internal strings with your i18n tool of\n   * choice. Translation keys are available on the `translationKeys` field for\n   * this component.\n   */\n  translateWithId: PropTypes.func\n};\nTableBatchActions.defaultProps = {\n  translateWithId: translateWithId\n};\nexport default TableBatchActions;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/carbon-components-react/es/components/DataTable/TableBatchActions.js"],"names":["_extends","_defineProperty","_slicedToArray","_objectWithoutProperties","_excluded","cx","PropTypes","React","Button","TableActionList","Text","usePrefix","translationKeys","translateWithId","id","state","concat","totalSelected","TableBatchActions","_ref","_cx","className","children","shouldShowBatchActions","onCancel","t","rest","_React$useState","useState","_React$useState2","isScrolling","setIsScrolling","prefix","batchActionsClasses","batchSummaryClasses","createElement","onScroll","as","tabIndex","onClick","Object","keys","propTypes","node","string","func","isRequired","bool","number","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"children\", \"shouldShowBatchActions\", \"totalSelected\", \"onCancel\", \"translateWithId\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from '../Button';\nimport TableActionList from './TableActionList';\nimport { Text } from '../Text';\nimport { usePrefix } from '../../internal/usePrefix';\nvar translationKeys = {\n  'carbon.table.batch.cancel': 'Cancel',\n  'carbon.table.batch.items.selected': 'items selected',\n  'carbon.table.batch.item.selected': 'item selected'\n};\n\nvar translateWithId = function translateWithId(id, state) {\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n\n  return \"\".concat(state.totalSelected, \" \").concat(translationKeys[id]);\n};\n\nvar TableBatchActions = function TableBatchActions(_ref) {\n  var _cx;\n\n  var className = _ref.className,\n      children = _ref.children,\n      shouldShowBatchActions = _ref.shouldShowBatchActions,\n      totalSelected = _ref.totalSelected,\n      onCancel = _ref.onCancel,\n      t = _ref.translateWithId,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isScrolling = _React$useState2[0],\n      setIsScrolling = _React$useState2[1];\n\n  var prefix = usePrefix();\n  var batchActionsClasses = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--batch-actions\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--batch-actions--active\"), shouldShowBatchActions), _cx), className);\n  var batchSummaryClasses = cx(\"\".concat(prefix, \"--batch-summary\"), _defineProperty({}, \"\".concat(prefix, \"--batch-summary__scroll\"), isScrolling));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    onScroll: function onScroll() {\n      setIsScrolling(!isScrolling);\n    },\n    \"aria-hidden\": !shouldShowBatchActions,\n    className: batchActionsClasses\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: batchSummaryClasses\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--batch-summary__para\")\n  }, /*#__PURE__*/React.createElement(Text, {\n    as: \"span\"\n  }, totalSelected > 1 || totalSelected === 0 ? t('carbon.table.batch.items.selected', {\n    totalSelected: totalSelected\n  }) : t('carbon.table.batch.item.selected', {\n    totalSelected: totalSelected\n  })))), /*#__PURE__*/React.createElement(TableActionList, null, children, /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(prefix, \"--batch-summary__cancel\"),\n    tabIndex: shouldShowBatchActions ? 0 : -1,\n    onClick: onCancel\n  }, t('carbon.table.batch.cancel'))));\n};\n\nTableBatchActions.translationKeys = Object.keys(translationKeys);\nTableBatchActions.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * Hook required to listen for when the user initiates a cancel request\n   * through this component\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Boolean specifier for whether or not the batch action bar should be\n   * displayed\n   */\n  shouldShowBatchActions: PropTypes.bool,\n\n  /**\n   * Numeric representation of the total number of items selected in a table.\n   * This number is used to derive the selection message\n   */\n  totalSelected: PropTypes.number.isRequired,\n\n  /**\n   * Supply a method to translate internal strings with your i18n tool of\n   * choice. Translation keys are available on the `translationKeys` field for\n   * this component.\n   */\n  translateWithId: PropTypes.func\n};\nTableBatchActions.defaultProps = {\n  translateWithId: translateWithId\n};\nexport default TableBatchActions;"]},"metadata":{},"sourceType":"module"}