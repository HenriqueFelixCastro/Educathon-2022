{"ast":null,"code":"/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar _htmlTagRegex = /<.*?>/g;\nvar _cleanStringRegex = /\\n|\\s{2,}|&([a-zA-Z]+);/g;\n/**\n * Removes any html tags from a string and keeps inner text if any\n *\n * @param {string} str String to be checked for html tags\n * @returns {string} String with html tags stripped out\n * @private\n */\n\nvar _removeHtmlTags = function _removeHtmlTags(str) {\n  return str.replace(_htmlTagRegex, '');\n};\n/**\n * Cleans string by replacing multiple spaces with a single space\n * and removing single new lines.\n *\n * @param {string} str String to be checked\n * @returns {string} String with multiple spaces and single new lines removed\n * @private\n */\n\n\nvar _cleanString = function _cleanString(str) {\n  return str.replace(_cleanStringRegex, ' ');\n};\n/**\n *\n * @param {string} str html string passed in to remove html tags and entities\n * @param {object} [options={}] Object with options for the conversion\n * @param {boolean} [options.removeEntities=true] Defines if should remove html entities\n * @returns {string} String removed of html tags\n * @example\n * import { removeHtmlTagEntities } from '@carbon/ibmdotcom-utilities';\n *\n * markdownToHtml('<p>example string</p>&nbsp;<p>here</>')\n * // 'example string here'\n */\n\n\nfunction removeHtmlTagEntities(str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$removeEntities = _ref.removeEntities,\n      removeEntities = _ref$removeEntities === void 0 ? true : _ref$removeEntities;\n\n  var removedTags = _removeHtmlTags(str);\n\n  removedTags = removeEntities ? _cleanString(removedTags) : removedTags;\n  return removedTags;\n}\n\nexport default removeHtmlTagEntities;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/internal/vendor/@carbon/ibmdotcom-utilities/utilities/removeHtmlTagEntities/removeHtmlTagEntities.js"],"names":["_htmlTagRegex","_cleanStringRegex","_removeHtmlTags","str","replace","_cleanString","removeHtmlTagEntities","_ref","arguments","length","undefined","_ref$removeEntities","removeEntities","removedTags"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,aAAa,GAAG,QAApB;AACA,IAAIC,iBAAiB,GAAG,0BAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,GAAzB,EAA8B;AAClD,SAAOA,GAAG,CAACC,OAAJ,CAAYJ,aAAZ,EAA2B,EAA3B,CAAP;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIK,YAAY,GAAG,SAASA,YAAT,CAAsBF,GAAtB,EAA2B;AAC5C,SAAOA,GAAG,CAACC,OAAJ,CAAYH,iBAAZ,EAA+B,GAA/B,CAAP;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASK,qBAAT,CAA+BH,GAA/B,EAAoC;AAClC,MAAII,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,MACIG,mBAAmB,GAAGJ,IAAI,CAACK,cAD/B;AAAA,MAEIA,cAAc,GAAGD,mBAAmB,KAAK,KAAK,CAA7B,GAAiC,IAAjC,GAAwCA,mBAF7D;;AAIA,MAAIE,WAAW,GAAGX,eAAe,CAACC,GAAD,CAAjC;;AAEAU,EAAAA,WAAW,GAAGD,cAAc,GAAGP,YAAY,CAACQ,WAAD,CAAf,GAA+BA,WAA3D;AACA,SAAOA,WAAP;AACD;;AAED,eAAeP,qBAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar _htmlTagRegex = /<.*?>/g;\nvar _cleanStringRegex = /\\n|\\s{2,}|&([a-zA-Z]+);/g;\n/**\n * Removes any html tags from a string and keeps inner text if any\n *\n * @param {string} str String to be checked for html tags\n * @returns {string} String with html tags stripped out\n * @private\n */\n\nvar _removeHtmlTags = function _removeHtmlTags(str) {\n  return str.replace(_htmlTagRegex, '');\n};\n/**\n * Cleans string by replacing multiple spaces with a single space\n * and removing single new lines.\n *\n * @param {string} str String to be checked\n * @returns {string} String with multiple spaces and single new lines removed\n * @private\n */\n\n\nvar _cleanString = function _cleanString(str) {\n  return str.replace(_cleanStringRegex, ' ');\n};\n/**\n *\n * @param {string} str html string passed in to remove html tags and entities\n * @param {object} [options={}] Object with options for the conversion\n * @param {boolean} [options.removeEntities=true] Defines if should remove html entities\n * @returns {string} String removed of html tags\n * @example\n * import { removeHtmlTagEntities } from '@carbon/ibmdotcom-utilities';\n *\n * markdownToHtml('<p>example string</p>&nbsp;<p>here</>')\n * // 'example string here'\n */\n\n\nfunction removeHtmlTagEntities(str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$removeEntities = _ref.removeEntities,\n      removeEntities = _ref$removeEntities === void 0 ? true : _ref$removeEntities;\n\n  var removedTags = _removeHtmlTags(str);\n\n  removedTags = removeEntities ? _cleanString(removedTags) : removedTags;\n  return removedTags;\n}\n\nexport default removeHtmlTagEntities;"]},"metadata":{},"sourceType":"module"}