{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Button from '../../internal/vendor/carbon-components-react/components/Button/Button';\nimport { DDS_AUDIO_PLAYER } from '../../internal/FeatureFlags';\nimport Forward1032 from '@carbon/icons-react/es/forward--10/32';\nimport { KalturaPlayer as KalturaPlayerAPI } from '@carbon/ibmdotcom-services/es/services';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Rewind_1032 from '@carbon/icons-react/es/rewind--10/32';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport Slider from '../../internal/vendor/carbon-components-react/components/Slider/Slider';\nvar prefix = settings.prefix;\n\nvar AudioPlayerScrubber = function AudioPlayerScrubber(_ref) {\n  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,\n      audioTime = _ref.audioTime,\n      setAudioTime = _ref.setAudioTime,\n      audioDuration = _ref.audioDuration,\n      setDisplayVolumeControl = _ref.setDisplayVolumeControl;\n  var audioDurationAsString = KalturaPlayerAPI.getMediaDuration(audioDuration); // Audio Total Time\n\n  var handleFormat = function handleFormat(minMax, minOrMaxLabel) {\n    return minOrMaxLabel;\n  };\n\n  var handleRewindForwardAudio = function handleRewindForwardAudio(addedValue) {\n    if (kalturaDigitalPlayer) {\n      var time = audioTime + addedValue;\n      time = time < 0 ? 0 : time;\n      time = time >= audioDuration ? audioDuration : time;\n      kalturaDigitalPlayer.sendNotification('doSeek', time);\n      setAudioTime(time); // Hide the Volume Control Bar if Opened\n\n      setDisplayVolumeControl(false);\n    }\n  };\n\n  var handleScrubberChange = function handleScrubberChange(time) {\n    /**\n     * As this will trigger every time the updatePlayhead listener triggers\n     *  and we floor the floating value returned, sometimes it will return like\n     *  1.123 -> Floored to 1\n     *  then next tick / callback will return\n     *  1.98123 -> Floored to 1\n     * Meaning that this function will trigger and set the second\n     *  on the player to 1 - making it go back in the audio time\n     *  and thus generating a really SAD choke/gulp in the audio\n     * So this function should ONLY trigger if the absolute difference\n     *  of the new scrubber time is bigger then 1 from the previou time value\n     */\n    if (Math.abs(time - audioTime) >= 1 && kalturaDigitalPlayer) {\n      kalturaDigitalPlayer.sendNotification('doSeek', time);\n      setAudioTime(time); // Hide the Volume Control Bar if Opened\n\n      setDisplayVolumeControl(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    renderIcon: Rewind_1032,\n    iconDescription: \"Rewind 10 seconds\",\n    hasIconOnly: true,\n    kind: \"ghost\",\n    tooltipPosition: \"top\",\n    onClick: function onClick() {\n      handleRewindForwardAudio(-10);\n    },\n    disabled: !kalturaDigitalPlayer\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--audio-player__audio-time\")\n  }, /*#__PURE__*/React.createElement(Slider, {\n    min: 0,\n    max: audioDuration,\n    minLabel: KalturaPlayerAPI.getMediaDuration(audioTime),\n    maxLabel: audioDurationAsString,\n    value: audioTime,\n    onChange: function onChange(_ref2) {\n      var value = _ref2.value;\n      return handleScrubberChange(value);\n    },\n    hideTextInput: true,\n    formatLabel: function formatLabel(value, minOrMaxLabel) {\n      return handleFormat(value, minOrMaxLabel);\n    },\n    step: 1,\n    stepMultiplier: 10,\n    disabled: !kalturaDigitalPlayer\n  })), /*#__PURE__*/React.createElement(Button, {\n    renderIcon: Forward1032,\n    iconDescription: \"Forward 10 seconds\",\n    hasIconOnly: true,\n    kind: \"ghost\",\n    tooltipPosition: \"top\",\n    onClick: function onClick() {\n      handleRewindForwardAudio(10);\n    },\n    disabled: !kalturaDigitalPlayer\n  }));\n};\n\nAudioPlayerScrubber.propTypes = {\n  /**\n   * The kaltura digital player (KDP) object\n   * It starts as false and gets morphed into the html element\n   *  of the target player id reference during the kaltura player\n   *  embeding process as soon as the kaltura ready callback triggers\n   */\n  kalturaDigitalPlayer: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]).isRequired,\n\n  /**\n   * The state getter for the current audio time (in seconds)\n   */\n  audioTime: PropTypes.number.isRequired,\n\n  /**\n   * The setter function for the current audio time (in seconds)\n   */\n  setAudioTime: PropTypes.func.isRequired,\n\n  /**\n   * The duration of the audio (in seconds)\n   */\n  audioDuration: PropTypes.number.isRequired,\n\n  /**\n   * The state setter that show/hide the custom volume menu\n   */\n  setDisplayVolumeControl: PropTypes.func.isRequired\n};\nAudioPlayerScrubber.defaultProps = {\n  kalturaDigitalPlayer: false,\n  audioTime: 0,\n  audioDuration: 0\n};\nexport default !DDS_AUDIO_PLAYER ? undefined : AudioPlayerScrubber;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/components/AudioPlayer/AudioPlayerScrubber.js"],"names":["Button","DDS_AUDIO_PLAYER","Forward1032","KalturaPlayer","KalturaPlayerAPI","PropTypes","React","Rewind_1032","settings","Slider","prefix","AudioPlayerScrubber","_ref","kalturaDigitalPlayer","audioTime","setAudioTime","audioDuration","setDisplayVolumeControl","audioDurationAsString","getMediaDuration","handleFormat","minMax","minOrMaxLabel","handleRewindForwardAudio","addedValue","time","sendNotification","handleScrubberChange","Math","abs","createElement","Fragment","renderIcon","iconDescription","hasIconOnly","kind","tooltipPosition","onClick","disabled","className","concat","min","max","minLabel","maxLabel","value","onChange","_ref2","hideTextInput","formatLabel","step","stepMultiplier","propTypes","oneOfType","object","bool","isRequired","number","func","defaultProps","undefined"],"mappings":"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","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Button from '../../internal/vendor/carbon-components-react/components/Button/Button';\nimport { DDS_AUDIO_PLAYER } from '../../internal/FeatureFlags';\nimport Forward1032 from '@carbon/icons-react/es/forward--10/32';\nimport { KalturaPlayer as KalturaPlayerAPI } from '@carbon/ibmdotcom-services/es/services';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Rewind_1032 from '@carbon/icons-react/es/rewind--10/32';\nimport settings from 'carbon-components/es/globals/js/settings';\nimport Slider from '../../internal/vendor/carbon-components-react/components/Slider/Slider';\nvar prefix = settings.prefix;\n\nvar AudioPlayerScrubber = function AudioPlayerScrubber(_ref) {\n  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,\n      audioTime = _ref.audioTime,\n      setAudioTime = _ref.setAudioTime,\n      audioDuration = _ref.audioDuration,\n      setDisplayVolumeControl = _ref.setDisplayVolumeControl;\n  var audioDurationAsString = KalturaPlayerAPI.getMediaDuration(audioDuration); // Audio Total Time\n\n  var handleFormat = function handleFormat(minMax, minOrMaxLabel) {\n    return minOrMaxLabel;\n  };\n\n  var handleRewindForwardAudio = function handleRewindForwardAudio(addedValue) {\n    if (kalturaDigitalPlayer) {\n      var time = audioTime + addedValue;\n      time = time < 0 ? 0 : time;\n      time = time >= audioDuration ? audioDuration : time;\n      kalturaDigitalPlayer.sendNotification('doSeek', time);\n      setAudioTime(time); // Hide the Volume Control Bar if Opened\n\n      setDisplayVolumeControl(false);\n    }\n  };\n\n  var handleScrubberChange = function handleScrubberChange(time) {\n    /**\n     * As this will trigger every time the updatePlayhead listener triggers\n     *  and we floor the floating value returned, sometimes it will return like\n     *  1.123 -> Floored to 1\n     *  then next tick / callback will return\n     *  1.98123 -> Floored to 1\n     * Meaning that this function will trigger and set the second\n     *  on the player to 1 - making it go back in the audio time\n     *  and thus generating a really SAD choke/gulp in the audio\n     * So this function should ONLY trigger if the absolute difference\n     *  of the new scrubber time is bigger then 1 from the previou time value\n     */\n    if (Math.abs(time - audioTime) >= 1 && kalturaDigitalPlayer) {\n      kalturaDigitalPlayer.sendNotification('doSeek', time);\n      setAudioTime(time); // Hide the Volume Control Bar if Opened\n\n      setDisplayVolumeControl(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    renderIcon: Rewind_1032,\n    iconDescription: \"Rewind 10 seconds\",\n    hasIconOnly: true,\n    kind: \"ghost\",\n    tooltipPosition: \"top\",\n    onClick: function onClick() {\n      handleRewindForwardAudio(-10);\n    },\n    disabled: !kalturaDigitalPlayer\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--audio-player__audio-time\")\n  }, /*#__PURE__*/React.createElement(Slider, {\n    min: 0,\n    max: audioDuration,\n    minLabel: KalturaPlayerAPI.getMediaDuration(audioTime),\n    maxLabel: audioDurationAsString,\n    value: audioTime,\n    onChange: function onChange(_ref2) {\n      var value = _ref2.value;\n      return handleScrubberChange(value);\n    },\n    hideTextInput: true,\n    formatLabel: function formatLabel(value, minOrMaxLabel) {\n      return handleFormat(value, minOrMaxLabel);\n    },\n    step: 1,\n    stepMultiplier: 10,\n    disabled: !kalturaDigitalPlayer\n  })), /*#__PURE__*/React.createElement(Button, {\n    renderIcon: Forward1032,\n    iconDescription: \"Forward 10 seconds\",\n    hasIconOnly: true,\n    kind: \"ghost\",\n    tooltipPosition: \"top\",\n    onClick: function onClick() {\n      handleRewindForwardAudio(10);\n    },\n    disabled: !kalturaDigitalPlayer\n  }));\n};\n\nAudioPlayerScrubber.propTypes = {\n  /**\n   * The kaltura digital player (KDP) object\n   * It starts as false and gets morphed into the html element\n   *  of the target player id reference during the kaltura player\n   *  embeding process as soon as the kaltura ready callback triggers\n   */\n  kalturaDigitalPlayer: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]).isRequired,\n\n  /**\n   * The state getter for the current audio time (in seconds)\n   */\n  audioTime: PropTypes.number.isRequired,\n\n  /**\n   * The setter function for the current audio time (in seconds)\n   */\n  setAudioTime: PropTypes.func.isRequired,\n\n  /**\n   * The duration of the audio (in seconds)\n   */\n  audioDuration: PropTypes.number.isRequired,\n\n  /**\n   * The state setter that show/hide the custom volume menu\n   */\n  setDisplayVolumeControl: PropTypes.func.isRequired\n};\nAudioPlayerScrubber.defaultProps = {\n  kalturaDigitalPlayer: false,\n  audioTime: 0,\n  audioDuration: 0\n};\nexport default !DDS_AUDIO_PLAYER ? undefined : AudioPlayerScrubber;"]},"metadata":{},"sourceType":"module"}