{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"],\n    _excluded2 = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\", \"span\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as FeatureFlags from '@carbon/feature-flags';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { usePrefix } from '../../internal/usePrefix';\nimport { useGridSettings } from './GridContext';\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      customClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useGridSettings = useGridSettings(),\n      mode = _useGridSettings.mode;\n\n  var prefix = usePrefix();\n\n  if (mode === 'css-grid') {\n    return /*#__PURE__*/React.createElement(CSSGridColumn, _extends({\n      as: BaseComponent,\n      className: customClassName,\n      sm: sm,\n      md: md,\n      lg: lg,\n      xlg: xlg,\n      max: max\n    }, rest), children);\n  }\n\n  var columnClassName = getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);\n  var className = cx(customClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar percentSpanType = PropTypes.oneOf(['25%', '50%', '75%', '100%']);\nvar spanPropType = FeatureFlags.enabled('enable-css-grid') ? PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n  offset: PropTypes.number,\n  start: PropTypes.number,\n  end: PropTypes.number\n}), percentSpanType]) : PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\n\nfunction CSSGridColumn(_ref2) {\n  var _ref2$as = _ref2.as,\n      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,\n      children = _ref2.children,\n      containerClassName = _ref2.className,\n      sm = _ref2.sm,\n      md = _ref2.md,\n      lg = _ref2.lg,\n      xlg = _ref2.xlg,\n      max = _ref2.max,\n      span = _ref2.span,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var prefix = usePrefix();\n  var breakpointClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix);\n  var spanClassName = getClassNameForSpan(span, prefix);\n  var className = cx(containerClassName, breakpointClassName, spanClassName, _defineProperty({}, \"\".concat(prefix, \"--css-grid-column\"), true));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nCSSGridColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify constant column span, start,  or end values that will not change\n   * based on breakpoint\n   */\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType, PropTypes.shape({\n    span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n    start: PropTypes.number,\n    end: PropTypes.number\n  })]),\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a string, the user has specified a percent\n    // they'd like this column to span.\n\n\n    if (typeof breakpoint === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint.slice(0, -1)));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset,\n        start = breakpoint.start,\n        end = breakpoint.end;\n\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n\n    if (typeof start === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(start));\n    }\n\n    if (typeof end === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-end-\").concat(end));\n    }\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n    } else if (typeof span === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span.slice(0, -1)));\n      continue;\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for a span value\n */\n\n\nfunction getClassNameForSpan(value, prefix) {\n  var classNames = [];\n\n  if (typeof value === 'number' || typeof value === 'string') {\n    classNames.push(\"\".concat(prefix, \"--col-span-\").concat(value));\n  } else if (_typeof(value) === 'object') {\n    var span = value.span,\n        start = value.start,\n        end = value.end;\n\n    if (span !== undefined && span !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-span-\").concat(span));\n    }\n\n    if (start !== undefined && start !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-start-\").concat(start));\n    }\n\n    if (end !== undefined && end !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-end-\").concat(end));\n    }\n  }\n\n  return classNames.join('');\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/carbon-components-react/es/components/Grid/Column.js"],"names":["_typeof","_defineProperty","_extends","_objectWithoutProperties","_excluded","_excluded2","FeatureFlags","cx","PropTypes","React","usePrefix","useGridSettings","Column","_ref","_ref$as","as","BaseComponent","children","customClassName","className","sm","md","lg","xlg","max","rest","_useGridSettings","mode","prefix","createElement","CSSGridColumn","columnClassName","getClassNameForFlexGridBreakpoints","concat","length","percentSpanType","oneOf","spanPropType","enabled","oneOfType","bool","number","shape","span","offset","start","end","propTypes","string","elementType","node","_ref2","_ref2$as","containerClassName","breakpointClassName","getClassNameForBreakpoints","spanClassName","getClassNameForSpan","breakpointNames","breakpoints","classNames","i","breakpoint","undefined","name","push","slice","join","value"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"],\n    _excluded2 = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\", \"span\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport * as FeatureFlags from '@carbon/feature-flags';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { usePrefix } from '../../internal/usePrefix';\nimport { useGridSettings } from './GridContext';\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      customClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useGridSettings = useGridSettings(),\n      mode = _useGridSettings.mode;\n\n  var prefix = usePrefix();\n\n  if (mode === 'css-grid') {\n    return /*#__PURE__*/React.createElement(CSSGridColumn, _extends({\n      as: BaseComponent,\n      className: customClassName,\n      sm: sm,\n      md: md,\n      lg: lg,\n      xlg: xlg,\n      max: max\n    }, rest), children);\n  }\n\n  var columnClassName = getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);\n  var className = cx(customClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar percentSpanType = PropTypes.oneOf(['25%', '50%', '75%', '100%']);\nvar spanPropType = FeatureFlags.enabled('enable-css-grid') ? PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n  offset: PropTypes.number,\n  start: PropTypes.number,\n  end: PropTypes.number\n}), percentSpanType]) : PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\n\nfunction CSSGridColumn(_ref2) {\n  var _ref2$as = _ref2.as,\n      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,\n      children = _ref2.children,\n      containerClassName = _ref2.className,\n      sm = _ref2.sm,\n      md = _ref2.md,\n      lg = _ref2.lg,\n      xlg = _ref2.xlg,\n      max = _ref2.max,\n      span = _ref2.span,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var prefix = usePrefix();\n  var breakpointClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix);\n  var spanClassName = getClassNameForSpan(span, prefix);\n  var className = cx(containerClassName, breakpointClassName, spanClassName, _defineProperty({}, \"\".concat(prefix, \"--css-grid-column\"), true));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nCSSGridColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify constant column span, start,  or end values that will not change\n   * based on breakpoint\n   */\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType, PropTypes.shape({\n    span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n    start: PropTypes.number,\n    end: PropTypes.number\n  })]),\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a string, the user has specified a percent\n    // they'd like this column to span.\n\n\n    if (typeof breakpoint === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint.slice(0, -1)));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset,\n        start = breakpoint.start,\n        end = breakpoint.end;\n\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n\n    if (typeof start === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(start));\n    }\n\n    if (typeof end === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-end-\").concat(end));\n    }\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n    } else if (typeof span === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span.slice(0, -1)));\n      continue;\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for a span value\n */\n\n\nfunction getClassNameForSpan(value, prefix) {\n  var classNames = [];\n\n  if (typeof value === 'number' || typeof value === 'string') {\n    classNames.push(\"\".concat(prefix, \"--col-span-\").concat(value));\n  } else if (_typeof(value) === 'object') {\n    var span = value.span,\n        start = value.start,\n        end = value.end;\n\n    if (span !== undefined && span !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-span-\").concat(span));\n    }\n\n    if (start !== undefined && start !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-start-\").concat(start));\n    }\n\n    if (end !== undefined && end !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-end-\").concat(end));\n    }\n  }\n\n  return classNames.join('');\n}\n\nexport default Column;"]},"metadata":{},"sourceType":"module"}