{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport root from 'window-or-global';\n/**\n * @constant {boolean} scrollTracker determines whether scroll tracking analytics is enabled\n * @private\n */\n\nvar _scrollTracker = process && process.env.SCROLL_TRACKING === 'true' || false;\n/**\n * Current NODE_ENV\n *\n * @type {string | string}\n * @private\n */\n\n\nvar _env = process && process.env.NODE_ENV || 'development';\n/**\n * Analytics API class with methods for firing analytics events on\n * ibm.com\n */\n\n\nvar AnalyticsAPI = /*#__PURE__*/function () {\n  function AnalyticsAPI() {\n    _classCallCheck(this, AnalyticsAPI);\n  }\n\n  _createClass(AnalyticsAPI, null, [{\n    key: \"registerEvent\",\n\n    /**\n     * This method checks that the analytics script has been loaded\n     * and fires an event to Coremetrics\n     *\n     * @param {object} eventData Object with standard IBM metric event properties and values to send to Coremetrics\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function fireEvent() {\n     *    const eventData = {\n     *        type: 'element',\n     *        primaryCategory: 'MASTHEAD',\n     *        eventName: 'CLICK',\n     *        executionPath: 'masthead__profile',\n     *        execPathReturnCode: 'none',\n     *        targetTitle: 'profile'\n     *    }\n     *    AnalyticsAPI.registerEvent(eventData);\n     * }\n     *\n     *\n     */\n    value: function registerEvent(eventData) {\n      if (root.ibmStats) {\n        root.ibmStats.event(eventData);\n      }\n    }\n    /**\n     * Initializes all analytics global tracking init functions\n     */\n\n  }, {\n    key: \"initAll\",\n    value: function initAll() {\n      this.initScrollTracker();\n      this.initDynamicTabs();\n      this.initModals();\n    }\n    /**\n     *\n     * If scroll tracking is enabled, this method will fire an event for every 400px\n     * user scrolls down the page. Only the deepest depth will fire the event (e.g if\n     * user scrolls back up the page, the event will not be triggered)\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function init() {\n     *   AnalyticsAPI.initScrollTracker();\n     * }\n     *\n     * @deprecated\n     **/\n\n  }, {\n    key: \"initScrollTracker\",\n    value: function initScrollTracker() {\n      if (_scrollTracker) {\n        console.warn('Scroll tracker service has been deprecated. Please refer to documentation for IBM DBDM gestures 2.0.');\n      }\n    }\n    /**\n     * This instantiates an event listener to trigger an event if the Carbon\n     * Tabs component is being interacted with by the user\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function init() {\n     *   AnalyticsAPI.initDynamicTabs();\n     * }\n     */\n\n  }, {\n    key: \"initDynamicTabs\",\n    value: function initDynamicTabs() {\n      var tabSelected = this.triggerTabSelected.bind(this);\n      root.document.addEventListener('tab-selected', function (evt) {\n        tabSelected(evt.target.id, evt.detail.item.innerText);\n      });\n    }\n    /**\n     * Triggers to CLICK event for the dynamic tabs\n     *\n     * @param {string} executionPath Target ID\n     * @param {string} targetTitle Target innerText\n     */\n\n  }, {\n    key: \"triggerTabSelected\",\n    value: function triggerTabSelected(executionPath, targetTitle) {\n      try {\n        this.registerEvent({\n          type: 'element',\n          primaryCategory: 'WIDGET',\n          eventName: 'CLICK',\n          eventCategoryGroup: 'TABS DYNAMIC',\n          executionPath: executionPath,\n          targetTitle: targetTitle\n        });\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error triggering tab event:', err);\n        }\n      }\n    }\n    /**\n     * This instantiates an event listener to trigger an event if the Carbon\n     * Modal component is being interacted with by the user\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function init() {\n     *   AnalyticsAPI.initModals();\n     * }\n     */\n\n  }, {\n    key: \"initModals\",\n    value: function initModals() {\n      var modalHide = this.triggerModalHide.bind(this);\n      root.document.addEventListener('modal-hidden', function (evt) {\n        modalHide(evt.target.id, evt.detail.launchingElement.innerText);\n      });\n      var modalShow = this.triggerModalShow.bind(this);\n      root.document.addEventListener('modal-shown', function (evt) {\n        modalShow(evt.target.id, evt.detail.launchingElement.innerText);\n      });\n    }\n    /**\n     * Triggers the HIDE event for the modal\n     *\n     * @param {string} executionPath Target ID\n     * @param {string} targetTitle Target innerText\n     */\n\n  }, {\n    key: \"triggerModalHide\",\n    value: function triggerModalHide(executionPath, targetTitle) {\n      try {\n        this.registerEvent({\n          type: 'element',\n          primaryCategory: 'WIDGET',\n          eventName: 'HIDE',\n          eventCategoryGroup: 'SHOWHIDE',\n          executionPath: executionPath,\n          targetTitle: targetTitle\n        });\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error triggering modal hide event:', err);\n        }\n      }\n    }\n    /**\n     * Triggers the SHOW event for the modal\n     *\n     * @param {string} executionPath Target ID\n     * @param {string} targetTitle Target innerText\n     */\n\n  }, {\n    key: \"triggerModalShow\",\n    value: function triggerModalShow(executionPath, targetTitle) {\n      try {\n        this.registerEvent({\n          type: 'element',\n          primaryCategory: 'WIDGET',\n          eventName: 'SHOW',\n          eventCategoryGroup: 'SHOWHIDE',\n          executionPath: executionPath,\n          targetTitle: targetTitle\n        });\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error triggering modal show event:', err);\n        }\n      }\n    }\n    /**\n     * Sends video player metrics data\n     *\n     * @param {object} data event data from the video player\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     *function init() {\n     *    const data = {\n     *       playerType: 'kaltura',\n     *       title: 'Folgers Coffee',\n     *       currentTime: 1,\n     *       duration: 60,\n     *       playerState: 1,\n     *       mediaId: '1_9h94wo6b',\n     *    };\n     *\n     *    AnalyticsAPI.videoPlayerStats(data);\n     *}\n     *\n     */\n\n  }, {\n    key: \"videoPlayerStats\",\n    value: function videoPlayerStats(data) {\n      var _data$customMetricsDa, _data$customMetricsDa2, _data$customMetricsDa3;\n\n      var playerState = '',\n          currentTime = Math.floor(data.currentTime),\n          duration = Math.floor(data.duration),\n          percentWatched = Math.floor(currentTime / duration * 100); // Set nicenames for player states for event.\n\n      switch (data.playerState) {\n        case 0:\n          playerState = 'launched';\n          break;\n\n        case 1:\n          playerState = 'paused';\n          break;\n\n        case 2:\n          playerState = 'played';\n          break;\n\n        case 3:\n          playerState = 'ended';\n          break;\n\n        case 99:\n          playerState = 'error';\n          break;\n\n        default:\n      }\n\n      if (currentTime === 0) {\n        currentTime = 'start';\n        percentWatched = '0';\n      }\n\n      if (currentTime >= duration || data.playerState === 3) {\n        currentTime = 'end';\n        percentWatched = '100';\n      } // If went to the end of the video, and fired \"pause\" event, don't fire pause event b/c it's really\n      // the end of the video, so just let \"end\" event fire and tag metrics.\n\n\n      if (currentTime === 'end' && data.playerState === 1) {\n        return;\n      }\n\n      var eventData = {\n        type: 'video',\n        primaryCategory: 'VIDEO',\n        eventName: data.title,\n        eventCategoryGroup: data.playerType,\n        executionPath: data.videoId || data.mediaId,\n        execPathReturnCode: playerState,\n        eventVidStatus: data.playerState,\n        eventVidTimeStamp: currentTime,\n        eventVidLength: duration,\n        eventVidPlayed: percentWatched + '%'\n      };\n\n      if (data === null || data === void 0 ? void 0 : (_data$customMetricsDa = data.customMetricsData) === null || _data$customMetricsDa === void 0 ? void 0 : _data$customMetricsDa.playerStateLabel) {\n        eventData.playerStateLabel = data.customMetricsData.playerStateLabel;\n      }\n\n      if (data === null || data === void 0 ? void 0 : (_data$customMetricsDa2 = data.customMetricsData) === null || _data$customMetricsDa2 === void 0 ? void 0 : _data$customMetricsDa2.driverId) {\n        eventData.driverId = data.customMetricsData.driverId;\n      }\n\n      if (data === null || data === void 0 ? void 0 : (_data$customMetricsDa3 = data.customMetricsData) === null || _data$customMetricsDa3 === void 0 ? void 0 : _data$customMetricsDa3.targetURL) {\n        eventData.targetURL = data.customMetricsData.targetURL;\n      }\n\n      try {\n        this.registerEvent(eventData);\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error firing video metrics:', err);\n        }\n      }\n    }\n  }]);\n\n  return AnalyticsAPI;\n}();\n\nexport default AnalyticsAPI;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/internal/vendor/@carbon/ibmdotcom-services/services/Analytics/Analytics.js"],"names":["_classCallCheck","_createClass","root","_scrollTracker","process","env","SCROLL_TRACKING","_env","NODE_ENV","AnalyticsAPI","key","value","registerEvent","eventData","ibmStats","event","initAll","initScrollTracker","initDynamicTabs","initModals","console","warn","tabSelected","triggerTabSelected","bind","document","addEventListener","evt","target","id","detail","item","innerText","executionPath","targetTitle","type","primaryCategory","eventName","eventCategoryGroup","err","error","modalHide","triggerModalHide","launchingElement","modalShow","triggerModalShow","videoPlayerStats","data","_data$customMetricsDa","_data$customMetricsDa2","_data$customMetricsDa3","playerState","currentTime","Math","floor","duration","percentWatched","title","playerType","videoId","mediaId","execPathReturnCode","eventVidStatus","eventVidTimeStamp","eventVidLength","eventVidPlayed","customMetricsData","playerStateLabel","driverId","targetURL"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * Copyright IBM Corp. 2020, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport root from 'window-or-global';\n/**\n * @constant {boolean} scrollTracker determines whether scroll tracking analytics is enabled\n * @private\n */\n\nvar _scrollTracker = process && process.env.SCROLL_TRACKING === 'true' || false;\n/**\n * Current NODE_ENV\n *\n * @type {string | string}\n * @private\n */\n\n\nvar _env = process && process.env.NODE_ENV || 'development';\n/**\n * Analytics API class with methods for firing analytics events on\n * ibm.com\n */\n\n\nvar AnalyticsAPI = /*#__PURE__*/function () {\n  function AnalyticsAPI() {\n    _classCallCheck(this, AnalyticsAPI);\n  }\n\n  _createClass(AnalyticsAPI, null, [{\n    key: \"registerEvent\",\n\n    /**\n     * This method checks that the analytics script has been loaded\n     * and fires an event to Coremetrics\n     *\n     * @param {object} eventData Object with standard IBM metric event properties and values to send to Coremetrics\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function fireEvent() {\n     *    const eventData = {\n     *        type: 'element',\n     *        primaryCategory: 'MASTHEAD',\n     *        eventName: 'CLICK',\n     *        executionPath: 'masthead__profile',\n     *        execPathReturnCode: 'none',\n     *        targetTitle: 'profile'\n     *    }\n     *    AnalyticsAPI.registerEvent(eventData);\n     * }\n     *\n     *\n     */\n    value: function registerEvent(eventData) {\n      if (root.ibmStats) {\n        root.ibmStats.event(eventData);\n      }\n    }\n    /**\n     * Initializes all analytics global tracking init functions\n     */\n\n  }, {\n    key: \"initAll\",\n    value: function initAll() {\n      this.initScrollTracker();\n      this.initDynamicTabs();\n      this.initModals();\n    }\n    /**\n     *\n     * If scroll tracking is enabled, this method will fire an event for every 400px\n     * user scrolls down the page. Only the deepest depth will fire the event (e.g if\n     * user scrolls back up the page, the event will not be triggered)\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function init() {\n     *   AnalyticsAPI.initScrollTracker();\n     * }\n     *\n     * @deprecated\n     **/\n\n  }, {\n    key: \"initScrollTracker\",\n    value: function initScrollTracker() {\n      if (_scrollTracker) {\n        console.warn('Scroll tracker service has been deprecated. Please refer to documentation for IBM DBDM gestures 2.0.');\n      }\n    }\n    /**\n     * This instantiates an event listener to trigger an event if the Carbon\n     * Tabs component is being interacted with by the user\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function init() {\n     *   AnalyticsAPI.initDynamicTabs();\n     * }\n     */\n\n  }, {\n    key: \"initDynamicTabs\",\n    value: function initDynamicTabs() {\n      var tabSelected = this.triggerTabSelected.bind(this);\n      root.document.addEventListener('tab-selected', function (evt) {\n        tabSelected(evt.target.id, evt.detail.item.innerText);\n      });\n    }\n    /**\n     * Triggers to CLICK event for the dynamic tabs\n     *\n     * @param {string} executionPath Target ID\n     * @param {string} targetTitle Target innerText\n     */\n\n  }, {\n    key: \"triggerTabSelected\",\n    value: function triggerTabSelected(executionPath, targetTitle) {\n      try {\n        this.registerEvent({\n          type: 'element',\n          primaryCategory: 'WIDGET',\n          eventName: 'CLICK',\n          eventCategoryGroup: 'TABS DYNAMIC',\n          executionPath: executionPath,\n          targetTitle: targetTitle\n        });\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error triggering tab event:', err);\n        }\n      }\n    }\n    /**\n     * This instantiates an event listener to trigger an event if the Carbon\n     * Modal component is being interacted with by the user\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     * function init() {\n     *   AnalyticsAPI.initModals();\n     * }\n     */\n\n  }, {\n    key: \"initModals\",\n    value: function initModals() {\n      var modalHide = this.triggerModalHide.bind(this);\n      root.document.addEventListener('modal-hidden', function (evt) {\n        modalHide(evt.target.id, evt.detail.launchingElement.innerText);\n      });\n      var modalShow = this.triggerModalShow.bind(this);\n      root.document.addEventListener('modal-shown', function (evt) {\n        modalShow(evt.target.id, evt.detail.launchingElement.innerText);\n      });\n    }\n    /**\n     * Triggers the HIDE event for the modal\n     *\n     * @param {string} executionPath Target ID\n     * @param {string} targetTitle Target innerText\n     */\n\n  }, {\n    key: \"triggerModalHide\",\n    value: function triggerModalHide(executionPath, targetTitle) {\n      try {\n        this.registerEvent({\n          type: 'element',\n          primaryCategory: 'WIDGET',\n          eventName: 'HIDE',\n          eventCategoryGroup: 'SHOWHIDE',\n          executionPath: executionPath,\n          targetTitle: targetTitle\n        });\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error triggering modal hide event:', err);\n        }\n      }\n    }\n    /**\n     * Triggers the SHOW event for the modal\n     *\n     * @param {string} executionPath Target ID\n     * @param {string} targetTitle Target innerText\n     */\n\n  }, {\n    key: \"triggerModalShow\",\n    value: function triggerModalShow(executionPath, targetTitle) {\n      try {\n        this.registerEvent({\n          type: 'element',\n          primaryCategory: 'WIDGET',\n          eventName: 'SHOW',\n          eventCategoryGroup: 'SHOWHIDE',\n          executionPath: executionPath,\n          targetTitle: targetTitle\n        });\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error triggering modal show event:', err);\n        }\n      }\n    }\n    /**\n     * Sends video player metrics data\n     *\n     * @param {object} data event data from the video player\n     *\n     * @example\n     * import { AnalyticsAPI } from '@carbon/ibmdotcom-services';\n     *\n     *function init() {\n     *    const data = {\n     *       playerType: 'kaltura',\n     *       title: 'Folgers Coffee',\n     *       currentTime: 1,\n     *       duration: 60,\n     *       playerState: 1,\n     *       mediaId: '1_9h94wo6b',\n     *    };\n     *\n     *    AnalyticsAPI.videoPlayerStats(data);\n     *}\n     *\n     */\n\n  }, {\n    key: \"videoPlayerStats\",\n    value: function videoPlayerStats(data) {\n      var _data$customMetricsDa, _data$customMetricsDa2, _data$customMetricsDa3;\n\n      var playerState = '',\n          currentTime = Math.floor(data.currentTime),\n          duration = Math.floor(data.duration),\n          percentWatched = Math.floor(currentTime / duration * 100); // Set nicenames for player states for event.\n\n      switch (data.playerState) {\n        case 0:\n          playerState = 'launched';\n          break;\n\n        case 1:\n          playerState = 'paused';\n          break;\n\n        case 2:\n          playerState = 'played';\n          break;\n\n        case 3:\n          playerState = 'ended';\n          break;\n\n        case 99:\n          playerState = 'error';\n          break;\n\n        default:\n      }\n\n      if (currentTime === 0) {\n        currentTime = 'start';\n        percentWatched = '0';\n      }\n\n      if (currentTime >= duration || data.playerState === 3) {\n        currentTime = 'end';\n        percentWatched = '100';\n      } // If went to the end of the video, and fired \"pause\" event, don't fire pause event b/c it's really\n      // the end of the video, so just let \"end\" event fire and tag metrics.\n\n\n      if (currentTime === 'end' && data.playerState === 1) {\n        return;\n      }\n\n      var eventData = {\n        type: 'video',\n        primaryCategory: 'VIDEO',\n        eventName: data.title,\n        eventCategoryGroup: data.playerType,\n        executionPath: data.videoId || data.mediaId,\n        execPathReturnCode: playerState,\n        eventVidStatus: data.playerState,\n        eventVidTimeStamp: currentTime,\n        eventVidLength: duration,\n        eventVidPlayed: percentWatched + '%'\n      };\n\n      if (data === null || data === void 0 ? void 0 : (_data$customMetricsDa = data.customMetricsData) === null || _data$customMetricsDa === void 0 ? void 0 : _data$customMetricsDa.playerStateLabel) {\n        eventData.playerStateLabel = data.customMetricsData.playerStateLabel;\n      }\n\n      if (data === null || data === void 0 ? void 0 : (_data$customMetricsDa2 = data.customMetricsData) === null || _data$customMetricsDa2 === void 0 ? void 0 : _data$customMetricsDa2.driverId) {\n        eventData.driverId = data.customMetricsData.driverId;\n      }\n\n      if (data === null || data === void 0 ? void 0 : (_data$customMetricsDa3 = data.customMetricsData) === null || _data$customMetricsDa3 === void 0 ? void 0 : _data$customMetricsDa3.targetURL) {\n        eventData.targetURL = data.customMetricsData.targetURL;\n      }\n\n      try {\n        this.registerEvent(eventData);\n      } catch (err) {\n        if (_env !== 'production') {\n          console.error('Error firing video metrics:', err);\n        }\n      }\n    }\n  }]);\n\n  return AnalyticsAPI;\n}();\n\nexport default AnalyticsAPI;"]},"metadata":{},"sourceType":"module"}