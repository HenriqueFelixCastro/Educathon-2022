{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * Copyright IBM Corp. 2020, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';\nimport PropTypes from 'prop-types';\nimport root from 'window-or-global';\nvar stablePrefix = ddsSettings.stablePrefix;\n/**\n * Renders the input bar with the search icon.\n */\n\nvar MastheadSearchInput = function MastheadSearchInput(_ref) {\n  var componentInputProps = _ref.componentInputProps,\n      dispatch = _ref.dispatch,\n      isActive = _ref.isActive,\n      disableFocus = _ref.disableFocus;\n  var searchRef = useRef();\n  /**\n   * Clear search and clear input when called\n   */\n\n  var resetSearch = useCallback(function () {\n    dispatch({\n      type: 'setSearchClosed'\n    });\n    dispatch({\n      type: 'setVal',\n      payload: {\n        val: ''\n      }\n    });\n  }, [dispatch]);\n  /**\n   * emit custom event for search input enter keypress\n   */\n\n  var handleSearchEnter = function handleSearchEnter(event) {\n    if (event.key === 'Enter') {\n      var onSearchEnter = new CustomEvent('onSearchEnter', {\n        bubbles: true,\n        detail: {\n          value: event.target.value\n        }\n      });\n      event.currentTarget.dispatchEvent(onSearchEnter);\n    }\n  };\n\n  useEffect(function () {\n    if (isActive) {\n      if (!disableFocus) {\n        searchRef.current && searchRef.current.focus();\n      }\n\n      root.document.addEventListener('keyup', handleSearchEnter, true);\n      return function () {\n        root.document.removeEventListener('keyup', handleSearchEnter, true);\n      };\n    } else resetSearch();\n  }, [isActive, disableFocus, resetSearch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", _extends({}, componentInputProps, {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--header__search--input\"),\n    ref: searchRef,\n    name: \"q\",\n    tabIndex: isActive ? null : '-1'\n  })));\n};\n\nMastheadSearchInput.propTypes = {\n  /**\n   * The input props.\n   */\n  componentInputProps: PropTypes.object,\n\n  /**\n   * The Redux action dispatcher to control `<MastheadSearch>`.\n   */\n  dispatch: PropTypes.func,\n\n  /**\n   * `true` to make the search active.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Executes when the search icon is clicked.\n   */\n  searchIconClick: PropTypes.func,\n\n  /**\n   * Boolean to prevent focusing on the input if open on load, focus normally upon reopen.\n   */\n  disableFocus: PropTypes.bool\n};\nMastheadSearchInput.defaultProps = {\n  componentInputProps: {},\n  dispatch: function dispatch() {},\n  searchIconClick: function searchIconClick() {}\n};\nexport default MastheadSearchInput;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/components/Masthead/MastheadSearchInput.js"],"names":["_extends","React","useCallback","useEffect","useRef","ddsSettings","PropTypes","root","stablePrefix","MastheadSearchInput","_ref","componentInputProps","dispatch","isActive","disableFocus","searchRef","resetSearch","type","payload","val","handleSearchEnter","event","key","onSearchEnter","CustomEvent","bubbles","detail","value","target","currentTarget","dispatchEvent","current","focus","document","addEventListener","removeEventListener","createElement","Fragment","concat","ref","name","tabIndex","propTypes","object","func","bool","searchIconClick","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\n\n/**\n * Copyright IBM Corp. 2020, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';\nimport PropTypes from 'prop-types';\nimport root from 'window-or-global';\nvar stablePrefix = ddsSettings.stablePrefix;\n/**\n * Renders the input bar with the search icon.\n */\n\nvar MastheadSearchInput = function MastheadSearchInput(_ref) {\n  var componentInputProps = _ref.componentInputProps,\n      dispatch = _ref.dispatch,\n      isActive = _ref.isActive,\n      disableFocus = _ref.disableFocus;\n  var searchRef = useRef();\n  /**\n   * Clear search and clear input when called\n   */\n\n  var resetSearch = useCallback(function () {\n    dispatch({\n      type: 'setSearchClosed'\n    });\n    dispatch({\n      type: 'setVal',\n      payload: {\n        val: ''\n      }\n    });\n  }, [dispatch]);\n  /**\n   * emit custom event for search input enter keypress\n   */\n\n  var handleSearchEnter = function handleSearchEnter(event) {\n    if (event.key === 'Enter') {\n      var onSearchEnter = new CustomEvent('onSearchEnter', {\n        bubbles: true,\n        detail: {\n          value: event.target.value\n        }\n      });\n      event.currentTarget.dispatchEvent(onSearchEnter);\n    }\n  };\n\n  useEffect(function () {\n    if (isActive) {\n      if (!disableFocus) {\n        searchRef.current && searchRef.current.focus();\n      }\n\n      root.document.addEventListener('keyup', handleSearchEnter, true);\n      return function () {\n        root.document.removeEventListener('keyup', handleSearchEnter, true);\n      };\n    } else resetSearch();\n  }, [isActive, disableFocus, resetSearch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", _extends({}, componentInputProps, {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--header__search--input\"),\n    ref: searchRef,\n    name: \"q\",\n    tabIndex: isActive ? null : '-1'\n  })));\n};\n\nMastheadSearchInput.propTypes = {\n  /**\n   * The input props.\n   */\n  componentInputProps: PropTypes.object,\n\n  /**\n   * The Redux action dispatcher to control `<MastheadSearch>`.\n   */\n  dispatch: PropTypes.func,\n\n  /**\n   * `true` to make the search active.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Executes when the search icon is clicked.\n   */\n  searchIconClick: PropTypes.func,\n\n  /**\n   * Boolean to prevent focusing on the input if open on load, focus normally upon reopen.\n   */\n  disableFocus: PropTypes.bool\n};\nMastheadSearchInput.defaultProps = {\n  componentInputProps: {},\n  dispatch: function dispatch() {},\n  searchIconClick: function searchIconClick() {}\n};\nexport default MastheadSearchInput;"]},"metadata":{},"sourceType":"module"}