{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Button from '../../internal/vendor/carbon-components-react/components/Button/Button';\nimport { DDS_AUDIO_PLAYER } from '../../internal/FeatureFlags';\nimport PauseFilled32 from '@carbon/icons-react/es/pause--filled/32';\nimport PlayFilledAlt32 from '@carbon/icons-react/es/play--filled--alt/32';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport settings from 'carbon-components/es/globals/js/settings';\nvar prefix = settings.prefix;\n\nvar AudioPlayerPlayButton = function AudioPlayerPlayButton(_ref) {\n  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,\n      initPlayer = _ref.initPlayer,\n      audioState = _ref.audioState,\n      setAudioState = _ref.setAudioState,\n      setDisplayVolumeControl = _ref.setDisplayVolumeControl;\n\n  var handlePlayButton = function handlePlayButton() {\n    if (audioState === '') {\n      initPlayer();\n    } else if (kalturaDigitalPlayer) {\n      if (audioState === 'playing') {\n        setAudioState('paused');\n        kalturaDigitalPlayer.sendNotification('doPause');\n      } else if (audioState === 'paused' || audioState === 'stopped') {\n        setAudioState('playing');\n        kalturaDigitalPlayer.sendNotification('doPlay');\n      } // Hide the Volume Control Bar if Opened\n\n\n      setDisplayVolumeControl(false);\n    }\n  };\n\n  var handleButtonProps = function handleButtonProps() {\n    var icon = PlayFilledAlt32;\n    var iconDescription = 'Play';\n\n    switch (audioState) {\n      case 'loading':\n      case 'playing':\n        icon = PauseFilled32;\n        iconDescription = 'Pause';\n        break;\n    }\n\n    return {\n      icon: icon,\n      iconDescription: iconDescription\n    };\n  };\n\n  var playButtonProps = handleButtonProps();\n  return /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(prefix, \"--audio-player__play-button\"),\n    renderIcon: playButtonProps.icon,\n    iconDescription: playButtonProps.iconDescription,\n    hasIconOnly: true,\n    kind: \"ghost\",\n    onClick: function onClick() {\n      handlePlayButton();\n    },\n    tooltipPosition: \"top\"\n  });\n};\n\nAudioPlayerPlayButton.propTypes = {\n  /**\n   * The kaltura digital player (KDP) object\n   * It starts as false and gets morphed into the html element\n   *  of the target player id reference during the kaltura player\n   *  embeding process as soon as the kaltura ready callback triggers\n   */\n  kalturaDigitalPlayer: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]).isRequired,\n\n  /**\n   * The function that start the kaltura digital player embeding\n   *  process, bind all the events and start / gives-life-to the\n   *  audio component.\n   */\n  initPlayer: PropTypes.func.isRequired,\n\n  /**\n   * The state getter for the current state of the player\n   * The state list can be found in AudioPlayer.js\n   */\n  audioState: PropTypes.string.isRequired,\n\n  /**\n   * The state setter for the current state of the player\n   * The state list can be found in AudioPlayer.js\n   */\n  setAudioState: PropTypes.func.isRequired,\n\n  /**\n   * The state setter that show/hide the custom volume menu\n   */\n  setDisplayVolumeControl: PropTypes.func.isRequired\n};\nAudioPlayerPlayButton.defaultProps = {\n  kalturaDigitalPlayer: false,\n  audioState: ''\n};\nexport default !DDS_AUDIO_PLAYER ? undefined : AudioPlayerPlayButton;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/components/AudioPlayer/AudioPlayerPlayButton.js"],"names":["Button","DDS_AUDIO_PLAYER","PauseFilled32","PlayFilledAlt32","PropTypes","React","settings","prefix","AudioPlayerPlayButton","_ref","kalturaDigitalPlayer","initPlayer","audioState","setAudioState","setDisplayVolumeControl","handlePlayButton","sendNotification","handleButtonProps","icon","iconDescription","playButtonProps","createElement","className","concat","renderIcon","hasIconOnly","kind","onClick","tooltipPosition","propTypes","oneOfType","object","bool","isRequired","func","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Button from '../../internal/vendor/carbon-components-react/components/Button/Button';\nimport { DDS_AUDIO_PLAYER } from '../../internal/FeatureFlags';\nimport PauseFilled32 from '@carbon/icons-react/es/pause--filled/32';\nimport PlayFilledAlt32 from '@carbon/icons-react/es/play--filled--alt/32';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport settings from 'carbon-components/es/globals/js/settings';\nvar prefix = settings.prefix;\n\nvar AudioPlayerPlayButton = function AudioPlayerPlayButton(_ref) {\n  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,\n      initPlayer = _ref.initPlayer,\n      audioState = _ref.audioState,\n      setAudioState = _ref.setAudioState,\n      setDisplayVolumeControl = _ref.setDisplayVolumeControl;\n\n  var handlePlayButton = function handlePlayButton() {\n    if (audioState === '') {\n      initPlayer();\n    } else if (kalturaDigitalPlayer) {\n      if (audioState === 'playing') {\n        setAudioState('paused');\n        kalturaDigitalPlayer.sendNotification('doPause');\n      } else if (audioState === 'paused' || audioState === 'stopped') {\n        setAudioState('playing');\n        kalturaDigitalPlayer.sendNotification('doPlay');\n      } // Hide the Volume Control Bar if Opened\n\n\n      setDisplayVolumeControl(false);\n    }\n  };\n\n  var handleButtonProps = function handleButtonProps() {\n    var icon = PlayFilledAlt32;\n    var iconDescription = 'Play';\n\n    switch (audioState) {\n      case 'loading':\n      case 'playing':\n        icon = PauseFilled32;\n        iconDescription = 'Pause';\n        break;\n    }\n\n    return {\n      icon: icon,\n      iconDescription: iconDescription\n    };\n  };\n\n  var playButtonProps = handleButtonProps();\n  return /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(prefix, \"--audio-player__play-button\"),\n    renderIcon: playButtonProps.icon,\n    iconDescription: playButtonProps.iconDescription,\n    hasIconOnly: true,\n    kind: \"ghost\",\n    onClick: function onClick() {\n      handlePlayButton();\n    },\n    tooltipPosition: \"top\"\n  });\n};\n\nAudioPlayerPlayButton.propTypes = {\n  /**\n   * The kaltura digital player (KDP) object\n   * It starts as false and gets morphed into the html element\n   *  of the target player id reference during the kaltura player\n   *  embeding process as soon as the kaltura ready callback triggers\n   */\n  kalturaDigitalPlayer: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]).isRequired,\n\n  /**\n   * The function that start the kaltura digital player embeding\n   *  process, bind all the events and start / gives-life-to the\n   *  audio component.\n   */\n  initPlayer: PropTypes.func.isRequired,\n\n  /**\n   * The state getter for the current state of the player\n   * The state list can be found in AudioPlayer.js\n   */\n  audioState: PropTypes.string.isRequired,\n\n  /**\n   * The state setter for the current state of the player\n   * The state list can be found in AudioPlayer.js\n   */\n  setAudioState: PropTypes.func.isRequired,\n\n  /**\n   * The state setter that show/hide the custom volume menu\n   */\n  setDisplayVolumeControl: PropTypes.func.isRequired\n};\nAudioPlayerPlayButton.defaultProps = {\n  kalturaDigitalPlayer: false,\n  audioState: ''\n};\nexport default !DDS_AUDIO_PLAYER ? undefined : AudioPlayerPlayButton;"]},"metadata":{},"sourceType":"module"}