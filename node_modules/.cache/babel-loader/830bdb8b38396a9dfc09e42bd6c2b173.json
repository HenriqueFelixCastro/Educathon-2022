{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { forwardRef, useCallback, useEffect, useReducer, useRef, useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Close20 from '@carbon/icons-react/es/close/20';\nimport cx from 'classnames';\nimport ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';\nimport escapeRegExp from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/escaperegexp/escaperegexp';\nimport HeaderGlobalAction from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderGlobalAction';\nimport LocaleAPI from '../../internal/vendor/@carbon/ibmdotcom-services/services/Locale/Locale';\nimport MastheadSearchInput from './MastheadSearchInput';\nimport MastheadSearchSuggestion from './MastheadSearchSuggestion';\nimport PropTypes from 'prop-types';\nimport root from 'window-or-global';\nimport Search20 from '@carbon/icons-react/es/search/20';\nimport SearchTypeaheadAPI from '../../internal/vendor/@carbon/ibmdotcom-services/services/SearchTypeahead/SearchTypeahead';\nimport settings from 'carbon-components/es/globals/js/settings';\nvar stablePrefix = ddsSettings.stablePrefix;\nvar prefix = settings.prefix;\n/**\n * Sets up the redirect URL when a user selects a search suggestion\n *\n * @type {string}\n * @private\n */\n\nvar _redirectUrl = process.env.SEARCH_REDIRECT_ENDPOINT || \"https://www.ibm.com/search?lnk=mhsrch\";\n/**\n * Converts the string to lower case and trims extra white space\n *\n * @param {string} valueString The text field\n * @returns {string} lower cased and trimmed text\n */\n\n\nvar _trimAndLower = function _trimAndLower(valueString) {\n  return valueString.toLowerCase().trim();\n};\n/**\n * When a suggestion item is clicked, we populate the input with its name field\n *\n * @param {object} suggestion The individual object or key name from the data\n * @returns {*} The name val\n */\n\n\nvar _getSuggestionValue = function _getSuggestionValue(suggestion) {\n  return suggestion[0] || suggestion.name;\n};\n/**\n * Reducer for the useReducer hook\n *\n * @param {object} state The state\n * @param {object} action contains the type and payload\n * @returns {*} the new state value\n * @private\n */\n\n\nfunction _reducer(state, action) {\n  switch (action.type) {\n    case 'setVal':\n      return Object.assign({}, state, {\n        val: action.payload.val\n      });\n\n    case 'emptySuggestions':\n      return Object.assign({}, state, {\n        suggestions: []\n      });\n\n    case 'setPrevSuggestions':\n      return Object.assign({}, state, {\n        prevSuggestions: action.payload.prevSuggestions\n      });\n\n    case 'setSuggestionsToPrevious':\n      return Object.assign({}, state, {\n        suggestions: state.prevSuggestions\n      });\n\n    case 'showSuggestionsContainer':\n      return Object.assign({}, state, {\n        suggestionContainerVisible: true\n      });\n\n    case 'hideSuggestionsContainer':\n      return Object.assign({}, state, {\n        suggestionContainerVisible: false\n      });\n\n    case 'setSearchOpen':\n      return Object.assign({}, state, {\n        isSearchOpen: true\n      });\n\n    case 'setSearchClosed':\n      return Object.assign({}, state, {\n        isSearchOpen: false\n      });\n\n    case 'setLc':\n      return Object.assign({}, state, {\n        lc: action.payload.lc\n      });\n\n    case 'setCc':\n      return Object.assign({}, state, {\n        cc: action.payload.cc\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar openOnLoadFocus = true;\n/**\n * MastheadSearch component which includes autosuggestion results from the\n * SearchTypeaheadAPI.\n *\n * The search field utilizes \"react-autosuggest\". Documentation available here:\n * http://react-autosuggest.js.org/\n * https://github.com/moroshko/react-autosuggest\n */\n\nvar MastheadSearch = forwardRef(function (_ref, searchIconButton) {\n  var _cx;\n\n  var placeHolderText = _ref.placeHolderText,\n      initialSearchTerm = _ref.initialSearchTerm,\n      renderValue = _ref.renderValue,\n      searchOpenOnload = _ref.searchOpenOnload,\n      navType = _ref.navType,\n      propIsSearchActive = _ref.isSearchActive,\n      onChangeSearchActive = _ref.onChangeSearchActive,\n      rest = _objectWithoutProperties(_ref, [\"placeHolderText\", \"initialSearchTerm\", \"renderValue\", \"searchOpenOnload\", \"navType\", \"isSearchActive\", \"onChangeSearchActive\"]);\n\n  var _useSearchVisible = useSearchVisible(false),\n      ref = _useSearchVisible.ref;\n  /**\n   * Initial state of the autocomplete component\n   *\n   * @type {{val: string, prevSuggestions: Array, suggestions: Array, suggestionContainerVisible: boolean}}\n   * @private\n   */\n\n\n  var _initialState = {\n    val: initialSearchTerm || getValueFromQueryString() || '',\n    suggestions: [],\n    prevSuggestions: [],\n    suggestionContainerVisible: false,\n    isSearchOpen: searchOpenOnload,\n    lc: 'en',\n    cc: 'us'\n  };\n\n  var _useReducer = useReducer(_reducer, _initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useState = useState(searchOpenOnload),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSearchActive = _useState2[0],\n      setIsSearchActive = _useState2[1];\n\n  useEffect(function () {\n    setIsSearchActive(propIsSearchActive);\n  }, [propIsSearchActive]);\n  var handleChangeSearchActive = useCallback(function (event) {\n    var newisSearchActive = !isSearchActive;\n    setIsSearchActive(newisSearchActive);\n    openOnLoadFocus = false;\n    onChangeSearchActive(event, {\n      isOpen: newisSearchActive\n    });\n  }, [isSearchActive, onChangeSearchActive]); // Sets aria-labelledby to suggestions list to suppress a11y errors.\n  // Autosuggest package does not provide method to add attribute to this element.\n\n  useEffect(function () {\n    var suggestionsList = document.querySelector('.react-autosuggest__suggestions-list');\n    suggestionsList && suggestionsList.setAttribute('aria-labelledby', 'react-autowhatever-1');\n  });\n  useEffect(function () {\n    var abortController = typeof AbortController !== 'undefined' ? new AbortController() : {\n      signal: {},\n      abort: function abort() {\n        this.signal.aborted = true;\n      }\n    };\n    abortController.abort();\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return LocaleAPI.getLang();\n\n            case 2:\n              response = _context.sent;\n\n              if (!abortController.signal.aborted && response) {\n                dispatch({\n                  type: 'setLc',\n                  payload: {\n                    lc: response.lc\n                  }\n                });\n                dispatch({\n                  type: 'setCc',\n                  payload: {\n                    cc: response.cc\n                  }\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      abortController.abort();\n    };\n  }, []);\n  /**\n   * Event handlers to toggle visiblity of search\n   *\n   * @returns {*} search ref\n   */\n\n  function useSearchVisible() {\n    var ref = useRef(null);\n    /**\n     * Close search entirely if autosuggestions collapsed\n     *\n     * @param {*} event Escape keypress\n     */\n\n    var handleHideSearch = function handleHideSearch(event) {\n      if (event.key === 'Escape') {\n        if (!state.suggestionContainerVisible) {\n          dispatch({\n            type: 'setSearchClosed'\n          });\n          resetSearch();\n        }\n      }\n    };\n    /**\n     * Close search when click detected outside of component.\n     * This is necessary otherwise search stays open even when\n     * elements other than the close button and the\n     * profile button are clicked.\n     *\n     * @param {*} event Click event outside masthead component\n     */\n\n\n    var handleClickOutside = function handleClickOutside(event) {\n      if (!searchOpenOnload) {\n        var _ref$current;\n\n        var mastheadRef = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.closest(\".\".concat(prefix, \"--masthead\"));\n\n        if (mastheadRef && !mastheadRef.contains(event.target)) {\n          // If a click was detected outside the Search ref but there is a text value in state, don't hide the Search.\n          if (state.val.length === 0 && isSearchActive) {\n            handleChangeSearchActive();\n            resetSearch();\n          }\n        }\n      }\n    };\n\n    useEffect(function () {\n      root.document.addEventListener('keydown', handleHideSearch, true);\n      root.document.addEventListener('click', handleClickOutside, true);\n      return function () {\n        root.document.removeEventListener('keydown', handleHideSearch, true);\n        root.document.removeEventListener('click', handleClickOutside, true);\n      };\n    });\n    return {\n      ref: ref\n    };\n  }\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--masthead__search\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--masthead__search--active\"), isSearchActive), _cx));\n  /**\n   * Custom event emitted when search does not redirect to default url\n   *\n   * @param {event} event The callback event\n   * @param {object} params Custom event parameters\n   * @param {object} params.suggestion the selected suggestion in `react-autosuggest`\n   * @param {string} params.suggestionValue The new val of the input\n   * @param {string} params.method String describing how the change has occurred (data from `react-autosuggest`)\n   */\n\n  function onSearchNoRedirect(event, _ref3) {\n    var suggestion = _ref3.suggestion,\n        suggestionValue = _ref3.suggestionValue,\n        method = _ref3.method;\n    var onSearchNoRedirect = new CustomEvent('onSearchNoRedirect', {\n      bubbles: true,\n      detail: {\n        method: method,\n        suggestion: suggestion,\n        value: suggestionValue\n      }\n    });\n    event.currentTarget.dispatchEvent(onSearchNoRedirect);\n  }\n  /**\n   * Custom onKeyDown event handlers\n   *\n   * @param {event} event The callback event\n   */\n\n\n  function onKeyDown(event) {\n    switch (event.key) {\n      case 'Enter':\n        {\n          // Disables Enter key if searchNoRirect is true\n          if (rest.searchNoRedirect) {\n            onSearchNoRedirect(event, state.val);\n            event.preventDefault();\n          } // Disable search on enter key if the search field is empty\n\n\n          if (!state.val) {\n            event.preventDefault();\n          }\n        }\n    }\n  }\n  /**\n   * When the input field changes, we set the new val to our state\n   *\n   * @param {event} event The callback event\n   * @param {string} newValue The new val of the input\n   */\n\n\n  function onChange(event, _ref4) {\n    var newValue = _ref4.newValue; // emit custom event for search input onchange\n\n    var onSearchValueChanged = new CustomEvent('onSearchValueChanged', {\n      bubbles: true,\n      detail: {\n        value: newValue\n      }\n    });\n    event.currentTarget.dispatchEvent(onSearchValueChanged);\n    dispatch({\n      type: 'setVal',\n      payload: {\n        val: newValue\n      }\n    });\n  }\n  /**\n   * Autosuggest will pass through all these props to the input.\n   *\n   * @type {{placeholder: string, value: string, onChange: Function, className: string, 'aria-labelledby': string, role: string, 'aria-expanded': string}}\n   */\n\n\n  var inputProps = {\n    placeholder: placeHolderText,\n    value: state.val,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    className: \"\".concat(prefix, \"--header__search--input\"),\n    'aria-label': placeHolderText,\n    role: 'combobox',\n    'aria-expanded': !!state.suggestions.length\n  };\n  /**\n   * Autosuggest will pass through all these props to the container.\n   * Set WAI-ARIA attributes to null to override default container\n   * which is following outdated 1.1 specifications.\n   *\n   */\n\n  var containerProps = {\n    role: null,\n    'aria-haspopup': null,\n    'aria-owns': null,\n    'aria-expanded': null,\n    'aria-label': null\n  };\n  /**\n   * Executes the logic for the search icon depending on search input state.\n   * This will execute the search if the search is open, or will open the\n   * search field if closed.\n   *\n   */\n\n  function searchIconClick(event) {\n    // emit custom event for search icon click when search is closed\n    if (!isSearchActive) {\n      var onOpenSearch = new CustomEvent('onOpenSearch', {\n        bubbles: true\n      });\n      event.currentTarget.dispatchEvent(onOpenSearch);\n      dispatch({\n        type: 'setSearchOpen'\n      });\n      handleChangeSearchActive();\n    } // emit custom event for search icon click when search is open\n\n\n    if (isSearchActive) {\n      var onSearchButtonClicked = new CustomEvent('onSearchButtonClicked', {\n        bubbles: true,\n        detail: {\n          value: state.val\n        }\n      });\n      event.currentTarget.dispatchEvent(onSearchButtonClicked);\n    }\n\n    if (isSearchActive && state.val.length) {\n      if (rest.searchNoRedirect) {\n        onSearchNoRedirect(event, {\n          suggestionValue: state.val\n        });\n      } else {\n        root.parent.location.href = getRedirect(state.val);\n      }\n    } else {\n      dispatch({\n        type: 'setSearchOpen'\n      });\n    }\n  }\n  /**\n   * Clear search and clear input when called\n   */\n\n\n  var resetSearch = useCallback(function () {\n    dispatch({\n      type: 'setSearchClosed'\n    });\n    dispatch({\n      type: 'setVal',\n      payload: {\n        val: ''\n      }\n    });\n  }, [dispatch]);\n  /**\n   * closeBtnAction resets and sets focus after search is closed\n   */\n\n  function closeBtnAction(event) {\n    // emit custom event for search close button click\n    var onSearchCloseClicked = new CustomEvent('onSearchCloseClicked', {\n      bubbles: true\n    });\n    event.currentTarget.dispatchEvent(onSearchCloseClicked);\n    resetSearch();\n    handleChangeSearchActive();\n  }\n  /**\n   * Renders the input bar with the search icon\n   *\n   * @param {object} componentInputProps contains the input props\n   * @returns {*} The rendered component\n   */\n\n\n  function renderInputComponent(componentInputProps) {\n    return /*#__PURE__*/React.createElement(MastheadSearchInput, {\n      componentInputProps: componentInputProps,\n      dispatch: dispatch,\n      isActive: isSearchActive,\n      disableFocus: openOnLoadFocus\n    });\n  }\n  /**\n   * Returns the action/redirect value\n   *\n   * @param {string} value string value from the input or suggestions list\n   * @returns {string} final redirect string\n   */\n\n\n  function getRedirect(value) {\n    return \"\".concat(_redirectUrl, \"&q=\").concat(encodeURIComponent(value), \"&lang=\").concat(state.lc, \"&cc=\").concat(state.cc);\n  }\n  /**\n   * Renders the Suggestion Value with the function for the adding the suggestion\n   *\n   * @param {object} suggestion The suggestion to render\n   * @param {object} properties The property object of the incoming suggestion\n   * @param {string} properties.query The query being searched for\n   * @param {boolean} properties.isHighlighted Whether the suggestion is currently highlighted by the user\n   * @returns {*} The suggestion value\n   */\n\n\n  function renderSuggestion(suggestion, _ref5) {\n    var query = _ref5.query,\n        isHighlighted = _ref5.isHighlighted;\n    return /*#__PURE__*/React.createElement(MastheadSearchSuggestion, {\n      suggestion: suggestion,\n      query: query,\n      isHighlighted: isHighlighted,\n      getSuggestionValue: _getSuggestionValue\n    });\n  }\n  /**\n   * This function is called everytime we need new suggestions. If input has\n   * changed, we fetch for new suggestions else we return the previous\n   * suggestions\n   *\n   * Available reason values:\n   * https://github.com/moroshko/react-autosuggest#onsuggestionsfetchrequested-required\n   *\n   * @param {object} request Object response from when onSuggestionsFetchRequested is called\n   * @param {string} request.value the current value of the input\n   * @param {string} request.reason string describing why onSuggestionsFetchRequested was called\n   */\n\n\n  function onSuggestionsFetchRequest(_x) {\n    return _onSuggestionsFetchRequest.apply(this, arguments);\n  }\n  /**\n   * Called every time we clear suggestions\n   */\n\n\n  function _onSuggestionsFetchRequest() {\n    _onSuggestionsFetchRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request) {\n      var searchValue, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              searchValue = _trimAndLower(escapeRegExp(request.value));\n\n              if (!(request.reason === 'input-changed')) {\n                _context2.next = 15;\n                break;\n              }\n\n              if (!rest.customTypeaheadApi) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 5;\n              return rest.customTypeaheadApi(searchValue);\n\n            case 5:\n              _context2.t0 = _context2.sent;\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.next = 10;\n              return SearchTypeaheadAPI.getResults(searchValue);\n\n            case 10:\n              _context2.t0 = _context2.sent;\n\n            case 11:\n              response = _context2.t0;\n\n              if (response !== undefined) {\n                dispatch({\n                  type: 'setPrevSuggestions',\n                  payload: {\n                    prevSuggestions: response\n                  }\n                });\n                dispatch({\n                  type: 'setSuggestionsToPrevious'\n                });\n                dispatch({\n                  type: 'showSuggestionsContainer'\n                });\n              }\n\n              _context2.next = 16;\n              break;\n\n            case 15:\n              if (request.reason === 'escape-pressed') {\n                onSuggestionsClearedRequested();\n              } else {\n                dispatch({\n                  type: 'setSuggestionsToPrevious'\n                });\n                dispatch({\n                  type: 'showSuggestionsContainer'\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _onSuggestionsFetchRequest.apply(this, arguments);\n  }\n\n  function onSuggestionsClearedRequested() {\n    dispatch({\n      type: 'emptySuggestions'\n    });\n    dispatch({\n      type: 'hideSuggestionsContainer'\n    });\n  }\n  /**\n   * Sends the user to the search results page when a suggestion is selected\n   *\n   * @param {object} event The event object\n   * @param {object} params Param object coming from react-autosuggest\n   * @param {string} params.suggestionValue Suggestion value\n   * @param {string} params.method Method of selection (\"click\" or \"enter\")\n   */\n\n\n  function onSuggestionSelected(event, _ref6) {\n    var suggestion = _ref6.suggestion,\n        suggestionValue = _ref6.suggestionValue,\n        method = _ref6.method;\n\n    if (rest.searchNoRedirect) {\n      onSearchNoRedirect(event, {\n        suggestion: suggestion,\n        suggestionValue: suggestionValue,\n        method: method\n      });\n      event.preventDefault();\n    } else {\n      root.parent.location.href = getRedirect(suggestionValue);\n    }\n  }\n  /**\n   * Only render suggestions if we have more than the renderValue\n   *\n   * @param {string} value Name of the suggestion\n   * @returns {boolean} Whether or not to display the value\n   */\n\n\n  function shouldRenderSuggestions(value) {\n    return value.trim().length >= renderValue;\n  }\n  /**\n   * Render section title\n   *\n   * @param {Array} section Array of section results\n   * @returns {string} Section title\n   */\n\n\n  function renderSectionTitle(section) {\n    return section.items.length > 0 && section.title ? /*#__PURE__*/React.createElement(\"span\", null, section.title) : null;\n  }\n  /**\n   * Render section results\n   *\n   * @param {Array} section Array of section results\n   * @returns {object} Section items\n   */\n\n\n  function getSectionSuggestions(section) {\n    return section.items;\n  }\n  /**\n   * Get inital search term from query string\n   *\n   * @returns {string} Search term\n   */\n\n\n  function getValueFromQueryString() {\n    try {\n      return new URLSearchParams(root.location.search).get('q');\n    } catch (e) {\n      return '';\n    }\n  }\n  /* eslint-disable react/prop-types */\n\n\n  var renderSuggestionsContainer = function renderSuggestionsContainer(_ref7) {\n    var containerProps = _ref7.containerProps,\n        children = _ref7.children;\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, containerProps, {\n      \"aria-labelledby\": \"react-autowhatever-1\"\n    }), children);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--masthead__search\"),\n    className: className,\n    ref: ref\n  }, isSearchActive && /*#__PURE__*/React.createElement(\"form\", {\n    id: \"\".concat(prefix, \"--masthead__search--form\"),\n    action: _redirectUrl,\n    method: \"get\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"lang\",\n    value: state.lc\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"cc\",\n    value: state.cc\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"lnk\",\n    value: \"mhsrch\"\n  }), /*#__PURE__*/React.createElement(Autosuggest, _extends({\n    suggestions: state.suggestions // The state value of suggestion\n    ,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequest // Method to fetch data (should be async call)\n    ,\n    onSuggestionsClearRequested: onSuggestionsClearedRequested // When input bar loses focus\n    ,\n    getSuggestionValue: _getSuggestionValue // Name of suggestion\n    ,\n    renderSuggestion: renderSuggestion // How to display a suggestion\n    ,\n    renderSuggestionsContainer: renderSuggestionsContainer,\n    onSuggestionSelected: onSuggestionSelected // When a suggestion is selected\n    ,\n    focusInputOnSuggestionClick: false,\n    inputProps: inputProps,\n    containerProps: containerProps,\n    renderInputComponent: renderInputComponent,\n    shouldRenderSuggestions: shouldRenderSuggestions\n  }, rest.multiSection ? {\n    multiSection: true,\n    renderSectionTitle: renderSectionTitle,\n    getSectionSuggestions: getSectionSuggestions\n  } : {}))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--header__search--actions\")\n  }, /*#__PURE__*/React.createElement(HeaderGlobalAction, {\n    onClick: searchIconClick,\n    \"aria-label\": isSearchActive ? 'Search all of IBM' : 'Open IBM search field',\n    className: \"\".concat(prefix, \"--header__search--search\"),\n    \"data-autoid\": \"\".concat(stablePrefix, \"--masthead-\").concat(navType, \"__l0-search\"),\n    tabIndex: 0,\n    ref: searchIconButton\n  }, /*#__PURE__*/React.createElement(Search20, null)), /*#__PURE__*/React.createElement(HeaderGlobalAction, {\n    onClick: closeBtnAction,\n    \"aria-label\": \"Close\",\n    className: \"\".concat(prefix, \"--header__search--close\"),\n    \"data-autoid\": \"\".concat(stablePrefix, \"--masthead-\").concat(navType, \"__l0-search--close\")\n  }, /*#__PURE__*/React.createElement(Close20, null))));\n});\nMastheadSearch.propTypes = {\n  /**\n   * Placeholder text for the search field.\n   */\n  placeHolderText: PropTypes.string,\n\n  /**\n   * Initial value for the search field.\n   */\n  initialSearchTerm: PropTypes.string,\n\n  /**\n   * Current <MastheadSearch /> state returned to <Masthead />\n   */\n  isSearchActive: PropTypes.bool,\n\n  /**\n   * Hook to toggle active state back to <Masthead />\n   */\n  onChangeSearchActive: PropTypes.func,\n\n  /**\n   * Number of characters to begin showing suggestions.\n   */\n  renderValue: PropTypes.number,\n\n  /**\n   * `true` to make the search field open in the initial state.\n   */\n  searchOpenOnload: PropTypes.bool,\n\n  /**\n   * navigation type for autoids\n   */\n  navType: PropTypes.oneOf(['default', 'alt', 'eco'])\n};\nMastheadSearch.defaultProps = {\n  placeHolderText: 'Search all of IBM',\n  initialSearchTerm: '',\n  renderValue: 3,\n  searchOpenOnload: false\n}; // Export the react component\n\nexport default MastheadSearch;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/components/Masthead/MastheadSearch.js"],"names":["_extends","_defineProperty","_regeneratorRuntime","_asyncToGenerator","_slicedToArray","_objectWithoutProperties","React","forwardRef","useCallback","useEffect","useReducer","useRef","useState","Autosuggest","Close20","cx","ddsSettings","escapeRegExp","HeaderGlobalAction","LocaleAPI","MastheadSearchInput","MastheadSearchSuggestion","PropTypes","root","Search20","SearchTypeaheadAPI","settings","stablePrefix","prefix","_redirectUrl","process","env","SEARCH_REDIRECT_ENDPOINT","_trimAndLower","valueString","toLowerCase","trim","_getSuggestionValue","suggestion","name","_reducer","state","action","type","Object","assign","val","payload","suggestions","prevSuggestions","suggestionContainerVisible","isSearchOpen","lc","cc","openOnLoadFocus","MastheadSearch","_ref","searchIconButton","_cx","placeHolderText","initialSearchTerm","renderValue","searchOpenOnload","navType","propIsSearchActive","isSearchActive","onChangeSearchActive","rest","_useSearchVisible","useSearchVisible","ref","_initialState","getValueFromQueryString","_useReducer","_useReducer2","dispatch","_useState","_useState2","setIsSearchActive","handleChangeSearchActive","event","newisSearchActive","isOpen","suggestionsList","document","querySelector","setAttribute","abortController","AbortController","signal","abort","aborted","mark","_callee","response","wrap","_callee$","_context","prev","next","getLang","sent","stop","handleHideSearch","key","resetSearch","handleClickOutside","_ref$current","mastheadRef","current","closest","concat","contains","target","length","addEventListener","removeEventListener","className","onSearchNoRedirect","_ref3","suggestionValue","method","CustomEvent","bubbles","detail","value","currentTarget","dispatchEvent","onKeyDown","searchNoRedirect","preventDefault","onChange","_ref4","newValue","onSearchValueChanged","inputProps","placeholder","role","containerProps","searchIconClick","onOpenSearch","onSearchButtonClicked","parent","location","href","getRedirect","closeBtnAction","onSearchCloseClicked","renderInputComponent","componentInputProps","createElement","isActive","disableFocus","encodeURIComponent","renderSuggestion","_ref5","query","isHighlighted","getSuggestionValue","onSuggestionsFetchRequest","_x","_onSuggestionsFetchRequest","apply","arguments","_callee2","request","searchValue","_callee2$","_context2","reason","customTypeaheadApi","t0","getResults","undefined","onSuggestionsClearedRequested","onSuggestionSelected","_ref6","shouldRenderSuggestions","renderSectionTitle","section","items","title","getSectionSuggestions","URLSearchParams","search","get","e","renderSuggestionsContainer","_ref7","children","id","onSuggestionsFetchRequested","onSuggestionsClearRequested","focusInputOnSuggestionClick","multiSection","onClick","tabIndex","propTypes","string","bool","func","number","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\n/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { forwardRef, useCallback, useEffect, useReducer, useRef, useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Close20 from '@carbon/icons-react/es/close/20';\nimport cx from 'classnames';\nimport ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';\nimport escapeRegExp from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/escaperegexp/escaperegexp';\nimport HeaderGlobalAction from '../../internal/vendor/carbon-components-react/components/UIShell/HeaderGlobalAction';\nimport LocaleAPI from '../../internal/vendor/@carbon/ibmdotcom-services/services/Locale/Locale';\nimport MastheadSearchInput from './MastheadSearchInput';\nimport MastheadSearchSuggestion from './MastheadSearchSuggestion';\nimport PropTypes from 'prop-types';\nimport root from 'window-or-global';\nimport Search20 from '@carbon/icons-react/es/search/20';\nimport SearchTypeaheadAPI from '../../internal/vendor/@carbon/ibmdotcom-services/services/SearchTypeahead/SearchTypeahead';\nimport settings from 'carbon-components/es/globals/js/settings';\nvar stablePrefix = ddsSettings.stablePrefix;\nvar prefix = settings.prefix;\n/**\n * Sets up the redirect URL when a user selects a search suggestion\n *\n * @type {string}\n * @private\n */\n\nvar _redirectUrl = process.env.SEARCH_REDIRECT_ENDPOINT || \"https://www.ibm.com/search?lnk=mhsrch\";\n/**\n * Converts the string to lower case and trims extra white space\n *\n * @param {string} valueString The text field\n * @returns {string} lower cased and trimmed text\n */\n\n\nvar _trimAndLower = function _trimAndLower(valueString) {\n  return valueString.toLowerCase().trim();\n};\n/**\n * When a suggestion item is clicked, we populate the input with its name field\n *\n * @param {object} suggestion The individual object or key name from the data\n * @returns {*} The name val\n */\n\n\nvar _getSuggestionValue = function _getSuggestionValue(suggestion) {\n  return suggestion[0] || suggestion.name;\n};\n/**\n * Reducer for the useReducer hook\n *\n * @param {object} state The state\n * @param {object} action contains the type and payload\n * @returns {*} the new state value\n * @private\n */\n\n\nfunction _reducer(state, action) {\n  switch (action.type) {\n    case 'setVal':\n      return Object.assign({}, state, {\n        val: action.payload.val\n      });\n\n    case 'emptySuggestions':\n      return Object.assign({}, state, {\n        suggestions: []\n      });\n\n    case 'setPrevSuggestions':\n      return Object.assign({}, state, {\n        prevSuggestions: action.payload.prevSuggestions\n      });\n\n    case 'setSuggestionsToPrevious':\n      return Object.assign({}, state, {\n        suggestions: state.prevSuggestions\n      });\n\n    case 'showSuggestionsContainer':\n      return Object.assign({}, state, {\n        suggestionContainerVisible: true\n      });\n\n    case 'hideSuggestionsContainer':\n      return Object.assign({}, state, {\n        suggestionContainerVisible: false\n      });\n\n    case 'setSearchOpen':\n      return Object.assign({}, state, {\n        isSearchOpen: true\n      });\n\n    case 'setSearchClosed':\n      return Object.assign({}, state, {\n        isSearchOpen: false\n      });\n\n    case 'setLc':\n      return Object.assign({}, state, {\n        lc: action.payload.lc\n      });\n\n    case 'setCc':\n      return Object.assign({}, state, {\n        cc: action.payload.cc\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar openOnLoadFocus = true;\n/**\n * MastheadSearch component which includes autosuggestion results from the\n * SearchTypeaheadAPI.\n *\n * The search field utilizes \"react-autosuggest\". Documentation available here:\n * http://react-autosuggest.js.org/\n * https://github.com/moroshko/react-autosuggest\n */\n\nvar MastheadSearch = forwardRef(function (_ref, searchIconButton) {\n  var _cx;\n\n  var placeHolderText = _ref.placeHolderText,\n      initialSearchTerm = _ref.initialSearchTerm,\n      renderValue = _ref.renderValue,\n      searchOpenOnload = _ref.searchOpenOnload,\n      navType = _ref.navType,\n      propIsSearchActive = _ref.isSearchActive,\n      onChangeSearchActive = _ref.onChangeSearchActive,\n      rest = _objectWithoutProperties(_ref, [\"placeHolderText\", \"initialSearchTerm\", \"renderValue\", \"searchOpenOnload\", \"navType\", \"isSearchActive\", \"onChangeSearchActive\"]);\n\n  var _useSearchVisible = useSearchVisible(false),\n      ref = _useSearchVisible.ref;\n  /**\n   * Initial state of the autocomplete component\n   *\n   * @type {{val: string, prevSuggestions: Array, suggestions: Array, suggestionContainerVisible: boolean}}\n   * @private\n   */\n\n\n  var _initialState = {\n    val: initialSearchTerm || getValueFromQueryString() || '',\n    suggestions: [],\n    prevSuggestions: [],\n    suggestionContainerVisible: false,\n    isSearchOpen: searchOpenOnload,\n    lc: 'en',\n    cc: 'us'\n  };\n\n  var _useReducer = useReducer(_reducer, _initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useState = useState(searchOpenOnload),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSearchActive = _useState2[0],\n      setIsSearchActive = _useState2[1];\n\n  useEffect(function () {\n    setIsSearchActive(propIsSearchActive);\n  }, [propIsSearchActive]);\n  var handleChangeSearchActive = useCallback(function (event) {\n    var newisSearchActive = !isSearchActive;\n    setIsSearchActive(newisSearchActive);\n    openOnLoadFocus = false;\n    onChangeSearchActive(event, {\n      isOpen: newisSearchActive\n    });\n  }, [isSearchActive, onChangeSearchActive]); // Sets aria-labelledby to suggestions list to suppress a11y errors.\n  // Autosuggest package does not provide method to add attribute to this element.\n\n  useEffect(function () {\n    var suggestionsList = document.querySelector('.react-autosuggest__suggestions-list');\n    suggestionsList && suggestionsList.setAttribute('aria-labelledby', 'react-autowhatever-1');\n  });\n  useEffect(function () {\n    var abortController = typeof AbortController !== 'undefined' ? new AbortController() : {\n      signal: {},\n      abort: function abort() {\n        this.signal.aborted = true;\n      }\n    };\n    abortController.abort();\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return LocaleAPI.getLang();\n\n            case 2:\n              response = _context.sent;\n\n              if (!abortController.signal.aborted && response) {\n                dispatch({\n                  type: 'setLc',\n                  payload: {\n                    lc: response.lc\n                  }\n                });\n                dispatch({\n                  type: 'setCc',\n                  payload: {\n                    cc: response.cc\n                  }\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      abortController.abort();\n    };\n  }, []);\n  /**\n   * Event handlers to toggle visiblity of search\n   *\n   * @returns {*} search ref\n   */\n\n  function useSearchVisible() {\n    var ref = useRef(null);\n    /**\n     * Close search entirely if autosuggestions collapsed\n     *\n     * @param {*} event Escape keypress\n     */\n\n    var handleHideSearch = function handleHideSearch(event) {\n      if (event.key === 'Escape') {\n        if (!state.suggestionContainerVisible) {\n          dispatch({\n            type: 'setSearchClosed'\n          });\n          resetSearch();\n        }\n      }\n    };\n    /**\n     * Close search when click detected outside of component.\n     * This is necessary otherwise search stays open even when\n     * elements other than the close button and the\n     * profile button are clicked.\n     *\n     * @param {*} event Click event outside masthead component\n     */\n\n\n    var handleClickOutside = function handleClickOutside(event) {\n      if (!searchOpenOnload) {\n        var _ref$current;\n\n        var mastheadRef = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.closest(\".\".concat(prefix, \"--masthead\"));\n\n        if (mastheadRef && !mastheadRef.contains(event.target)) {\n          // If a click was detected outside the Search ref but there is a text value in state, don't hide the Search.\n          if (state.val.length === 0 && isSearchActive) {\n            handleChangeSearchActive();\n            resetSearch();\n          }\n        }\n      }\n    };\n\n    useEffect(function () {\n      root.document.addEventListener('keydown', handleHideSearch, true);\n      root.document.addEventListener('click', handleClickOutside, true);\n      return function () {\n        root.document.removeEventListener('keydown', handleHideSearch, true);\n        root.document.removeEventListener('click', handleClickOutside, true);\n      };\n    });\n    return {\n      ref: ref\n    };\n  }\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--masthead__search\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--masthead__search--active\"), isSearchActive), _cx));\n  /**\n   * Custom event emitted when search does not redirect to default url\n   *\n   * @param {event} event The callback event\n   * @param {object} params Custom event parameters\n   * @param {object} params.suggestion the selected suggestion in `react-autosuggest`\n   * @param {string} params.suggestionValue The new val of the input\n   * @param {string} params.method String describing how the change has occurred (data from `react-autosuggest`)\n   */\n\n  function onSearchNoRedirect(event, _ref3) {\n    var suggestion = _ref3.suggestion,\n        suggestionValue = _ref3.suggestionValue,\n        method = _ref3.method;\n    var onSearchNoRedirect = new CustomEvent('onSearchNoRedirect', {\n      bubbles: true,\n      detail: {\n        method: method,\n        suggestion: suggestion,\n        value: suggestionValue\n      }\n    });\n    event.currentTarget.dispatchEvent(onSearchNoRedirect);\n  }\n  /**\n   * Custom onKeyDown event handlers\n   *\n   * @param {event} event The callback event\n   */\n\n\n  function onKeyDown(event) {\n    switch (event.key) {\n      case 'Enter':\n        {\n          // Disables Enter key if searchNoRirect is true\n          if (rest.searchNoRedirect) {\n            onSearchNoRedirect(event, state.val);\n            event.preventDefault();\n          } // Disable search on enter key if the search field is empty\n\n\n          if (!state.val) {\n            event.preventDefault();\n          }\n        }\n    }\n  }\n  /**\n   * When the input field changes, we set the new val to our state\n   *\n   * @param {event} event The callback event\n   * @param {string} newValue The new val of the input\n   */\n\n\n  function onChange(event, _ref4) {\n    var newValue = _ref4.newValue;\n    // emit custom event for search input onchange\n    var onSearchValueChanged = new CustomEvent('onSearchValueChanged', {\n      bubbles: true,\n      detail: {\n        value: newValue\n      }\n    });\n    event.currentTarget.dispatchEvent(onSearchValueChanged);\n    dispatch({\n      type: 'setVal',\n      payload: {\n        val: newValue\n      }\n    });\n  }\n  /**\n   * Autosuggest will pass through all these props to the input.\n   *\n   * @type {{placeholder: string, value: string, onChange: Function, className: string, 'aria-labelledby': string, role: string, 'aria-expanded': string}}\n   */\n\n\n  var inputProps = {\n    placeholder: placeHolderText,\n    value: state.val,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    className: \"\".concat(prefix, \"--header__search--input\"),\n    'aria-label': placeHolderText,\n    role: 'combobox',\n    'aria-expanded': !!state.suggestions.length\n  };\n  /**\n   * Autosuggest will pass through all these props to the container.\n   * Set WAI-ARIA attributes to null to override default container\n   * which is following outdated 1.1 specifications.\n   *\n   */\n\n  var containerProps = {\n    role: null,\n    'aria-haspopup': null,\n    'aria-owns': null,\n    'aria-expanded': null,\n    'aria-label': null\n  };\n  /**\n   * Executes the logic for the search icon depending on search input state.\n   * This will execute the search if the search is open, or will open the\n   * search field if closed.\n   *\n   */\n\n  function searchIconClick(event) {\n    // emit custom event for search icon click when search is closed\n    if (!isSearchActive) {\n      var onOpenSearch = new CustomEvent('onOpenSearch', {\n        bubbles: true\n      });\n      event.currentTarget.dispatchEvent(onOpenSearch);\n      dispatch({\n        type: 'setSearchOpen'\n      });\n      handleChangeSearchActive();\n    } // emit custom event for search icon click when search is open\n\n\n    if (isSearchActive) {\n      var onSearchButtonClicked = new CustomEvent('onSearchButtonClicked', {\n        bubbles: true,\n        detail: {\n          value: state.val\n        }\n      });\n      event.currentTarget.dispatchEvent(onSearchButtonClicked);\n    }\n\n    if (isSearchActive && state.val.length) {\n      if (rest.searchNoRedirect) {\n        onSearchNoRedirect(event, {\n          suggestionValue: state.val\n        });\n      } else {\n        root.parent.location.href = getRedirect(state.val);\n      }\n    } else {\n      dispatch({\n        type: 'setSearchOpen'\n      });\n    }\n  }\n  /**\n   * Clear search and clear input when called\n   */\n\n\n  var resetSearch = useCallback(function () {\n    dispatch({\n      type: 'setSearchClosed'\n    });\n    dispatch({\n      type: 'setVal',\n      payload: {\n        val: ''\n      }\n    });\n  }, [dispatch]);\n  /**\n   * closeBtnAction resets and sets focus after search is closed\n   */\n\n  function closeBtnAction(event) {\n    // emit custom event for search close button click\n    var onSearchCloseClicked = new CustomEvent('onSearchCloseClicked', {\n      bubbles: true\n    });\n    event.currentTarget.dispatchEvent(onSearchCloseClicked);\n    resetSearch();\n    handleChangeSearchActive();\n  }\n  /**\n   * Renders the input bar with the search icon\n   *\n   * @param {object} componentInputProps contains the input props\n   * @returns {*} The rendered component\n   */\n\n\n  function renderInputComponent(componentInputProps) {\n    return /*#__PURE__*/React.createElement(MastheadSearchInput, {\n      componentInputProps: componentInputProps,\n      dispatch: dispatch,\n      isActive: isSearchActive,\n      disableFocus: openOnLoadFocus\n    });\n  }\n  /**\n   * Returns the action/redirect value\n   *\n   * @param {string} value string value from the input or suggestions list\n   * @returns {string} final redirect string\n   */\n\n\n  function getRedirect(value) {\n    return \"\".concat(_redirectUrl, \"&q=\").concat(encodeURIComponent(value), \"&lang=\").concat(state.lc, \"&cc=\").concat(state.cc);\n  }\n  /**\n   * Renders the Suggestion Value with the function for the adding the suggestion\n   *\n   * @param {object} suggestion The suggestion to render\n   * @param {object} properties The property object of the incoming suggestion\n   * @param {string} properties.query The query being searched for\n   * @param {boolean} properties.isHighlighted Whether the suggestion is currently highlighted by the user\n   * @returns {*} The suggestion value\n   */\n\n\n  function renderSuggestion(suggestion, _ref5) {\n    var query = _ref5.query,\n        isHighlighted = _ref5.isHighlighted;\n    return /*#__PURE__*/React.createElement(MastheadSearchSuggestion, {\n      suggestion: suggestion,\n      query: query,\n      isHighlighted: isHighlighted,\n      getSuggestionValue: _getSuggestionValue\n    });\n  }\n  /**\n   * This function is called everytime we need new suggestions. If input has\n   * changed, we fetch for new suggestions else we return the previous\n   * suggestions\n   *\n   * Available reason values:\n   * https://github.com/moroshko/react-autosuggest#onsuggestionsfetchrequested-required\n   *\n   * @param {object} request Object response from when onSuggestionsFetchRequested is called\n   * @param {string} request.value the current value of the input\n   * @param {string} request.reason string describing why onSuggestionsFetchRequested was called\n   */\n\n\n  function onSuggestionsFetchRequest(_x) {\n    return _onSuggestionsFetchRequest.apply(this, arguments);\n  }\n  /**\n   * Called every time we clear suggestions\n   */\n\n\n  function _onSuggestionsFetchRequest() {\n    _onSuggestionsFetchRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request) {\n      var searchValue, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              searchValue = _trimAndLower(escapeRegExp(request.value));\n\n              if (!(request.reason === 'input-changed')) {\n                _context2.next = 15;\n                break;\n              }\n\n              if (!rest.customTypeaheadApi) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 5;\n              return rest.customTypeaheadApi(searchValue);\n\n            case 5:\n              _context2.t0 = _context2.sent;\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.next = 10;\n              return SearchTypeaheadAPI.getResults(searchValue);\n\n            case 10:\n              _context2.t0 = _context2.sent;\n\n            case 11:\n              response = _context2.t0;\n\n              if (response !== undefined) {\n                dispatch({\n                  type: 'setPrevSuggestions',\n                  payload: {\n                    prevSuggestions: response\n                  }\n                });\n                dispatch({\n                  type: 'setSuggestionsToPrevious'\n                });\n                dispatch({\n                  type: 'showSuggestionsContainer'\n                });\n              }\n\n              _context2.next = 16;\n              break;\n\n            case 15:\n              if (request.reason === 'escape-pressed') {\n                onSuggestionsClearedRequested();\n              } else {\n                dispatch({\n                  type: 'setSuggestionsToPrevious'\n                });\n                dispatch({\n                  type: 'showSuggestionsContainer'\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _onSuggestionsFetchRequest.apply(this, arguments);\n  }\n\n  function onSuggestionsClearedRequested() {\n    dispatch({\n      type: 'emptySuggestions'\n    });\n    dispatch({\n      type: 'hideSuggestionsContainer'\n    });\n  }\n  /**\n   * Sends the user to the search results page when a suggestion is selected\n   *\n   * @param {object} event The event object\n   * @param {object} params Param object coming from react-autosuggest\n   * @param {string} params.suggestionValue Suggestion value\n   * @param {string} params.method Method of selection (\"click\" or \"enter\")\n   */\n\n\n  function onSuggestionSelected(event, _ref6) {\n    var suggestion = _ref6.suggestion,\n        suggestionValue = _ref6.suggestionValue,\n        method = _ref6.method;\n\n    if (rest.searchNoRedirect) {\n      onSearchNoRedirect(event, {\n        suggestion: suggestion,\n        suggestionValue: suggestionValue,\n        method: method\n      });\n      event.preventDefault();\n    } else {\n      root.parent.location.href = getRedirect(suggestionValue);\n    }\n  }\n  /**\n   * Only render suggestions if we have more than the renderValue\n   *\n   * @param {string} value Name of the suggestion\n   * @returns {boolean} Whether or not to display the value\n   */\n\n\n  function shouldRenderSuggestions(value) {\n    return value.trim().length >= renderValue;\n  }\n  /**\n   * Render section title\n   *\n   * @param {Array} section Array of section results\n   * @returns {string} Section title\n   */\n\n\n  function renderSectionTitle(section) {\n    return section.items.length > 0 && section.title ? /*#__PURE__*/React.createElement(\"span\", null, section.title) : null;\n  }\n  /**\n   * Render section results\n   *\n   * @param {Array} section Array of section results\n   * @returns {object} Section items\n   */\n\n\n  function getSectionSuggestions(section) {\n    return section.items;\n  }\n  /**\n   * Get inital search term from query string\n   *\n   * @returns {string} Search term\n   */\n\n\n  function getValueFromQueryString() {\n    try {\n      return new URLSearchParams(root.location.search).get('q');\n    } catch (e) {\n      return '';\n    }\n  }\n  /* eslint-disable react/prop-types */\n\n\n  var renderSuggestionsContainer = function renderSuggestionsContainer(_ref7) {\n    var containerProps = _ref7.containerProps,\n        children = _ref7.children;\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, containerProps, {\n      \"aria-labelledby\": \"react-autowhatever-1\"\n    }), children);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-autoid\": \"\".concat(stablePrefix, \"--masthead__search\"),\n    className: className,\n    ref: ref\n  }, isSearchActive && /*#__PURE__*/React.createElement(\"form\", {\n    id: \"\".concat(prefix, \"--masthead__search--form\"),\n    action: _redirectUrl,\n    method: \"get\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"lang\",\n    value: state.lc\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"cc\",\n    value: state.cc\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"lnk\",\n    value: \"mhsrch\"\n  }), /*#__PURE__*/React.createElement(Autosuggest, _extends({\n    suggestions: state.suggestions // The state value of suggestion\n    ,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequest // Method to fetch data (should be async call)\n    ,\n    onSuggestionsClearRequested: onSuggestionsClearedRequested // When input bar loses focus\n    ,\n    getSuggestionValue: _getSuggestionValue // Name of suggestion\n    ,\n    renderSuggestion: renderSuggestion // How to display a suggestion\n    ,\n    renderSuggestionsContainer: renderSuggestionsContainer,\n    onSuggestionSelected: onSuggestionSelected // When a suggestion is selected\n    ,\n    focusInputOnSuggestionClick: false,\n    inputProps: inputProps,\n    containerProps: containerProps,\n    renderInputComponent: renderInputComponent,\n    shouldRenderSuggestions: shouldRenderSuggestions\n  }, rest.multiSection ? {\n    multiSection: true,\n    renderSectionTitle: renderSectionTitle,\n    getSectionSuggestions: getSectionSuggestions\n  } : {}))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--header__search--actions\")\n  }, /*#__PURE__*/React.createElement(HeaderGlobalAction, {\n    onClick: searchIconClick,\n    \"aria-label\": isSearchActive ? 'Search all of IBM' : 'Open IBM search field',\n    className: \"\".concat(prefix, \"--header__search--search\"),\n    \"data-autoid\": \"\".concat(stablePrefix, \"--masthead-\").concat(navType, \"__l0-search\"),\n    tabIndex: 0,\n    ref: searchIconButton\n  }, /*#__PURE__*/React.createElement(Search20, null)), /*#__PURE__*/React.createElement(HeaderGlobalAction, {\n    onClick: closeBtnAction,\n    \"aria-label\": \"Close\",\n    className: \"\".concat(prefix, \"--header__search--close\"),\n    \"data-autoid\": \"\".concat(stablePrefix, \"--masthead-\").concat(navType, \"__l0-search--close\")\n  }, /*#__PURE__*/React.createElement(Close20, null))));\n});\nMastheadSearch.propTypes = {\n  /**\n   * Placeholder text for the search field.\n   */\n  placeHolderText: PropTypes.string,\n\n  /**\n   * Initial value for the search field.\n   */\n  initialSearchTerm: PropTypes.string,\n\n  /**\n   * Current <MastheadSearch /> state returned to <Masthead />\n   */\n  isSearchActive: PropTypes.bool,\n\n  /**\n   * Hook to toggle active state back to <Masthead />\n   */\n  onChangeSearchActive: PropTypes.func,\n\n  /**\n   * Number of characters to begin showing suggestions.\n   */\n  renderValue: PropTypes.number,\n\n  /**\n   * `true` to make the search field open in the initial state.\n   */\n  searchOpenOnload: PropTypes.bool,\n\n  /**\n   * navigation type for autoids\n   */\n  navType: PropTypes.oneOf(['default', 'alt', 'eco'])\n};\nMastheadSearch.defaultProps = {\n  placeHolderText: 'Search all of IBM',\n  initialSearchTerm: '',\n  renderValue: 3,\n  searchOpenOnload: false\n}; // Export the react component\n\nexport default MastheadSearch;"]},"metadata":{},"sourceType":"module"}