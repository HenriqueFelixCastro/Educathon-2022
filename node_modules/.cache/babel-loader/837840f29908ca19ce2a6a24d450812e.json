{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"type\", \"children\", \"disabled\", \"feedback\", \"feedbackTimeout\", \"onClick\", \"ariaLabel\", \"copyText\", \"copyLabel\", \"copyButtonDescription\", \"light\", \"showMoreText\", \"showLessText\", \"hideCopyButton\", \"wrapText\", \"maxCollapsedNumberOfRows\", \"maxExpandedNumberOfRows\", \"minCollapsedNumberOfRows\", \"minExpandedNumberOfRows\"];\n/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport Copy from '../Copy';\nimport Button from '../Button';\nimport CopyButton from '../CopyButton';\nimport getUniqueId from '../../tools/uniqueId';\nimport copy from 'copy-to-clipboard';\nimport { usePrefix } from '../../internal/usePrefix';\nvar rowHeightInPixels = 16;\nvar defaultMaxCollapsedNumberOfRows = 15;\nvar defaultMaxExpandedNumberOfRows = 0;\nvar defaultMinCollapsedNumberOfRows = 3;\nvar defaultMinExpandedNumberOfRows = 16;\n\nfunction CodeSnippet(_ref) {\n  var _classNames;\n\n  var className = _ref.className,\n      type = _ref.type,\n      children = _ref.children,\n      disabled = _ref.disabled,\n      feedback = _ref.feedback,\n      feedbackTimeout = _ref.feedbackTimeout,\n      onClick = _ref.onClick,\n      ariaLabel = _ref.ariaLabel,\n      copyText = _ref.copyText,\n      copyLabel = _ref.copyLabel,\n      copyButtonDescription = _ref.copyButtonDescription,\n      light = _ref.light,\n      showMoreText = _ref.showMoreText,\n      showLessText = _ref.showLessText,\n      hideCopyButton = _ref.hideCopyButton,\n      wrapText = _ref.wrapText,\n      _ref$maxCollapsedNumb = _ref.maxCollapsedNumberOfRows,\n      maxCollapsedNumberOfRows = _ref$maxCollapsedNumb === void 0 ? defaultMaxCollapsedNumberOfRows : _ref$maxCollapsedNumb,\n      _ref$maxExpandedNumbe = _ref.maxExpandedNumberOfRows,\n      maxExpandedNumberOfRows = _ref$maxExpandedNumbe === void 0 ? defaultMaxExpandedNumberOfRows : _ref$maxExpandedNumbe,\n      _ref$minCollapsedNumb = _ref.minCollapsedNumberOfRows,\n      minCollapsedNumberOfRows = _ref$minCollapsedNumb === void 0 ? defaultMinCollapsedNumberOfRows : _ref$minCollapsedNumb,\n      _ref$minExpandedNumbe = _ref.minExpandedNumberOfRows,\n      minExpandedNumberOfRows = _ref$minExpandedNumbe === void 0 ? defaultMinExpandedNumberOfRows : _ref$minExpandedNumbe,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandedCode = _useState2[0],\n      setExpandedCode = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldShowMoreLessBtn = _useState4[0],\n      setShouldShowMoreLessBtn = _useState4[1];\n\n  var _useRef = useRef(getUniqueId()),\n      uid = _useRef.current;\n\n  var codeContentRef = useRef();\n  var codeContainerRef = useRef();\n  var innerCodeRef = useRef();\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasLeftOverflow = _useState6[0],\n      setHasLeftOverflow = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasRightOverflow = _useState8[0],\n      setHasRightOverflow = _useState8[1];\n\n  var getCodeRef = useCallback(function () {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n\n    if (type === 'multi') {\n      return codeContentRef;\n    }\n  }, [type]);\n  var prefix = usePrefix();\n  var getCodeRefDimensions = useCallback(function () {\n    var _getCodeRef$current = getCodeRef().current,\n        codeClientWidth = _getCodeRef$current.clientWidth,\n        codeScrollLeft = _getCodeRef$current.scrollLeft,\n        codeScrollWidth = _getCodeRef$current.scrollWidth;\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth: codeClientWidth,\n      codeScrollWidth: codeScrollWidth,\n      codeScrollLeft: codeScrollLeft\n    };\n  }, [getCodeRef]);\n  var handleScroll = useCallback(function () {\n    if (type === 'inline' || type === 'single' && !(codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current) || type === 'multi' && !(codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current)) {\n      return;\n    }\n\n    var _getCodeRefDimensions = getCodeRefDimensions(),\n        horizontalOverflow = _getCodeRefDimensions.horizontalOverflow,\n        codeClientWidth = _getCodeRefDimensions.codeClientWidth,\n        codeScrollWidth = _getCodeRefDimensions.codeScrollWidth,\n        codeScrollLeft = _getCodeRefDimensions.codeScrollLeft;\n\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: function onResize() {\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi') {\n        var _codeContentRef$curre = codeContentRef.current.getBoundingClientRect(),\n            height = _codeContentRef$curre.height;\n\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi' || codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current && type === 'single') {\n        handleScroll();\n      }\n    }\n  }, [type, maxCollapsedNumberOfRows, maxExpandedNumberOfRows, minExpandedNumberOfRows, rowHeightInPixels]);\n  useEffect(function () {\n    handleScroll();\n  }, [handleScroll]);\n\n  var handleCopyClick = function handleCopyClick(evt) {\n    if (copyText || innerCodeRef !== null && innerCodeRef !== void 0 && innerCodeRef.current) {\n      var _innerCodeRef$current;\n\n      copy(copyText !== null && copyText !== void 0 ? copyText : innerCodeRef === null || innerCodeRef === void 0 ? void 0 : (_innerCodeRef$current = innerCodeRef.current) === null || _innerCodeRef$current === void 0 ? void 0 : _innerCodeRef$current.innerText);\n    }\n\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n\n  var codeSnippetClasses = classNames(className, \"\".concat(prefix, \"--snippet\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--disabled\"), type !== 'inline' && disabled), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--expand\"), expandedCode), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--no-copy\"), hideCopyButton), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--wraptext\"), wrapText), _classNames));\n  var expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React.createElement(\"code\", {\n        id: uid,\n        ref: innerCodeRef\n      }, children));\n    }\n\n    return /*#__PURE__*/React.createElement(Copy, _extends({}, rest, {\n      onClick: handleCopyClick,\n      \"aria-label\": copyLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React.createElement(\"code\", {\n      id: uid,\n      ref: innerCodeRef\n    }, children));\n  }\n\n  var containerStyle = {};\n\n  if (type === 'multi') {\n    var styles = {};\n\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' ? 'textbox' : null,\n    tabIndex: type === 'single' && !disabled ? 0 : null,\n    className: \"\".concat(prefix, \"--snippet-container\"),\n    \"aria-label\": ariaLabel || copyLabel || 'code-snippet',\n    onScroll: type === 'single' && handleScroll || null\n  }, containerStyle), /*#__PURE__*/React.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || null\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    ref: innerCodeRef\n  }, children))), hasLeftOverflow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--left\")\n  }), hasRightOverflow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--right\")\n  }), !hideCopyButton && /*#__PURE__*/React.createElement(CopyButton, {\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React.createElement(Button, {\n    kind: \"ghost\",\n    size: \"field\",\n    className: \"\".concat(prefix, \"--snippet-btn--expand\"),\n    disabled: disabled,\n    onClick: function onClick() {\n      return setExpandedCode(!expandedCode);\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--snippet-btn--text\")\n  }, expandCodeBtnText), /*#__PURE__*/React.createElement(ChevronDown16, {\n    \"aria-label\": expandCodeBtnText,\n    className: \"\".concat(prefix, \"--icon-chevron--down \").concat(prefix, \"--snippet__icon\"),\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\n\nCodeSnippet.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Provide the content of your CodeSnippet as a node or string\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  copyLabel: PropTypes.string,\n\n  /**\n   * Optional text to copy. If not specified, the `children` node's `innerText`\n   * will be used as the copy value.\n   */\n  copyText: PropTypes.string,\n\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\nCodeSnippet.defaultProps = {\n  type: 'single',\n  showMoreText: 'Show more',\n  showLessText: 'Show less',\n  wrapText: false\n};\nexport default CodeSnippet;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/carbon-components-react/es/components/CodeSnippet/CodeSnippet.js"],"names":["_extends","_defineProperty","_slicedToArray","_objectWithoutProperties","_excluded","PropTypes","React","useState","useRef","useEffect","useCallback","classNames","useResizeObserver","ChevronDown16","Copy","Button","CopyButton","getUniqueId","copy","usePrefix","rowHeightInPixels","defaultMaxCollapsedNumberOfRows","defaultMaxExpandedNumberOfRows","defaultMinCollapsedNumberOfRows","defaultMinExpandedNumberOfRows","CodeSnippet","_ref","_classNames","className","type","children","disabled","feedback","feedbackTimeout","onClick","ariaLabel","copyText","copyLabel","copyButtonDescription","light","showMoreText","showLessText","hideCopyButton","wrapText","_ref$maxCollapsedNumb","maxCollapsedNumberOfRows","_ref$maxExpandedNumbe","maxExpandedNumberOfRows","_ref$minCollapsedNumb","minCollapsedNumberOfRows","_ref$minExpandedNumbe","minExpandedNumberOfRows","rest","_useState","_useState2","expandedCode","setExpandedCode","_useState3","_useState4","shouldShowMoreLessBtn","setShouldShowMoreLessBtn","_useRef","uid","current","codeContentRef","codeContainerRef","innerCodeRef","_useState5","_useState6","hasLeftOverflow","setHasLeftOverflow","_useState7","_useState8","hasRightOverflow","setHasRightOverflow","getCodeRef","prefix","getCodeRefDimensions","_getCodeRef$current","codeClientWidth","clientWidth","codeScrollLeft","scrollLeft","codeScrollWidth","scrollWidth","horizontalOverflow","handleScroll","_getCodeRefDimensions","ref","onResize","_codeContentRef$curre","getBoundingClientRect","height","handleCopyClick","evt","_innerCodeRef$current","innerText","codeSnippetClasses","concat","expandCodeBtnText","createElement","id","containerStyle","styles","maxHeight","minHeight","Object","keys","length","style","role","tabIndex","onScroll","iconDescription","kind","size","name","propTypes","string","node","bool","number","func","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"type\", \"children\", \"disabled\", \"feedback\", \"feedbackTimeout\", \"onClick\", \"ariaLabel\", \"copyText\", \"copyLabel\", \"copyButtonDescription\", \"light\", \"showMoreText\", \"showLessText\", \"hideCopyButton\", \"wrapText\", \"maxCollapsedNumberOfRows\", \"maxExpandedNumberOfRows\", \"minCollapsedNumberOfRows\", \"minExpandedNumberOfRows\"];\n\n/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport Copy from '../Copy';\nimport Button from '../Button';\nimport CopyButton from '../CopyButton';\nimport getUniqueId from '../../tools/uniqueId';\nimport copy from 'copy-to-clipboard';\nimport { usePrefix } from '../../internal/usePrefix';\nvar rowHeightInPixels = 16;\nvar defaultMaxCollapsedNumberOfRows = 15;\nvar defaultMaxExpandedNumberOfRows = 0;\nvar defaultMinCollapsedNumberOfRows = 3;\nvar defaultMinExpandedNumberOfRows = 16;\n\nfunction CodeSnippet(_ref) {\n  var _classNames;\n\n  var className = _ref.className,\n      type = _ref.type,\n      children = _ref.children,\n      disabled = _ref.disabled,\n      feedback = _ref.feedback,\n      feedbackTimeout = _ref.feedbackTimeout,\n      onClick = _ref.onClick,\n      ariaLabel = _ref.ariaLabel,\n      copyText = _ref.copyText,\n      copyLabel = _ref.copyLabel,\n      copyButtonDescription = _ref.copyButtonDescription,\n      light = _ref.light,\n      showMoreText = _ref.showMoreText,\n      showLessText = _ref.showLessText,\n      hideCopyButton = _ref.hideCopyButton,\n      wrapText = _ref.wrapText,\n      _ref$maxCollapsedNumb = _ref.maxCollapsedNumberOfRows,\n      maxCollapsedNumberOfRows = _ref$maxCollapsedNumb === void 0 ? defaultMaxCollapsedNumberOfRows : _ref$maxCollapsedNumb,\n      _ref$maxExpandedNumbe = _ref.maxExpandedNumberOfRows,\n      maxExpandedNumberOfRows = _ref$maxExpandedNumbe === void 0 ? defaultMaxExpandedNumberOfRows : _ref$maxExpandedNumbe,\n      _ref$minCollapsedNumb = _ref.minCollapsedNumberOfRows,\n      minCollapsedNumberOfRows = _ref$minCollapsedNumb === void 0 ? defaultMinCollapsedNumberOfRows : _ref$minCollapsedNumb,\n      _ref$minExpandedNumbe = _ref.minExpandedNumberOfRows,\n      minExpandedNumberOfRows = _ref$minExpandedNumbe === void 0 ? defaultMinExpandedNumberOfRows : _ref$minExpandedNumbe,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandedCode = _useState2[0],\n      setExpandedCode = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldShowMoreLessBtn = _useState4[0],\n      setShouldShowMoreLessBtn = _useState4[1];\n\n  var _useRef = useRef(getUniqueId()),\n      uid = _useRef.current;\n\n  var codeContentRef = useRef();\n  var codeContainerRef = useRef();\n  var innerCodeRef = useRef();\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasLeftOverflow = _useState6[0],\n      setHasLeftOverflow = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasRightOverflow = _useState8[0],\n      setHasRightOverflow = _useState8[1];\n\n  var getCodeRef = useCallback(function () {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n\n    if (type === 'multi') {\n      return codeContentRef;\n    }\n  }, [type]);\n  var prefix = usePrefix();\n  var getCodeRefDimensions = useCallback(function () {\n    var _getCodeRef$current = getCodeRef().current,\n        codeClientWidth = _getCodeRef$current.clientWidth,\n        codeScrollLeft = _getCodeRef$current.scrollLeft,\n        codeScrollWidth = _getCodeRef$current.scrollWidth;\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth: codeClientWidth,\n      codeScrollWidth: codeScrollWidth,\n      codeScrollLeft: codeScrollLeft\n    };\n  }, [getCodeRef]);\n  var handleScroll = useCallback(function () {\n    if (type === 'inline' || type === 'single' && !(codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current) || type === 'multi' && !(codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current)) {\n      return;\n    }\n\n    var _getCodeRefDimensions = getCodeRefDimensions(),\n        horizontalOverflow = _getCodeRefDimensions.horizontalOverflow,\n        codeClientWidth = _getCodeRefDimensions.codeClientWidth,\n        codeScrollWidth = _getCodeRefDimensions.codeScrollWidth,\n        codeScrollLeft = _getCodeRefDimensions.codeScrollLeft;\n\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: function onResize() {\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi') {\n        var _codeContentRef$curre = codeContentRef.current.getBoundingClientRect(),\n            height = _codeContentRef$curre.height;\n\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi' || codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current && type === 'single') {\n        handleScroll();\n      }\n    }\n  }, [type, maxCollapsedNumberOfRows, maxExpandedNumberOfRows, minExpandedNumberOfRows, rowHeightInPixels]);\n  useEffect(function () {\n    handleScroll();\n  }, [handleScroll]);\n\n  var handleCopyClick = function handleCopyClick(evt) {\n    if (copyText || innerCodeRef !== null && innerCodeRef !== void 0 && innerCodeRef.current) {\n      var _innerCodeRef$current;\n\n      copy(copyText !== null && copyText !== void 0 ? copyText : innerCodeRef === null || innerCodeRef === void 0 ? void 0 : (_innerCodeRef$current = innerCodeRef.current) === null || _innerCodeRef$current === void 0 ? void 0 : _innerCodeRef$current.innerText);\n    }\n\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n\n  var codeSnippetClasses = classNames(className, \"\".concat(prefix, \"--snippet\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--disabled\"), type !== 'inline' && disabled), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--expand\"), expandedCode), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--no-copy\"), hideCopyButton), _defineProperty(_classNames, \"\".concat(prefix, \"--snippet--wraptext\"), wrapText), _classNames));\n  var expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React.createElement(\"code\", {\n        id: uid,\n        ref: innerCodeRef\n      }, children));\n    }\n\n    return /*#__PURE__*/React.createElement(Copy, _extends({}, rest, {\n      onClick: handleCopyClick,\n      \"aria-label\": copyLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React.createElement(\"code\", {\n      id: uid,\n      ref: innerCodeRef\n    }, children));\n  }\n\n  var containerStyle = {};\n\n  if (type === 'multi') {\n    var styles = {};\n\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' ? 'textbox' : null,\n    tabIndex: type === 'single' && !disabled ? 0 : null,\n    className: \"\".concat(prefix, \"--snippet-container\"),\n    \"aria-label\": ariaLabel || copyLabel || 'code-snippet',\n    onScroll: type === 'single' && handleScroll || null\n  }, containerStyle), /*#__PURE__*/React.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || null\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    ref: innerCodeRef\n  }, children))), hasLeftOverflow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--left\")\n  }), hasRightOverflow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--right\")\n  }), !hideCopyButton && /*#__PURE__*/React.createElement(CopyButton, {\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React.createElement(Button, {\n    kind: \"ghost\",\n    size: \"field\",\n    className: \"\".concat(prefix, \"--snippet-btn--expand\"),\n    disabled: disabled,\n    onClick: function onClick() {\n      return setExpandedCode(!expandedCode);\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--snippet-btn--text\")\n  }, expandCodeBtnText), /*#__PURE__*/React.createElement(ChevronDown16, {\n    \"aria-label\": expandCodeBtnText,\n    className: \"\".concat(prefix, \"--icon-chevron--down \").concat(prefix, \"--snippet__icon\"),\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\n\nCodeSnippet.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Provide the content of your CodeSnippet as a node or string\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  copyLabel: PropTypes.string,\n\n  /**\n   * Optional text to copy. If not specified, the `children` node's `innerText`\n   * will be used as the copy value.\n   */\n  copyText: PropTypes.string,\n\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\nCodeSnippet.defaultProps = {\n  type: 'single',\n  showMoreText: 'Show more',\n  showLessText: 'Show less',\n  wrapText: false\n};\nexport default CodeSnippet;"]},"metadata":{},"sourceType":"module"}