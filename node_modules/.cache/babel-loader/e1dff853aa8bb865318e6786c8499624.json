{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _defaultTranslations;\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix';\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close menu'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open menu'), _defaultTranslations);\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxMenuIcon = function ListBoxMenuIcon(_ref) {\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--list-box__menu-icon\"), _defineProperty({}, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/React.createElement(ChevronDown16, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, /*#__PURE__*/React.createElement(\"title\", null, description)));\n};\n\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxMenuIcon.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxMenuIcon;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/carbon-components-react/es/components/ListBox/ListBoxMenuIcon.js"],"names":["_defineProperty","_defaultTranslations","cx","React","PropTypes","ChevronDown16","usePrefix","translationIds","defaultTranslations","ListBoxMenuIcon","_ref","isOpen","t","translateWithId","prefix","className","concat","description","createElement","name","propTypes","bool","isRequired","func","defaultProps","id"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,uCAA5B;;AAEA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAO,IAAIC,cAAc,GAAG;AAC1B,gBAAc,YADY;AAE1B,eAAa;AAFa,CAArB;AAIP,IAAIC,mBAAmB,IAAIP,oBAAoB,GAAG,EAAvB,EAA2BD,eAAe,CAACC,oBAAD,EAAuBM,cAAc,CAAC,YAAD,CAArC,EAAqD,YAArD,CAA1C,EAA8GP,eAAe,CAACC,oBAAD,EAAuBM,cAAc,CAAC,WAAD,CAArC,EAAoD,WAApD,CAA7H,EAA+LN,oBAAnM,CAAvB;AACA;AACA;AACA;AACA;;AAEA,IAAIQ,eAAe,GAAG,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AACnD,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,CAAC,GAAGF,IAAI,CAACG,eADb;AAEA,MAAIC,MAAM,GAAGR,SAAS,EAAtB;AACA,MAAIS,SAAS,GAAGb,EAAE,CAAC,GAAGc,MAAH,CAAUF,MAAV,EAAkB,uBAAlB,CAAD,EAA6Cd,eAAe,CAAC,EAAD,EAAK,GAAGgB,MAAH,CAAUF,MAAV,EAAkB,6BAAlB,CAAL,EAAuDH,MAAvD,CAA5D,CAAlB;AACA,MAAIM,WAAW,GAAGN,MAAM,GAAGC,CAAC,CAAC,YAAD,CAAJ,GAAqBA,CAAC,CAAC,WAAD,CAA9C;AACA,SAAO,aAAaT,KAAK,CAACe,aAAN,CAAoB,KAApB,EAA2B;AAC7CH,IAAAA,SAAS,EAAEA;AADkC,GAA3B,EAEjB,aAAaZ,KAAK,CAACe,aAAN,CAAoBb,aAApB,EAAmC;AACjDc,IAAAA,IAAI,EAAE,eAD2C;AAEjD,kBAAcF;AAFmC,GAAnC,EAGb,aAAad,KAAK,CAACe,aAAN,CAAoB,OAApB,EAA6B,IAA7B,EAAmCD,WAAnC,CAHA,CAFI,CAApB;AAMD,CAZD;;AAcAR,eAAe,CAACW,SAAhB,GAA4B;AAC1B;AACF;AACA;AACA;AACET,EAAAA,MAAM,EAAEP,SAAS,CAACiB,IAAV,CAAeC,UALG;;AAO1B;AACF;AACA;AACA;AACA;AACET,EAAAA,eAAe,EAAET,SAAS,CAACmB,IAAV,CAAeD;AAZN,CAA5B;AAcAb,eAAe,CAACe,YAAhB,GAA+B;AAC7BX,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBY,EAAzB,EAA6B;AAC5C,WAAOjB,mBAAmB,CAACiB,EAAD,CAA1B;AACD;AAH4B,CAA/B;AAKA,eAAehB,eAAf","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _defaultTranslations;\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix';\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close menu'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open menu'), _defaultTranslations);\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxMenuIcon = function ListBoxMenuIcon(_ref) {\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--list-box__menu-icon\"), _defineProperty({}, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/React.createElement(ChevronDown16, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, /*#__PURE__*/React.createElement(\"title\", null, description)));\n};\n\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxMenuIcon.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxMenuIcon;"]},"metadata":{},"sourceType":"module"}