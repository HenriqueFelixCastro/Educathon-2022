{"ast":null,"code":"/**\n * Copyright IBM Corp. 2020, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport DOMPurify from 'isomorphic-dompurify';\nimport { marked } from 'marked';\nimport settings from 'carbon-components/es/globals/js/settings';\nvar prefix = settings.prefix;\nvar _htmlTagRegex = /<.*?>/g;\nvar _cleanStringRegex = /\\n|\\s{2,}|&;/g;\n/**\n * Removes any html tags from a string and keeps inner text if any\n *\n * @param {string} str String to be checked for html tags\n * @returns {string} String with html tags stripped out\n * @private\n */\n\nvar _removeHtmlTags = function _removeHtmlTags(str) {\n  return str.replace(_htmlTagRegex, '');\n};\n/**\n * Cleans string by replacing multiple spaces with a single space\n * and removing single new lines.\n *\n * @param {string} str String to be checked\n * @returns {string} String with multiple spaces and single new lines removed\n * @private\n */\n\n\nvar _cleanString = function _cleanString(str) {\n  return str.replace(_cleanStringRegex, ' ');\n};\n/**\n * Converts markdown syntaxes into html\n *\n * @param {string} str String to convert to html\n * @param {object} [options={}] Object with options for the conversion\n * @param {boolean} [options.allowHtml=false] Defines if should allow or remove html tags\n * @param {object} [options.renderer] Custom renderers\n * @param {Set<string>} [options.customTags] List of custom element tags the `renderer` uses.\n * @returns {string} String converted to html\n * @example\n * import { markdownToHtml } from '@carbon/ibmdotcom-utilities';\n *\n * markdownToHtml('Lorem *ipsum* dolor __sit__.')\n * // 'Lorem <em class=\"bx--type-light\">ipsum</em> dolor <strong class=\"bx--type-semibold\">sit</strong>.'\n */\n\n\nfunction markdownToHtml(str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$allowHtml = _ref.allowHtml,\n      allowHtml = _ref$allowHtml === void 0 ? false : _ref$allowHtml,\n      _ref$renderer = _ref.renderer,\n      renderer = _ref$renderer === void 0 ? {} : _ref$renderer,\n      customTags = _ref.customTags;\n\n  var converted = allowHtml ? str : _removeHtmlTags(str);\n  /**\n   * Custom rendering options to add Carbon styles\n   *\n   */\n\n  var defaultRenderer = {\n    link: function link(href, title, text) {\n      var linkTitle = title ? \"title=\\\"\".concat(title, \"\\\"\") : null;\n      return \"<a class=\\\"\".concat(prefix, \"--link \").concat(prefix, \"--link--lg\\\" href=\\\"\").concat(href, \"\\\" \").concat(linkTitle, \">\").concat(text, \"</a>\");\n    },\n    list: function list(body, ordered) {\n      var listType = ordered ? 'ol' : 'ul';\n      var listClass = ordered ? \"\".concat(prefix, \"--list--ordered\") : \"\".concat(prefix, \"--list--unordered\");\n      return \"<\".concat(listType, \" class=\\\"\").concat(listClass, \"\\\">\").concat(body, \"</\").concat(listType, \">\");\n    },\n    listitem: function listitem(text) {\n      return \"<li class=\\\"\".concat(prefix, \"--list__item\\\">\").concat(text, \"</li>\");\n    }\n  };\n  marked.use({\n    smartypants: true,\n    renderer: Object.assign(defaultRenderer, renderer)\n  });\n\n  if (customTags) {\n    DOMPurify.addHook('uponSanitizeElement', function (node, _ref2) {\n      var allowedTags = _ref2.allowedTags,\n          tagName = _ref2.tagName;\n\n      if (customTags.has(tagName) && !allowedTags[tagName]) {\n        allowedTags[tagName] = true;\n      }\n    });\n  }\n\n  var convertedMarkdown = DOMPurify.sanitize(marked(converted));\n\n  if (customTags) {\n    DOMPurify.removeHook('uponSanitizeElement');\n  }\n\n  return _cleanString(convertedMarkdown);\n}\n\nexport default markdownToHtml;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-utilities/es/utilities/markdownToHtml/markdownToHtml.js"],"names":["DOMPurify","marked","settings","prefix","_htmlTagRegex","_cleanStringRegex","_removeHtmlTags","str","replace","_cleanString","markdownToHtml","_ref","arguments","length","undefined","_ref$allowHtml","allowHtml","_ref$renderer","renderer","customTags","converted","defaultRenderer","link","href","title","text","linkTitle","concat","list","body","ordered","listType","listClass","listitem","use","smartypants","Object","assign","addHook","node","_ref2","allowedTags","tagName","has","convertedMarkdown","sanitize","removeHook"],"mappings":"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","sourcesContent":["/**\n * Copyright IBM Corp. 2020, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport DOMPurify from 'isomorphic-dompurify';\nimport { marked } from 'marked';\nimport settings from 'carbon-components/es/globals/js/settings';\nvar prefix = settings.prefix;\nvar _htmlTagRegex = /<.*?>/g;\nvar _cleanStringRegex = /\\n|\\s{2,}|&;/g;\n/**\n * Removes any html tags from a string and keeps inner text if any\n *\n * @param {string} str String to be checked for html tags\n * @returns {string} String with html tags stripped out\n * @private\n */\n\nvar _removeHtmlTags = function _removeHtmlTags(str) {\n  return str.replace(_htmlTagRegex, '');\n};\n/**\n * Cleans string by replacing multiple spaces with a single space\n * and removing single new lines.\n *\n * @param {string} str String to be checked\n * @returns {string} String with multiple spaces and single new lines removed\n * @private\n */\n\n\nvar _cleanString = function _cleanString(str) {\n  return str.replace(_cleanStringRegex, ' ');\n};\n/**\n * Converts markdown syntaxes into html\n *\n * @param {string} str String to convert to html\n * @param {object} [options={}] Object with options for the conversion\n * @param {boolean} [options.allowHtml=false] Defines if should allow or remove html tags\n * @param {object} [options.renderer] Custom renderers\n * @param {Set<string>} [options.customTags] List of custom element tags the `renderer` uses.\n * @returns {string} String converted to html\n * @example\n * import { markdownToHtml } from '@carbon/ibmdotcom-utilities';\n *\n * markdownToHtml('Lorem *ipsum* dolor __sit__.')\n * // 'Lorem <em class=\"bx--type-light\">ipsum</em> dolor <strong class=\"bx--type-semibold\">sit</strong>.'\n */\n\n\nfunction markdownToHtml(str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$allowHtml = _ref.allowHtml,\n      allowHtml = _ref$allowHtml === void 0 ? false : _ref$allowHtml,\n      _ref$renderer = _ref.renderer,\n      renderer = _ref$renderer === void 0 ? {} : _ref$renderer,\n      customTags = _ref.customTags;\n\n  var converted = allowHtml ? str : _removeHtmlTags(str);\n  /**\n   * Custom rendering options to add Carbon styles\n   *\n   */\n\n  var defaultRenderer = {\n    link: function link(href, title, text) {\n      var linkTitle = title ? \"title=\\\"\".concat(title, \"\\\"\") : null;\n      return \"<a class=\\\"\".concat(prefix, \"--link \").concat(prefix, \"--link--lg\\\" href=\\\"\").concat(href, \"\\\" \").concat(linkTitle, \">\").concat(text, \"</a>\");\n    },\n    list: function list(body, ordered) {\n      var listType = ordered ? 'ol' : 'ul';\n      var listClass = ordered ? \"\".concat(prefix, \"--list--ordered\") : \"\".concat(prefix, \"--list--unordered\");\n      return \"<\".concat(listType, \" class=\\\"\").concat(listClass, \"\\\">\").concat(body, \"</\").concat(listType, \">\");\n    },\n    listitem: function listitem(text) {\n      return \"<li class=\\\"\".concat(prefix, \"--list__item\\\">\").concat(text, \"</li>\");\n    }\n  };\n  marked.use({\n    smartypants: true,\n    renderer: Object.assign(defaultRenderer, renderer)\n  });\n\n  if (customTags) {\n    DOMPurify.addHook('uponSanitizeElement', function (node, _ref2) {\n      var allowedTags = _ref2.allowedTags,\n          tagName = _ref2.tagName;\n\n      if (customTags.has(tagName) && !allowedTags[tagName]) {\n        allowedTags[tagName] = true;\n      }\n    });\n  }\n\n  var convertedMarkdown = DOMPurify.sanitize(marked(converted));\n\n  if (customTags) {\n    DOMPurify.removeHook('uponSanitizeElement');\n  }\n\n  return _cleanString(convertedMarkdown);\n}\n\nexport default markdownToHtml;"]},"metadata":{},"sourceType":"module"}