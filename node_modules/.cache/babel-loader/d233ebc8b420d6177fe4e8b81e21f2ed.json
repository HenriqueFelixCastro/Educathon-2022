{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { useState, useEffect } from 'react';\nimport { canUseDOM } from './environment';\nexport function useMatchMedia(mediaQueryString) {\n  var _useState = useState(function () {\n    if (canUseDOM) {\n      var mediaQueryList = window.matchMedia(mediaQueryString);\n      return mediaQueryList.matches;\n    }\n\n    return false;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      matches = _useState2[0],\n      setMatches = _useState2[1];\n\n  useEffect(function () {\n    function listener(event) {\n      setMatches(event.matches);\n    }\n\n    var mediaQueryList = window.matchMedia(mediaQueryString); // Support fallback to `addListener` for broader browser support\n\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n    } else {\n      mediaQueryList.addListener(listener);\n    } // Make sure the media query list is in sync with the matches state\n\n\n    setMatches(mediaQueryList.matches);\n    return function () {\n      if (mediaQueryList.addEventListener) {\n        mediaQueryList.removeEventListener('change', listener);\n      } else {\n        mediaQueryList.removeListener(listener);\n      }\n    };\n  }, [mediaQueryString]);\n  return matches;\n}","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/carbon-components-react/es/internal/useMatchMedia.js"],"names":["_slicedToArray","useState","useEffect","canUseDOM","useMatchMedia","mediaQueryString","_useState","mediaQueryList","window","matchMedia","matches","_useState2","setMatches","listener","event","addEventListener","addListener","removeEventListener","removeListener"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,sCAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAO,SAASC,aAAT,CAAuBC,gBAAvB,EAAyC;AAC9C,MAAIC,SAAS,GAAGL,QAAQ,CAAC,YAAY;AACnC,QAAIE,SAAJ,EAAe;AACb,UAAII,cAAc,GAAGC,MAAM,CAACC,UAAP,CAAkBJ,gBAAlB,CAArB;AACA,aAAOE,cAAc,CAACG,OAAtB;AACD;;AAED,WAAO,KAAP;AACD,GAPuB,CAAxB;AAAA,MAQIC,UAAU,GAAGX,cAAc,CAACM,SAAD,EAAY,CAAZ,CAR/B;AAAA,MASII,OAAO,GAAGC,UAAU,CAAC,CAAD,CATxB;AAAA,MAUIC,UAAU,GAAGD,UAAU,CAAC,CAAD,CAV3B;;AAYAT,EAAAA,SAAS,CAAC,YAAY;AACpB,aAASW,QAAT,CAAkBC,KAAlB,EAAyB;AACvBF,MAAAA,UAAU,CAACE,KAAK,CAACJ,OAAP,CAAV;AACD;;AAED,QAAIH,cAAc,GAAGC,MAAM,CAACC,UAAP,CAAkBJ,gBAAlB,CAArB,CALoB,CAKsC;;AAE1D,QAAIE,cAAc,CAACQ,gBAAnB,EAAqC;AACnCR,MAAAA,cAAc,CAACQ,gBAAf,CAAgC,QAAhC,EAA0CF,QAA1C;AACD,KAFD,MAEO;AACLN,MAAAA,cAAc,CAACS,WAAf,CAA2BH,QAA3B;AACD,KAXmB,CAWlB;;;AAGFD,IAAAA,UAAU,CAACL,cAAc,CAACG,OAAhB,CAAV;AACA,WAAO,YAAY;AACjB,UAAIH,cAAc,CAACQ,gBAAnB,EAAqC;AACnCR,QAAAA,cAAc,CAACU,mBAAf,CAAmC,QAAnC,EAA6CJ,QAA7C;AACD,OAFD,MAEO;AACLN,QAAAA,cAAc,CAACW,cAAf,CAA8BL,QAA9B;AACD;AACF,KAND;AAOD,GAtBQ,EAsBN,CAACR,gBAAD,CAtBM,CAAT;AAuBA,SAAOK,OAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { useState, useEffect } from 'react';\nimport { canUseDOM } from './environment';\nexport function useMatchMedia(mediaQueryString) {\n  var _useState = useState(function () {\n    if (canUseDOM) {\n      var mediaQueryList = window.matchMedia(mediaQueryString);\n      return mediaQueryList.matches;\n    }\n\n    return false;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      matches = _useState2[0],\n      setMatches = _useState2[1];\n\n  useEffect(function () {\n    function listener(event) {\n      setMatches(event.matches);\n    }\n\n    var mediaQueryList = window.matchMedia(mediaQueryString); // Support fallback to `addListener` for broader browser support\n\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n    } else {\n      mediaQueryList.addListener(listener);\n    } // Make sure the media query list is in sync with the matches state\n\n\n    setMatches(mediaQueryList.matches);\n    return function () {\n      if (mediaQueryList.addEventListener) {\n        mediaQueryList.removeEventListener('change', listener);\n      } else {\n        mediaQueryList.removeListener(listener);\n      }\n    };\n  }, [mediaQueryString]);\n  return matches;\n}"]},"metadata":{},"sourceType":"module"}