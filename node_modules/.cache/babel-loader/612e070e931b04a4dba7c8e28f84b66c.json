{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { baseFontSize, breakpoints } from '@carbon/layout';\n/**\n * Utility that sets an array of elements to the same height.\n *\n * @example\n * import {sameHeight} from '@carbon/ibmdotcom-utilities';\n *\n * sameHeight(ElementArray, 'md');\n *\n * if you want the utility to refresh the sizes as you resize the screen, consider using a listener:\n *\n * window.addEventListener('resize', function() {\n *   window.requestAnimationFrame(function() {\n *     sameHeight(ElementArray, 'md');\n *   });\n * }, true);\n *\n * @param {Array} elemCollection Html objects array\n * @param {string} minSize Minimum size for the utility to be activated, empty for small,\n *  md for medium, lg for large, xlg for xlarge, max for maximum\n */\n\nfunction sameHeight(elemCollection) {\n  var minSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var elemArr = Array.prototype.slice.call(elemCollection);\n  var targetWidth = minSize ? parseFloat(breakpoints[minSize].width) * baseFontSize : 0;\n\n  if (window.innerWidth > targetWidth) {\n    var targetHeight = 0;\n    elemArr.forEach(function (elem) {\n      elem.style.height = 'auto';\n      elem.offsetHeight > targetHeight ? targetHeight = elem.clientHeight : false;\n    });\n    elemArr.forEach(function (elem) {\n      elem.style.height = targetHeight + 'px';\n    });\n  } else {\n    elemArr.forEach(function (elem) {\n      elem.style.height = 'auto';\n    });\n  }\n}\n\nexport default sameHeight;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/internal/vendor/@carbon/ibmdotcom-utilities/utilities/sameHeight/sameHeight.js"],"names":["baseFontSize","breakpoints","sameHeight","elemCollection","minSize","arguments","length","undefined","elemArr","Array","prototype","slice","call","targetWidth","parseFloat","width","window","innerWidth","targetHeight","forEach","elem","style","height","offsetHeight","clientHeight"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,gBAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,cAApB,EAAoC;AAClC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAlF;AACA,MAAIG,OAAO,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,cAA3B,CAAd;AACA,MAAIU,WAAW,GAAGT,OAAO,GAAGU,UAAU,CAACb,WAAW,CAACG,OAAD,CAAX,CAAqBW,KAAtB,CAAV,GAAyCf,YAA5C,GAA2D,CAApF;;AAEA,MAAIgB,MAAM,CAACC,UAAP,GAAoBJ,WAAxB,EAAqC;AACnC,QAAIK,YAAY,GAAG,CAAnB;AACAV,IAAAA,OAAO,CAACW,OAAR,CAAgB,UAAUC,IAAV,EAAgB;AAC9BA,MAAAA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoB,MAApB;AACAF,MAAAA,IAAI,CAACG,YAAL,GAAoBL,YAApB,GAAmCA,YAAY,GAAGE,IAAI,CAACI,YAAvD,GAAsE,KAAtE;AACD,KAHD;AAIAhB,IAAAA,OAAO,CAACW,OAAR,CAAgB,UAAUC,IAAV,EAAgB;AAC9BA,MAAAA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoBJ,YAAY,GAAG,IAAnC;AACD,KAFD;AAGD,GATD,MASO;AACLV,IAAAA,OAAO,CAACW,OAAR,CAAgB,UAAUC,IAAV,EAAgB;AAC9BA,MAAAA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoB,MAApB;AACD,KAFD;AAGD;AACF;;AAED,eAAepB,UAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { baseFontSize, breakpoints } from '@carbon/layout';\n/**\n * Utility that sets an array of elements to the same height.\n *\n * @example\n * import {sameHeight} from '@carbon/ibmdotcom-utilities';\n *\n * sameHeight(ElementArray, 'md');\n *\n * if you want the utility to refresh the sizes as you resize the screen, consider using a listener:\n *\n * window.addEventListener('resize', function() {\n *   window.requestAnimationFrame(function() {\n *     sameHeight(ElementArray, 'md');\n *   });\n * }, true);\n *\n * @param {Array} elemCollection Html objects array\n * @param {string} minSize Minimum size for the utility to be activated, empty for small,\n *  md for medium, lg for large, xlg for xlarge, max for maximum\n */\n\nfunction sameHeight(elemCollection) {\n  var minSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var elemArr = Array.prototype.slice.call(elemCollection);\n  var targetWidth = minSize ? parseFloat(breakpoints[minSize].width) * baseFontSize : 0;\n\n  if (window.innerWidth > targetWidth) {\n    var targetHeight = 0;\n    elemArr.forEach(function (elem) {\n      elem.style.height = 'auto';\n      elem.offsetHeight > targetHeight ? targetHeight = elem.clientHeight : false;\n    });\n    elemArr.forEach(function (elem) {\n      elem.style.height = targetHeight + 'px';\n    });\n  } else {\n    elemArr.forEach(function (elem) {\n      elem.style.height = 'auto';\n    });\n  }\n}\n\nexport default sameHeight;"]},"metadata":{},"sourceType":"module"}