{"ast":null,"code":"/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Stores the latast id to increment\n *\n * @type {number} Number stored for the next ID\n * @private\n */\nvar _lastId = 0;\n/**\n * Creates a unique ID to use\n *\n * @param {string=} prefix Prefix to set for the id\n * @returns {string} Unique ID\n *\n * @example\n * import { uniqueid } from '@carbon/ibmdotcom-utilities';\n *\n * const id1 = uniqueid(); // id1\n * const id2 = uniqueid(); // id2\n * const id3 = uniqueid('prefix'); // prefix3\n * const id4 = uniqueid('prefix-'); // prefix-4\n */\n\nfunction uniqueid() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  _lastId++;\n  return \"\".concat(prefix).concat(_lastId);\n}\n\nexport default uniqueid;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-react/es/internal/vendor/@carbon/ibmdotcom-utilities/utilities/uniqueid/uniqueid.js"],"names":["_lastId","uniqueid","prefix","arguments","length","undefined","concat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,CAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,GAAoB;AAClB,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAjF;AACAH,EAAAA,OAAO;AACP,SAAO,GAAGM,MAAH,CAAUJ,MAAV,EAAkBI,MAAlB,CAAyBN,OAAzB,CAAP;AACD;;AAED,eAAeC,QAAf","sourcesContent":["/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Stores the latast id to increment\n *\n * @type {number} Number stored for the next ID\n * @private\n */\nvar _lastId = 0;\n/**\n * Creates a unique ID to use\n *\n * @param {string=} prefix Prefix to set for the id\n * @returns {string} Unique ID\n *\n * @example\n * import { uniqueid } from '@carbon/ibmdotcom-utilities';\n *\n * const id1 = uniqueid(); // id1\n * const id2 = uniqueid(); // id2\n * const id3 = uniqueid('prefix'); // prefix3\n * const id4 = uniqueid('prefix-'); // prefix-4\n */\n\nfunction uniqueid() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  _lastId++;\n  return \"\".concat(prefix).concat(_lastId);\n}\n\nexport default uniqueid;"]},"metadata":{},"sourceType":"module"}