{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport Cookies from 'js-cookie';\n/**\n * Name of cookie needed to grab cc and lc\n *\n * @type {string}\n * @private\n */\n\nvar _cookieName = 'ipcInfo';\n/**\n * Utility to set and get the ipcInfo cookie needed to determine country and language code\n */\n\nvar ipcinfoCookie = /*#__PURE__*/function () {\n  function ipcinfoCookie() {\n    _classCallCheck(this, ipcinfoCookie);\n  }\n\n  _createClass(ipcinfoCookie, null, [{\n    key: \"get\",\n\n    /**\n     * retreive the ipcInfo cookie that contains the cc and lc\n     * decodes and converts to object\n     *\n     * @example\n     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';\n     *\n     * const info = ipcinfoCookie.get();\n     *\n     *\n     * @returns {object} object containing cc and lc\n     */\n    value: function get() {\n      var ipcinfo = Cookies.get(_cookieName);\n\n      if (ipcinfo) {\n        var cc;\n        var lc;\n        var info = decodeURIComponent(ipcinfo).split(';');\n        info.map(function (code) {\n          var itemParts = code.split('=');\n          if (itemParts[0] === 'cc') cc = itemParts[1];\n          if (itemParts[0] === 'lc') lc = itemParts[1];\n        });\n        return {\n          cc: cc,\n          lc: lc\n        };\n      }\n    }\n    /**\n     * set the ipcInfo cookie with expiration of a year\n     * takes care of converting to string and encoding\n     *\n     * @param {object} params params object\n     * @param {string} params.cc country code\n     * @param {string} params.lc language code\n     *\n     * @example\n     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';\n     *\n     * const locale = {cc: 'us', lc: 'en'}\n     * ipcinfoCookie.set(locale);\n     *\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(_ref) {\n      var cc = _ref.cc,\n          lc = _ref.lc;\n      var info = \"cc=\".concat(cc, \";lc=\").concat(lc);\n      Cookies.set(_cookieName, encodeURIComponent(info), {\n        expires: 365,\n        domain: '.ibm.com'\n      });\n    }\n  }]);\n\n  return ipcinfoCookie;\n}();\n\nexport default ipcinfoCookie;","map":{"version":3,"sources":["/Users/henriquefelixcastro/Downloads/Educathon 2022/educathon-2022-website/node_modules/@carbon/ibmdotcom-utilities/es/utilities/ipcinfoCookie/ipcinfoCookie.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Cookies","_cookieName","ipcinfoCookie","value","get","ipcinfo","cc","lc","info","decodeURIComponent","split","map","code","itemParts","set","_ref","concat","encodeURIComponent","expires","domain"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Copyright IBM Corp. 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Cookies from 'js-cookie';\n/**\n * Name of cookie needed to grab cc and lc\n *\n * @type {string}\n * @private\n */\n\nvar _cookieName = 'ipcInfo';\n/**\n * Utility to set and get the ipcInfo cookie needed to determine country and language code\n */\n\nvar ipcinfoCookie = /*#__PURE__*/function () {\n  function ipcinfoCookie() {\n    _classCallCheck(this, ipcinfoCookie);\n  }\n\n  _createClass(ipcinfoCookie, null, [{\n    key: \"get\",\n\n    /**\n     * retreive the ipcInfo cookie that contains the cc and lc\n     * decodes and converts to object\n     *\n     * @example\n     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';\n     *\n     * const info = ipcinfoCookie.get();\n     *\n     *\n     * @returns {object} object containing cc and lc\n     */\n    value: function get() {\n      var ipcinfo = Cookies.get(_cookieName);\n\n      if (ipcinfo) {\n        var cc;\n        var lc;\n        var info = decodeURIComponent(ipcinfo).split(';');\n        info.map(function (code) {\n          var itemParts = code.split('=');\n          if (itemParts[0] === 'cc') cc = itemParts[1];\n          if (itemParts[0] === 'lc') lc = itemParts[1];\n        });\n        return {\n          cc: cc,\n          lc: lc\n        };\n      }\n    }\n    /**\n     * set the ipcInfo cookie with expiration of a year\n     * takes care of converting to string and encoding\n     *\n     * @param {object} params params object\n     * @param {string} params.cc country code\n     * @param {string} params.lc language code\n     *\n     * @example\n     * import { ipcinfoCookie } from '@carbon/ibmdotcom-utilities';\n     *\n     * const locale = {cc: 'us', lc: 'en'}\n     * ipcinfoCookie.set(locale);\n     *\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(_ref) {\n      var cc = _ref.cc,\n          lc = _ref.lc;\n      var info = \"cc=\".concat(cc, \";lc=\").concat(lc);\n      Cookies.set(_cookieName, encodeURIComponent(info), {\n        expires: 365,\n        domain: '.ibm.com'\n      });\n    }\n  }]);\n\n  return ipcinfoCookie;\n}();\n\nexport default ipcinfoCookie;"]},"metadata":{},"sourceType":"module"}