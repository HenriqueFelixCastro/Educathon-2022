import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/* eslint-disable jsx-a11y/role-supports-aria-props */

/* istanbul ignore file */

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import ChevronDown20 from '@carbon/icons-react/es/chevron--down/20';
import settings from 'carbon-components/es/globals/js/settings';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import SideNavIcon from './SideNavIcon';
var prefix = settings.prefix;
export var SideNavMenu = /*#__PURE__*/function (_React$Component) {
  _inherits(SideNavMenu, _React$Component);

  var _super = _createSuper(SideNavMenu);

  function SideNavMenu(props) {
    var _this;

    _classCallCheck(this, SideNavMenu);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleToggleExpand", function (event) {
      var onToggle = _this.props.onToggle;
      var onMegaMenuToggle = new CustomEvent('onMegaMenuToggle', {
        bubbles: true,
        detail: {
          isExpanded: !_this.state.isExpanded
        }
      });
      event.currentTarget.dispatchEvent(onMegaMenuToggle);
      event.persist();

      _this.setState(function (state) {
        return {
          isExpanded: !state.isExpanded
        };
      }, function () {
        if (onToggle) {
          onToggle(event, {
            isExpanded: _this.state.isExpanded
          });
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyToggleExpand", function (event) {
      if (event.key === 'Enter' || event.charCode === ' ') {
        event.stopPropagation();
        event.preventDefault();
        var onToggle = _this.props.onToggle;
        event.persist();

        _this.setState(function (state) {
          return {
            isExpanded: !state.isExpanded
          };
        }, function () {
          if (onToggle) {
            onToggle(event, {
              isExpanded: _this.state.isExpanded
            });
          }
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_renderSideNavItem", function (item) {
      if (item) {
        return React.cloneElement(item, {
          onClick: item.props.isbackbutton === 'true' ? _this.handleToggleExpand.bind(_assertThisInitialized(_this)) : null,
          onKeyPress: item.props.isbackbutton === 'true' ? _this.handleKeyToggleExpand.bind(_assertThisInitialized(_this)) : null
        });
      }
    });

    _this.state = {
      isExpanded: props.defaultExpanded || false,
      wasPreviouslyExpanded: props.defaultExpanded || false
    };
    return _this;
  }

  _createClass(SideNavMenu, [{
    key: "render",
    value: function render() {
      var _cx;

      var _this$props = this.props,
          buttonRef = _this$props.buttonRef,
          customClassName = _this$props.className,
          IconElement = _this$props.renderIcon,
          isActive = _this$props.isActive,
          title = _this$props.title,
          large = _this$props.large,
          _isbackbutton = _this$props.isbackbutton,
          rest = _objectWithoutProperties(_this$props, ["buttonRef", "className", "renderIcon", "isActive", "title", "large", "isbackbutton"]);

      var isExpanded = this.state.isExpanded;
      var hasActiveChild;
      var className = cx((_cx = {}, _defineProperty(_cx, "".concat(prefix, "--side-nav__item"), true), _defineProperty(_cx, "".concat(prefix, "--side-nav__item--active"), isActive || hasActiveChild && !isExpanded), _defineProperty(_cx, "".concat(prefix, "--side-nav__item--icon"), IconElement), _defineProperty(_cx, "".concat(prefix, "--side-nav__item--large"), large), _defineProperty(_cx, customClassName, !!customClassName), _cx));
      return /*#__PURE__*/React.createElement("li", {
        className: className
      }, /*#__PURE__*/React.createElement("button", {
        "aria-haspopup": "true",
        "aria-expanded": isExpanded,
        "data-selected": rest.selected ? 'true' : '',
        className: cx("".concat(prefix, "--side-nav__submenu"), _defineProperty({}, "".concat(prefix, "--masthead__side-nav--submemu--selected"), rest.selected)),
        "data-title": rest.dataTitle,
        onClick: this.handleToggleExpand,
        ref: buttonRef,
        type: "button"
      }, IconElement && /*#__PURE__*/React.createElement(SideNavIcon, null, /*#__PURE__*/React.createElement(IconElement, null)), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefix, "--side-nav__submenu-content")
      }, /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefix, "--side-nav__submenu-title"),
        "data-autoid": "".concat(rest.autoid)
      }, title), /*#__PURE__*/React.createElement(SideNavIcon, {
        className: "".concat(prefix, "--side-nav__submenu-chevron"),
        small: true
      }, /*#__PURE__*/React.createElement(ChevronDown20, null)))));
    }
  }]);

  return SideNavMenu;
}(React.Component);

_defineProperty(SideNavMenu, "propTypes", {
  /**
   * Provide an optional class to be applied to the containing node
   */
  className: PropTypes.string,

  /**
   * Pass in a custom icon to render next to the `SideNavMenu` title
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Specify whether the `SideNavMenu` is "active". `SideNavMenu` should be
   * considered active if one of its menu items are a link for the current
   * page.
   */
  isActive: PropTypes.bool,

  /**
   * Provide the text for the overall menu name
   */
  title: PropTypes.string.isRequired,

  /**
   * Specify whether the menu should default to expanded. By default, it will
   * be closed.
   */
  defaultExpanded: PropTypes.bool,

  /**
   * Property to indicate if the side nav container is open (or not). Use to
   * keep local state and styling in step with the SideNav expansion state.
   */
  isSideNavExpanded: PropTypes.bool,

  /**
   * Specify if this is a large variation of the SideNavMenu
   */
  large: PropTypes.bool,

  /**
   * For submenu back button to toggle expand/collapse
   */
  isbackbutton: PropTypes.string,

  /**
   * A callback that is called when this side nav menu is toggled by user gesture.
   */
  onToggle: PropTypes.func
});

_defineProperty(SideNavMenu, "defaultProps", {
  defaultExpanded: false,
  isActive: false,
  large: false
});

_defineProperty(SideNavMenu, "getDerivedStateFromProps", function (props, state) {
  var derivedState = null;

  if (props.isSideNavExpanded === false && state.isExpanded === true) {
    derivedState = {
      isExpanded: props.isSideNavExpanded,
      wasPreviouslyExpanded: true
    };
  } else if (props.isSideNavExpanded === true && state.wasPreviouslyExpanded === true) {
    derivedState = {
      isExpanded: props.isSideNavExpanded,
      wasPreviouslyExpanded: false
    };
  }

  return derivedState;
});

export default React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(SideNavMenu, _extends({}, props, {
    buttonRef: ref
  }));
});