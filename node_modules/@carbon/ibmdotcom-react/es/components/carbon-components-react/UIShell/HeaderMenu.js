import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/* istanbul ignore file */

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import ChevronDown20 from '@carbon/icons-react/es/chevron--down/20';
import settings from 'carbon-components/es/globals/js/settings';
import cx from 'classnames';
import React from 'react';
import PropTypes from 'prop-types';
import { keys, matches } from '../../../internal/vendor/carbon-components-react/internal/keyboard';
import { AriaLabelPropType } from '../../../internal/vendor/carbon-components-react/prop-types/AriaPropTypes';
import root from 'window-or-global';
var prefix = settings.prefix;

var defaultRenderMenuContent = function defaultRenderMenuContent() {
  return /*#__PURE__*/React.createElement(ChevronDown20, {
    className: "".concat(prefix, "--header__menu-arrow")
  });
};
/**
 * `HeaderMenu` is used to render submenu's in the `Header`. Most often children
 * will be a `HeaderMenuItem`. It handles certain keyboard events to help
 * with managing focus. It also passes along refs to each child so that it can
 * help manage focus state of its children.
 */


var HeaderMenu = /*#__PURE__*/function (_React$Component) {
  _inherits(HeaderMenu, _React$Component);

  var _super = _createSuper(HeaderMenu);

  function HeaderMenu(props) {
    var _root$window, _root$document6;

    var _this;

    _classCallCheck(this, HeaderMenu);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleOnClick", function (event) {
      var _root$document;

      event.preventDefault();

      _this.menuLinkRef.current.focus(); // set the margin for masthead and body to adjust for scrollbar disappearing on scroll lock


      var elems = (_root$document = root.document) === null || _root$document === void 0 ? void 0 : _root$document.querySelectorAll(".".concat(prefix, "--masthead__l0, body"));

      _this.setState(function (prevState) {
        if (_this.props.disableScroll) {
          if (prevState.expanded) {
            var _root$document2, _root$document2$body;

            _this.props.setOverlay(false);

            (_root$document2 = root.document) === null || _root$document2 === void 0 ? void 0 : (_root$document2$body = _root$document2.body) === null || _root$document2$body === void 0 ? void 0 : _root$document2$body.classList.remove("".concat(prefix, "--body__lock-scroll"));
            elems.forEach(function (elem) {
              return elem.style.marginRight = '0px';
            });
          } else {
            var _root$document3, _root$document3$body;

            _this.props.setOverlay(true);

            (_root$document3 = root.document) === null || _root$document3 === void 0 ? void 0 : (_root$document3$body = _root$document3.body) === null || _root$document3$body === void 0 ? void 0 : _root$document3$body.classList.add("".concat(prefix, "--body__lock-scroll"));
            elems.forEach(function (elem) {
              return elem.style.marginRight = "".concat(_this.scrollBarWidth, "px");
            });
          }
        }

        var onMegaMenuToggle = new CustomEvent('onMegaMenuToggle', {
          bubbles: true,
          detail: {
            isExpanded: !prevState.expanded
          }
        });

        _this.menuLinkRef.current.dispatchEvent(onMegaMenuToggle);

        return {
          expanded: !prevState.expanded
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOnKeyDown", function (event) {
      // Handle enter or space key for toggling the expanded state of the menu.
      if (matches(event, [keys.Enter, keys.Space])) {
        event.stopPropagation();
        event.preventDefault();

        _this.handleOnClick(event);

        return;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "checkMenuItems", function (event) {
      var megamenuItems = ["".concat(prefix, "--masthead__megamenu__category-headline"), "".concat(prefix, "--masthead__megamenu__category-group"), "".concat(prefix, "--masthead__megamenu__view-all-cta"), "".concat(prefix, "--masthead__megamenu__l0-nav"), "".concat(prefix, "--masthead__megamenu__l1-nav"), "".concat(prefix, "--header__menu")];
      return megamenuItems.filter(function (item) {
        var _event$relatedTarget$;

        return (_event$relatedTarget$ = event.relatedTarget.parentElement.className) === null || _event$relatedTarget$ === void 0 ? void 0 : _event$relatedTarget$.includes(item);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOnBlur", function (event) {
      var _root$document4;

      var elems = (_root$document4 = root.document) === null || _root$document4 === void 0 ? void 0 : _root$document4.querySelectorAll(".".concat(prefix, "--masthead__l0, body"));

      if (!event.currentTarget.contains(event.relatedTarget)) {
        _this.setState({
          expanded: false,
          selectedIndex: null
        });

        if (_this.props.disableScroll) {
          var _root$document5, _root$document5$body;

          (_root$document5 = root.document) === null || _root$document5 === void 0 ? void 0 : (_root$document5$body = _root$document5.body) === null || _root$document5$body === void 0 ? void 0 : _root$document5$body.classList.remove("".concat(prefix, "--body__lock-scroll"));
          elems.forEach(function (elem) {
            return elem.style.marginRight = '0px';
          });
        }
      }

      if (!event.relatedTarget || !_this.checkMenuItems(event).length) {
        _this.props.setOverlay(false);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuButtonRef", function (node) {
      if (_this.props.focusRef) {
        _this.props.focusRef(node);
      }

      _this.menuButtonRef = node;
    });

    _defineProperty(_assertThisInitialized(_this), "handleItemRef", function (index) {
      return function (node) {
        _this.items[index] = node;
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuClose", function (event) {
      // Handle ESC keydown for closing the expanded menu.
      if (matches(event, [keys.Escape]) && _this.state.expanded) {
        event.stopPropagation();
        event.preventDefault();

        _this.setState(function () {
          return {
            expanded: false,
            selectedIndex: null
          };
        }); // remove overlay


        _this.props.setOverlay(false); // Return focus to menu button when the user hits ESC.


        _this.menuLinkRef.current.focus();

        return;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_renderMenuItem", function (item, index) {
      return React.cloneElement(item, {
        ref: _this.handleItemRef(index),
        role: 'none'
      });
    });

    _this.state = {
      // Used to manage the expansion state of the menu
      expanded: false,
      // Refers to the menuitem that is currently focused
      // Note: children should have `role="menuitem"` on node consuming ref
      selectedIndex: null
    };
    _this.items = [];
    _this.scrollBarWidth = ((_root$window = root.window) === null || _root$window === void 0 ? void 0 : _root$window.innerWidth) - ((_root$document6 = root.document) === null || _root$document6 === void 0 ? void 0 : _root$document6.body.offsetWidth);
    _this.menuLinkRef = React.createRef();
    return _this;
  }
  /**
   * Toggle the expanded state of the menu on click.
   */


  _createClass(HeaderMenu, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ariaLabel = _this$props['aria-label'],
          ariaLabelledBy = _this$props['aria-labelledby'],
          customClassName = _this$props.className,
          children = _this$props.children,
          MenuContent = _this$props.renderMenuContent,
          menuLinkName = _this$props.menuLinkName,
          autoId = _this$props.autoId,
          selected = _this$props.selected,
          dataTitle = _this$props.dataTitle;
      var accessibilityLabel = {
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy
      };
      var className = cx("".concat(prefix, "--header__submenu"), customClassName); // Notes on eslint comments and based on the examples in:
      // https://www.w3.org/TR/wai-aria-practices/examples/menubar/menubar-1/menubar-1.html#
      // - The focus is handled by the <a> menuitem, onMouseOver is for mouse
      // users
      // - aria-haspopup can definitely have the value "menu"
      // - aria-expanded is on their example node with role="menuitem"
      // - href can be set to javascript:void(0), ideally this will be a button

      return /*#__PURE__*/React.createElement("li", {
        // eslint-disable-line jsx-a11y/mouse-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions
        className: className,
        "data-autoid": autoId,
        onKeyDown: this.handleMenuClose,
        onBlur: this.handleOnBlur
      }, /*#__PURE__*/React.createElement("a", _extends({
        // eslint-disable-line jsx-a11y/role-supports-aria-props,jsx-a11y/anchor-is-valid
        "aria-haspopup": "menu" // eslint-disable-line jsx-a11y/aria-proptypes
        ,
        "aria-expanded": this.state.expanded,
        className: "".concat(prefix, "--header__menu-item ").concat(prefix, "--header__menu-title"),
        "data-title": dataTitle,
        href: "#",
        onClick: this.handleOnClick,
        onKeyDown: this.handleOnKeyDown,
        role: "menuitem",
        "data-selected": "".concat(!!selected),
        tabIndex: 0,
        ref: this.menuLinkRef
      }, accessibilityLabel), menuLinkName, /*#__PURE__*/React.createElement(MenuContent, null)), /*#__PURE__*/React.createElement("ul", _extends({}, accessibilityLabel, {
        className: "".concat(prefix, "--header__menu")
      }), React.Children.map(children, this._renderMenuItem)));
    }
    /**
     * Render an individual menuitem, passing along `role: 'none'` because the
     * host node <li> doesn't apply when in a <ul> with `role="menu"` and so we
     * need to revert the semantics.
     *
     * We also capture the `ref` for each child inside of `this.items` to properly
     * manage focus. In addition to this focus management, all items receive a
     * `tabIndex: -1` so the user won't hit a large number of items in their tab
     * sequence when they might not want to go through all the items.
     */

  }]);

  return HeaderMenu;
}(React.Component);

_defineProperty(HeaderMenu, "propTypes", _objectSpread(_objectSpread({}, AriaLabelPropType), {}, {
  /**
   * Optional data-title attribute
   */
  dataTitle: PropTypes.string,

  /**
   * Provide a custom ref handler for the menu button
   */
  focusRef: PropTypes.func,

  /**
   * Optionally provide a tabIndex for the underlying menu button
   */
  tabIndex: PropTypes.number,

  /**
   * Provide a label for the link text
   */
  menuLinkName: PropTypes.string.isRequired,

  /**
   * Optional component to render instead of string
   */
  renderMenuContent: PropTypes.func,

  /**
   * Determines whether to disable body scroll
   */
  disableScroll: PropTypes.bool,

  /**
   * function to toogle overlay that appears when opening menu
   */
  setOverlay: PropTypes.func,

  /**
   * sets the selected styles
   */
  selected: PropTypes.bool
}));

_defineProperty(HeaderMenu, "defaultProps", {
  renderMenuContent: defaultRenderMenuContent,
  setOverlay: function setOverlay() {}
});

export default React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(HeaderMenu, _extends({}, props, {
    focusRef: ref
  }));
});