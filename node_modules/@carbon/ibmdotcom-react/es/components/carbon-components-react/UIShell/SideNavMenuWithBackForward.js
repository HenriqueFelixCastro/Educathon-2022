import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import ArrowRight20 from '@carbon/icons-react/es/arrow--right/20';
import ChevronLeft20 from '@carbon/icons-react/es/chevron--left/20';
import ddsSettings from '../../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import settings from 'carbon-components/es/globals/js/settings';
import SideNavLink from '../../../internal/vendor/carbon-components-react/components/UIShell/SideNavLink';
import SideNavMenu from './SideNavMenu';
import SideNavMenuItem from '../../../internal/vendor/carbon-components-react/components/UIShell/SideNavMenuItem';
import PropTypes from 'prop-types';
import React, { useCallback, useRef } from 'react';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * Side nav menu with back button
 *
 * @returns {*} SideNavMenuWithBackFoward menu items
 */

var SideNavMenuWithBackForward = function SideNavMenuWithBackForward(_ref) {
  var title = _ref.title,
      titleUrl = _ref.titleUrl,
      backButtonText = _ref.backButtonText,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, ["title", "titleUrl", "backButtonText", "children"]);

  var refSideNavMenu = useRef(null);
  var handleToggle = useCallback(function () {
    var sideNavMenuNode = refSideNavMenu.current;
    var sideNav = sideNavMenuNode.closest('.bx--side-nav');

    if (sideNav) {
      Array.prototype.forEach.call(sideNav.querySelectorAll('.bx--side-nav__menu'), function (elem) {
        var hasExpandedSubmenu = elem.querySelector('.bx--side-nav__submenu[aria-expanded="true"]');
        elem.classList.toggle('bx--side-nav__menu--hasactivechildren', hasExpandedSubmenu);
      });
    } // return scroll to top when menu toggles


    var sideNavItems = sideNavMenuNode.closest('.bx--side-nav__items');
    sideNavItems.scrollTop = 0;
  }, []);
  return /*#__PURE__*/React.createElement(SideNavMenu, {
    autoid: rest.autoid,
    selected: rest.selected,
    title: title,
    className: rest.lastHighlighted && "".concat(prefix, "--masthead__side-nav__last-highlighted"),
    onToggle: handleToggle,
    ref: refSideNavMenu,
    dataTitle: rest.dataTitle
  }, /*#__PURE__*/React.createElement(SideNavMenuItem, {
    onClick: function onClick(event) {
      return event.preventDefault();
    },
    className: "".concat(prefix, "--masthead__side-nav--submemu-back"),
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0-back"),
    isbackbutton: "true",
    role: "button",
    tabIndex: "0"
  }, /*#__PURE__*/React.createElement(ChevronLeft20, null), backButtonText), titleUrl ? /*#__PURE__*/React.createElement(SideNavLink, {
    className: "".concat(prefix, "--masthead__side-nav--submemu-section-title"),
    href: titleUrl
  }, title, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--masthead__side-nav--submemu-section-title__icon")
  }, /*#__PURE__*/React.createElement(ArrowRight20, null))) : /*#__PURE__*/React.createElement("li", {
    className: "".concat(prefix, "--masthead__side-nav--submemu-title")
  }, title), rest.heading && /*#__PURE__*/React.createElement("p", {
    className: "".concat(prefix, "--masthead__side-nav--submemu-heading")
  }, rest.heading), children);
};

SideNavMenuWithBackForward.propTypes = {
  /**
   * Submenu nav section title
   */
  title: PropTypes.string.isRequired,

  /**
   * Submenu nav section title url
   */
  titleUrl: PropTypes.string,

  /**
   * Back button text
   */
  backButtonText: PropTypes.string,

  /**
   * Sidenav child elements to be rendered
   */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])
};
export default SideNavMenuWithBackForward;