import _defineProperty from "@babel/runtime/helpers/defineProperty";

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { baseFontSize, breakpoints } from '@carbon/layout';
import classnames from 'classnames';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import PropTypes from 'prop-types';
import React from 'react';
import settings from 'carbon-components/es/globals/js/settings';
import uniqueid from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/uniqueid/uniqueid';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 *  sorts media query min-widths order to ensure the
 * browser returns the proper sources and the specified widths
 *
 * @param {Array} sources image sources and min-widths
 *
 * @returns {Array} sorted array of sources
 */

var sortSources = function sortSources(sources) {
  var images = sources.map(function (elem) {
    if (typeof elem.breakpoint == 'number') {
      return elem;
    }

    return {
      breakpoint: parseFloat(breakpoints[elem.breakpoint].width) * baseFontSize,
      src: elem.src
    };
  });
  return images.sort(function (a, b) {
    return a.breakpoint > b.breakpoint ? -1 : 1;
  });
};
/**
 * Picture element.
 */


var Image = function Image(_ref) {
  var classname = _ref.classname,
      sources = _ref.sources,
      defaultSrc = _ref.defaultSrc,
      alt = _ref.alt,
      longDescription = _ref.longDescription,
      Icon = _ref.icon,
      border = _ref.border,
      refImage = _ref.refImage;

  if (!defaultSrc || !alt) {
    return null;
  }

  var sortedImages = sources ? sortSources(sources) : [];
  var id = uniqueid("".concat(prefix, "--image-"));
  var imageClasses = classnames("".concat(prefix, "--image__img"), classname, _defineProperty({}, "".concat(prefix, "--image__img--border"), border));
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--image"),
    "data-autoid": "".concat(stablePrefix, "--image__longdescription")
  }, /*#__PURE__*/React.createElement("picture", {
    ref: refImage
  }, sortedImages.map(function (imgSrc, key) {
    return /*#__PURE__*/React.createElement("source", {
      media: "(min-width: ".concat(imgSrc.breakpoint, "px)"),
      key: key,
      srcSet: imgSrc.src
    });
  }), /*#__PURE__*/React.createElement("img", {
    className: imageClasses,
    src: defaultSrc,
    alt: alt,
    "aria-describedby": longDescription ? "".concat(id) : undefined
  })), longDescription ? /*#__PURE__*/React.createElement("div", {
    id: id,
    className: "".concat(prefix, "--image__longdescription")
  }, longDescription) : null, Icon && /*#__PURE__*/React.createElement(Icon, {
    className: "".concat(prefix, "--image__icon")
  }));
};

Image.propTypes = {
  /**
   * The CSS class names.
   */
  classname: PropTypes.string,

  /**
   * Array of image objects. Use below object structure for each items:
   *
   * | Name         | Data Type     | Description                                  |
   * | ------------ | ------------- | -------------------------------------------- |
   * | `src`        | String        | Url of Image.                                |
   * | `breakpoint` | Num OR String | min-width breakpoint to render the image src |
   */
  sources: PropTypes.arrayOf(PropTypes.shape({
    src: PropTypes.string,
    breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
  })),

  /**
   * Default image (usually image for largest breakpoint).
   */
  defaultSrc: PropTypes.string.isRequired,

  /**
   * Alternate text for image component.
   */
  alt: PropTypes.string.isRequired,

  /**
   * Visible to screen readers, hidden from users.
   */
  longDescription: PropTypes.string,

  /**
   * Icon that overlays the image
   */
  icon: PropTypes.func,

  /**
   * Option to apply a solid border around the image
   */
  border: PropTypes.bool,

  /**
   * Callback ref to get proper thumbnail sizing on Kaltura videos
   */
  refImage: PropTypes.func
};
export default Image;