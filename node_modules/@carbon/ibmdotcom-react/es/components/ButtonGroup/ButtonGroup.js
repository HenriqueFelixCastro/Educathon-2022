import _extends from "@babel/runtime/helpers/extends";

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useEffect, useRef } from 'react';
import Button from '../../internal/vendor/carbon-components-react/components/Button/Button';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import PropTypes from 'prop-types';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * Button group.
 */

var ButtonGroup = function ButtonGroup(_ref) {
  var buttons = _ref.buttons;
  var groupRef = useRef(null);
  useEffect(function () {
    if (groupRef.current) {
      groupRef.current.style.setProperty("--".concat(stablePrefix, "--button-group--item-count"), String(buttons.length));
    }
  }, [buttons]);
  return /*#__PURE__*/React.createElement("ol", {
    className: "".concat(prefix, "--buttongroup"),
    "data-autoid": "".concat(stablePrefix, "--button-group"),
    ref: groupRef
  }, buttons.map(function (button, key) {
    return /*#__PURE__*/React.createElement("li", {
      key: key,
      className: "".concat(prefix, "--buttongroup-item")
    }, /*#__PURE__*/React.createElement(Button, _extends({
      "data-autoid": "".concat(stablePrefix, "--button-group-").concat(key),
      isExpressive: true
    }, button, {
      type: "button",
      kind: key === buttons.length - 1 ? 'primary' : 'tertiary'
    }), button.copy));
  }));
};

ButtonGroup.propTypes = {
  /**
   * Array of button objects to render.
   * Use the following for each items:
   *
   * | Name         | Data Type | Description                                                                                                                    |
   * | ------------ | --------- | ------------------------------------------------------------------------------------------------------------------------------ |
   * | `href`       | String    | URL for the button item                                                                                                        |
   * | `onClick`    | Function  | Function triggered on click of button                                                                                          |
   * | `copy`       | String    | Button copy                                                                                                                    |
   * | `renderIcon` | Object    | Provide an optional icon for the CTA from [Carbon's icon library](https://www.carbondesignsystem.com/guidelines/icons/library) |
   *
   * Visit the [Button documentation](http://react.carbondesignsystem.com/?path=/story/buttons--default)
   * from Carbon for a full list of available props.
   */
  buttons: PropTypes.arrayOf(PropTypes.shape({
    copy: PropTypes.string,
    href: PropTypes.string,
    onClick: PropTypes.func,
    renderIcon: PropTypes.elementType
  })).isRequired
};
export default ButtonGroup;