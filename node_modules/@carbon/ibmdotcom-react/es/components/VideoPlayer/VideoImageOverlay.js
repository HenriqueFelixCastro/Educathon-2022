import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useCallback, useState } from 'react';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import { Image } from '../Image';
import KalturaPlayerAPI from '../../internal/vendor/@carbon/ibmdotcom-services/services/KalturaPlayer/KalturaPlayer';

var PlayIcon = function PlayIcon(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("title", null, "Group 3"), /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("circle", {
    fillOpacity: ".9",
    fill: "#525252",
    cx: "32",
    cy: "32",
    r: "32"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M26.556 43.111a1 1 0 0 1-1-1v-22a1 1 0 0 1 1.5-.87l19 11a1 1 0 0 1 0 1.74l-19 11a1 1 0 0 1-.5.13z",
    fill: "#F3F3F3",
    fillRule: "nonzero"
  })));
};

PlayIcon.defaultProps = {
  width: "64",
  height: "64",
  viewBox: "0 0 64 64",
  xmlns: "http://www.w3.org/2000/svg"
};
import PropTypes from 'prop-types';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * VideoPlayer Image Overlay component
 */

var VideoImageOverlay = function VideoImageOverlay(_ref) {
  var videoId = _ref.videoId,
      videoData = _ref.videoData,
      embedVideo = _ref.embedVideo,
      playingMode = _ref.playingMode,
      thumbnail = _ref.thumbnail,
      rest = _objectWithoutProperties(_ref, ["videoId", "videoData", "embedVideo", "playingMode", "thumbnail"]);

  var _useState = useState(3),
      _useState2 = _slicedToArray(_useState, 2),
      thumbnailSize = _useState2[0],
      setThumbnailSize = _useState2[1];

  var refImage = useCallback(function (node) {
    if (node === null || node === void 0 ? void 0 : node.parentElement) {
      setThumbnailSize(node.parentElement.offsetWidth);
    }
  }, []);

  var handleClick = function handleClick(event) {
    var onClick = rest.onClick;
    onClick && onClick(event);

    if (playingMode === 'inline') {
      _embedPlayer(event, embedVideo);
    }
  };

  var imageSrc = thumbnail || KalturaPlayerAPI.getThumbnailUrl({
    mediaId: videoId,
    width: thumbnailSize
  });
  return /*#__PURE__*/React.createElement("button", {
    className: "".concat(prefix, "--video-player__image-overlay"),
    "data-autoid": "".concat(stablePrefix, "--video-player__image-overlay"),
    onClick: handleClick
  }, /*#__PURE__*/React.createElement(Image, {
    refImage: refImage,
    defaultSrc: imageSrc,
    alt: videoData.name,
    icon: PlayIcon
  }));
};

var _embedPlayer = function _embedPlayer(e, embedVideo) {
  var element = e.target;
  element.remove();
  embedVideo(true);
};

VideoImageOverlay.propTypes = {
  /**
   * Video ID from Kaltura video platform.
   */
  videoId: PropTypes.string.isRequired,

  /**
   * Object containing videoData such as name, description, duration, etc.
   */
  videoData: PropTypes.object,

  /**
   * Func to set state to trigger embedding of video
   */
  embedVideo: PropTypes.func,

  /**
   * Choose whether the video will be rendered inline or using the `LightboxMediaViewer`.
   */
  playingMode: PropTypes.oneOf(['inline', 'lightbox']),

  /**
   * Optional custom video thumbnail
   */
  thumbnail: PropTypes.string
};
export default VideoImageOverlay;