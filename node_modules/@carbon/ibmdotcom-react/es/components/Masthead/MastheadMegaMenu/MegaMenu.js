import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import CategoryGroup from './CategoryGroup';
import CategoryLink from './CategoryLink';
import LeftNavigation from './LeftNavigation';
import NavigationGroup from './NavigationGroup';
import PropTypes from 'prop-types';
import React from 'react';
import RightNavigation from './RightNavigation';
import settings from 'carbon-components/es/globals/js/settings';
var prefix = settings.prefix;
/**
 * Masthead megamenu component.
 */

var MegaMenu = React.forwardRef(function MegaMenu(props, ref) {
  var _data$menuSections$, _viewAllLink, _viewAllLink2;

  var data = props.data,
      rest = _objectWithoutProperties(props, ["data"]);

  var highlightedItems = [];
  var viewAllLink;
  var menuItems = [];
  data.menuSections[0].menuItems.forEach(function (item) {
    if (item.highlighted) return highlightedItems.push(item);
    if (item.megaPanelViewAll) return viewAllLink = item;else return menuItems.push(item);
  });
  var hasHighlights = highlightedItems.length !== 0;
  var heading = (_data$menuSections$ = data.menuSections[0]) === null || _data$menuSections$ === void 0 ? void 0 : _data$menuSections$.heading;
  return /*#__PURE__*/React.createElement(NavigationGroup, {
    ref: ref
  }, hasHighlights && /*#__PURE__*/React.createElement(LeftNavigation, null, heading && /*#__PURE__*/React.createElement("p", {
    className: "".concat(prefix, "--masthead__megamenu__copy")
  }, heading), highlightedItems.map(function (item, i) {
    var _item$megapanelConten, _item$megapanelConten2, _item$megapanelConten3, _item$megapanelConten4;

    return /*#__PURE__*/React.createElement(CategoryGroup, {
      autoid: rest.autoid,
      key: i,
      href: item.url,
      title: item.title
    }, ((_item$megapanelConten = item.megapanelContent) === null || _item$megapanelConten === void 0 ? void 0 : _item$megapanelConten.description) && /*#__PURE__*/React.createElement("p", {
      className: "".concat(prefix, "--masthead__megamenu__copy")
    }, (_item$megapanelConten2 = item.megapanelContent) === null || _item$megapanelConten2 === void 0 ? void 0 : _item$megapanelConten2.description), (_item$megapanelConten3 = item.megapanelContent) === null || _item$megapanelConten3 === void 0 ? void 0 : (_item$megapanelConten4 = _item$megapanelConten3.quickLinks) === null || _item$megapanelConten4 === void 0 ? void 0 : _item$megapanelConten4.links.map(function (_ref, key) {
      var title = _ref.title,
          url = _ref.url,
          highlightedLink = _ref.highlightedLink;
      return /*#__PURE__*/React.createElement(CategoryLink, {
        href: url,
        title: title,
        highlighted: highlightedLink,
        autoid: "".concat(rest.autoid, "-list").concat(i),
        key: key
      });
    }));
  })), /*#__PURE__*/React.createElement(RightNavigation, {
    hasHighlights: hasHighlights,
    viewAllLinkHref: (_viewAllLink = viewAllLink) === null || _viewAllLink === void 0 ? void 0 : _viewAllLink.url,
    viewAllLinkTitle: (_viewAllLink2 = viewAllLink) === null || _viewAllLink2 === void 0 ? void 0 : _viewAllLink2.title,
    autoid: rest.autoid
  }, menuItems.map(function (item, i) {
    var _item$megapanelConten5, _item$megapanelConten6;

    return /*#__PURE__*/React.createElement(CategoryGroup, {
      key: i,
      autoid: rest.autoid,
      index: i + highlightedItems.length,
      href: item.url,
      title: item.title
    }, (_item$megapanelConten5 = item.megapanelContent) === null || _item$megapanelConten5 === void 0 ? void 0 : (_item$megapanelConten6 = _item$megapanelConten5.quickLinks) === null || _item$megapanelConten6 === void 0 ? void 0 : _item$megapanelConten6.links.map(function (_ref2, key) {
      var title = _ref2.title,
          url = _ref2.url;
      return /*#__PURE__*/React.createElement(CategoryLink, {
        key: key,
        href: url,
        title: title,
        autoid: "".concat(rest.autoid, "-list").concat(i + highlightedItems.length),
        index: key
      });
    }));
  })));
});
MegaMenu.propTypes = {
  /**
   * Object containing megamenu nav data
   */
  data: PropTypes.shape({
    hasMenupanel: PropTypes.bool,
    title: PropTypes.string,
    url: PropTypes.string,
    menuSections: PropTypes.arrayOf(PropTypes.shape({
      heading: PropTypes.string,
      menuItems: PropTypes.arrayOf(PropTypes.shape({
        highlighted: PropTypes.bool,
        title: PropTypes.string,
        url: PropTypes.string,
        megapanelContent: PropTypes.shape({
          quickLinks: PropTypes.shape({
            links: PropTypes.arrayOf(PropTypes.shape({
              title: PropTypes.string,
              url: PropTypes.string
            }))
          })
        })
      }))
    }))
  })
};
export default MegaMenu;