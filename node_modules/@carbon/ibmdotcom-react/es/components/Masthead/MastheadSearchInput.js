import _extends from "@babel/runtime/helpers/extends";

/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useCallback, useEffect, useRef } from 'react';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import PropTypes from 'prop-types';
import root from 'window-or-global';
var stablePrefix = ddsSettings.stablePrefix;
/**
 * Renders the input bar with the search icon.
 */

var MastheadSearchInput = function MastheadSearchInput(_ref) {
  var componentInputProps = _ref.componentInputProps,
      dispatch = _ref.dispatch,
      isActive = _ref.isActive,
      disableFocus = _ref.disableFocus;
  var searchRef = useRef();
  /**
   * Clear search and clear input when called
   */

  var resetSearch = useCallback(function () {
    dispatch({
      type: 'setSearchClosed'
    });
    dispatch({
      type: 'setVal',
      payload: {
        val: ''
      }
    });
  }, [dispatch]);
  /**
   * emit custom event for search input enter keypress
   */

  var handleSearchEnter = function handleSearchEnter(event) {
    if (event.key === 'Enter') {
      var onSearchEnter = new CustomEvent('onSearchEnter', {
        bubbles: true,
        detail: {
          value: event.target.value
        }
      });
      event.currentTarget.dispatchEvent(onSearchEnter);
    }
  };

  useEffect(function () {
    if (isActive) {
      if (!disableFocus) {
        searchRef.current && searchRef.current.focus();
      }

      root.document.addEventListener('keyup', handleSearchEnter, true);
      return function () {
        root.document.removeEventListener('keyup', handleSearchEnter, true);
      };
    } else resetSearch();
  }, [isActive, disableFocus, resetSearch]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", _extends({}, componentInputProps, {
    "data-autoid": "".concat(stablePrefix, "--header__search--input"),
    ref: searchRef,
    name: "q",
    tabIndex: isActive ? null : '-1'
  })));
};

MastheadSearchInput.propTypes = {
  /**
   * The input props.
   */
  componentInputProps: PropTypes.object,

  /**
   * The Redux action dispatcher to control `<MastheadSearch>`.
   */
  dispatch: PropTypes.func,

  /**
   * `true` to make the search active.
   */
  isActive: PropTypes.bool,

  /**
   * Executes when the search icon is clicked.
   */
  searchIconClick: PropTypes.func,

  /**
   * Boolean to prevent focusing on the input if open on load, focus normally upon reopen.
   */
  disableFocus: PropTypes.bool
};
MastheadSearchInput.defaultProps = {
  componentInputProps: {},
  dispatch: function dispatch() {},
  searchIconClick: function searchIconClick() {}
};
export default MastheadSearchInput;