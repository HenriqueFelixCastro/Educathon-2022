import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useState, useEffect, useRef } from 'react';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import PropTypes from 'prop-types';
import Search from 'carbon-components-react/lib/components/Search';
import settings from 'carbon-components/es/globals/js/settings';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;

var LeadspaceWithSearch = function LeadspaceWithSearch(_ref) {
  var heading = _ref.heading,
      copy = _ref.copy,
      searchProps = _ref.searchProps;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      searchPlaceHolder = _useState2[0],
      setSearchplaceHolder = _useState2[1];

  var leadspaceContainer = useRef(null);
  useEffect(function () {
    leadspaceContainer.current = new ResizeObserver(function (entries) {
      var _iterator = _createForOfIteratorHelper(entries),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entry = _step.value;
          var CARBON_MD_BREAKPOINT = 672;
          var leadspaceWidth = entry.borderBoxSize[0].inlineSize;
          var _searchProps$placehol = searchProps.placeholder,
              desktop = _searchProps$placehol.desktop,
              mobile = _searchProps$placehol.mobile;

          if (leadspaceWidth > CARBON_MD_BREAKPOINT || !mobile) {
            setSearchplaceHolder(desktop);
          }

          if (leadspaceWidth <= CARBON_MD_BREAKPOINT && mobile) {
            setSearchplaceHolder(mobile);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    leadspaceContainer.current.observe(document.documentElement);
    return function () {
      leadspaceContainer.current.disconnect();
      leadspaceContainer.current = null;
    };
  }, [searchProps.placeholder]);
  return heading ? /*#__PURE__*/React.createElement("section", {
    "data-autoid": "".concat(stablePrefix, "--leadspace-with-search"),
    className: "".concat(prefix, "--leadspace-with-search"),
    ref: leadspaceContainer
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--leadspace-with-search__row")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--leadspace-with-search__content")
  }, /*#__PURE__*/React.createElement("h1", {
    className: "".concat(prefix, "--leadspace-with-search__heading")
  }, heading), copy && /*#__PURE__*/React.createElement("p", {
    className: "".concat(prefix, "--leadspace-with-search__copy")
  }, copy), /*#__PURE__*/React.createElement(Search, _extends({
    className: "".concat(prefix, "--leadspace-with-search__search"),
    placeHolderText: searchPlaceHolder,
    id: "".concat(prefix, "--leadspace-with-search__search-input")
  }, searchProps))))) : null;
};

LeadspaceWithSearch.propTypes = {
  /**
   * Required heading for the Leadspace with search
   */
  heading: PropTypes.string.isRequired,

  /**
   *  An optional copy for the Leadspace with search
   */
  copy: PropTypes.string,

  /**
   *  The search mechanism does not have a built-in behavior. Make sure to provide both onChange and onKeyDown functions to the component with the validations and behavior you want it to have.
   *
   *  | Function    | Parameters | Description                                                                                                  |
   *  |-------------|------------|--------------------------------------------------------------------------------------------------------------|
   *  | `onChange`  | event      | Use this to reach out to `event.target.value`, the value inputed by the user.                                |
   *  | `onKeyDown` | event      | You could use it to detect the user pressing the 'Enter/Return' key and trigger the search mechanism to work |
   *
   * Any other functions and properties passed down to this will be applyed to the [Search component](https://www.carbondesignsystem.com/components/search/usage/).
   *
   */
  searchProps: PropTypes.shape(_objectSpread({
    /**
     * The Leadspace With Search accepts two placeholders. One for mobile view and another for desktop. Both are optional. If you do not provide, it will be set to "Search".
     */
    placeholder: PropTypes.shape({
      mobile: PropTypes.string,
      desktop: PropTypes.string
    }),
    labelText: PropTypes.string
  }, Search.propTypes))
};
LeadspaceWithSearch.defaultProps = {
  searchProps: {
    desktop: 'Search'
  }
};
export default LeadspaceWithSearch;