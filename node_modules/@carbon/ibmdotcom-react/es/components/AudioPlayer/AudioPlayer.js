import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useState, useEffect } from 'react';
import AudioPLayerCaptionsMenu from './AudioPlayerCaptionsMenu';
import AudioPlayerCaptionText from './AudioPlayerCaptionText';
import AudioPlayerPlaybackRateMenu from './AudioPlayerPlaybackRateMenu';
import AudioPlayerPlayButton from './AudioPlayerPlayButton';
import AudioPlayerScrubber from './AudioPlayerScrubber';
import AudioPlayerThumbnail from './AudioPlayerThumbnail';
import AudioPlayerVolumeControl from './AudioPlayerVolumeControl';
import cx from 'classnames';
import { DDS_AUDIO_PLAYER } from '../../internal/FeatureFlags';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import { KalturaPlayer as KalturaPlayerAPI } from '@carbon/ibmdotcom-services/es/services';
import PropTypes from 'prop-types';
import root from 'window-or-global';
import settings from 'carbon-components/es/globals/js/settings';
import uniqueid from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/uniqueid/uniqueid';
var stablePrefix = ddsSettings.stablePrefix;
var prefix = settings.prefix;
/**
 * AudioPlayer component.
 */

var AudioPlayer = function AudioPlayer(_ref) {
  var audioId = _ref.audioId,
      customClassName = _ref.customClassName,
      autoPlay = _ref.autoPlay,
      showCaptionMenu = _ref.showCaptionMenu,
      showPlaybackRateMenu = _ref.showPlaybackRateMenu,
      availablePlaybackRates = _ref.availablePlaybackRates;

  var _useState = useState({
    duration: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      audioData = _useState2[0],
      setAudioData = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      displayVolumeControl = _useState4[0],
      setDisplayVolumeControl = _useState4[1];

  var audioPlayerId = uniqueid("audio-player__audio-".concat(audioId, "-"));
  var uniqueAudioPlayerId = "".concat(prefix, "--").concat(audioPlayerId);

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      kalturaDigitalPlayer = _useState6[0],
      setKalturaDigitalPlayer = _useState6[1]; // The KDP Object


  var _useState7 = useState({}),
      _useState8 = _slicedToArray(_useState7, 2),
      availableCaptions = _useState8[0],
      setAvailableCaptions = _useState8[1]; // All Available Captions

  /**
   * The current state of the player
   *
   * @param {string} '' - Player not initialized
   * @param {string} 'loading' - Player initialized but waiting kdp to load
   * @param {string} 'playing' - Player is playing
   * @param {string} 'paused' - Player is paused
   * @param {string} 'stopped' - Player stopped playing (audio finished)
   */


  var _useState9 = useState(''),
      _useState10 = _slicedToArray(_useState9, 2),
      audioState = _useState10[0],
      setAudioState = _useState10[1];

  var _useState11 = useState(1),
      _useState12 = _slicedToArray(_useState11, 2),
      audioVolume = _useState12[0],
      setAudioVolume = _useState12[1]; // Current Volume


  var _useState13 = useState(0),
      _useState14 = _slicedToArray(_useState13, 2),
      audioTime = _useState14[0],
      setAudioTime = _useState14[1]; // Current Play Time


  var _useState15 = useState(''),
      _useState16 = _slicedToArray(_useState15, 2),
      audioCaption = _useState16[0],
      setAudioCaption = _useState16[1]; // Current Caption Language


  var _useState17 = useState(1),
      _useState18 = _slicedToArray(_useState17, 2),
      audioPlaybackRate = _useState18[0],
      setAudioPlaybackRate = _useState18[1]; // Current Playback Rate


  useEffect(function () {
    var stale = false;

    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var embedAnswer, kdp, listeners, newAudioData;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(audioState === 'loading')) {
                _context.next = 11;
                break;
              }

              _context.next = 3;
              return KalturaPlayerAPI.embedMedia(audioId, uniqueAudioPlayerId, {
                autoPlay: true,
                playbackRateSelector: {
                  defaultSpeed: 1,
                  plugin: true
                }
              });

            case 3:
              embedAnswer = _context.sent;
              setAudioState('playing');
              _context.next = 7;
              return embedAnswer.kWidget();

            case 7:
              kdp = _context.sent;
              setKalturaDigitalPlayer(kdp);
              listeners = {
                playerUpdatePlayhead: function playerUpdatePlayhead(time) {
                  setAudioTime(Math.floor(time));
                },
                newClosedCaptionsData: function newClosedCaptionsData(captionData) {
                  var processedCaptions = availableCaptions;
                  processedCaptions[captionData.label] = captionData.captions;
                  setAvailableCaptions(processedCaptions);
                },
                playerPlayEnd: function playerPlayEnd() {
                  setAudioState('stopped');
                  /**
                   * As the audio current time is floored on playhead update
                   *  when the audio stop because it endend, there is a huge
                   *  chance that the scrubber will show something like:
                   *  2:29 <---- scrubber ----> 2:30
                   *  but the audio will be ended and playbutton will show
                   *  the reload icon
                   * In order to fix it, we're manually setting the current
                   *  audio time to the audio duration
                   */

                  setAudioTime(audioData.duration);
                }
              }; // Loop and bind all the player listeners

              root.Object.keys(listeners).map(function (listenerKey) {
                kdp.addJsListener(listenerKey, listeners[listenerKey]);
              });

            case 11:
              if (!stale) {
                _context.next = 13;
                break;
              }

              return _context.abrupt("return");

            case 13:
              if (!(audioData.duration === 0)) {
                _context.next = 20;
                break;
              }

              _context.next = 16;
              return KalturaPlayerAPI.api(audioId);

            case 16:
              newAudioData = _context.sent;

              if (!stale) {
                _context.next = 19;
                break;
              }

              return _context.abrupt("return");

            case 19:
              setAudioData(newAudioData);

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();

    return function () {
      stale = true;
    };
  }, [audioId, audioState, uniqueAudioPlayerId, availableCaptions, audioData.duration]);

  var initPlayer = function initPlayer() {
    setAudioState('loading');
  };

  if (autoPlay && audioState === '') {
    initPlayer();
  }

  var classnames = cx("".concat(prefix, "--audio-player"), customClassName);
  return /*#__PURE__*/React.createElement("div", {
    className: classnames
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--audio-player__embedded-player"),
    "data-autoid": "".concat(stablePrefix, "--audio-player__audio-").concat(audioId),
    id: uniqueAudioPlayerId
  }), /*#__PURE__*/React.createElement(AudioPlayerThumbnail, {
    audioId: audioId
  }), /*#__PURE__*/React.createElement(AudioPlayerPlayButton, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    initPlayer: initPlayer,
    audioState: audioState,
    setAudioState: setAudioState,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), /*#__PURE__*/React.createElement(AudioPlayerScrubber, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    audioDuration: audioData.duration,
    audioTime: audioTime,
    setAudioTime: setAudioTime,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), /*#__PURE__*/React.createElement(AudioPlayerVolumeControl, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    audioVolume: audioVolume,
    setAudioVolume: setAudioVolume,
    displayVolumeControl: displayVolumeControl,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), showPlaybackRateMenu && /*#__PURE__*/React.createElement(AudioPlayerPlaybackRateMenu, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    availablePlaybackRates: availablePlaybackRates,
    audioPlaybackRate: audioPlaybackRate,
    setAudioPlaybackRate: setAudioPlaybackRate,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), showCaptionMenu && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AudioPLayerCaptionsMenu, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    setDisplayVolumeControl: setDisplayVolumeControl,
    availableCaptions: availableCaptions,
    audioCaption: audioCaption,
    setAudioCaption: setAudioCaption
  }), (availableCaptions === null || availableCaptions === void 0 ? void 0 : availableCaptions[audioCaption]) && /*#__PURE__*/React.createElement(AudioPlayerCaptionText, {
    captions: availableCaptions[audioCaption],
    audioTime: audioTime
  })));
};

AudioPlayer.propTypes = {
  /**
   * Media ID from Kaltura media platform.
   */
  audioId: PropTypes.string.isRequired,

  /**
   * The CSS class name to apply.
   */
  customClassName: PropTypes.string,

  /**
   * `true` to autoplay the audio on load
   */
  autoPlay: PropTypes.bool,

  /**
   * `true` to show the playback rate button.
   */
  showPlaybackRateMenu: PropTypes.bool,

  /**
   * `true` to show the captions object.
   */
  showCaptionMenu: PropTypes.bool,

  /**
   * The available speed multiplier for playback rate
   * example: [1, 1.5, 2]
   */
  availablePlaybackRates: PropTypes.arrayOf(PropTypes.number)
  /**
   * The CSS class name to apply.
   */

};
AudioPlayer.defaultProps = {
  customClassName: '',
  autoPlay: false,
  showCaptionMenu: true,
  showPlaybackRateMenu: true,
  availablePlaybackRates: [1, 1.5, 2]
};
export default !DDS_AUDIO_PLAYER ? undefined : AudioPlayer;