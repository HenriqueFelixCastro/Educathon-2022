import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "definition"];

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import PropTypes from 'prop-types';
import React, { useState } from 'react';
import { Popover, PopoverContent } from '../../Popover';
import { match, keys } from '../../../internal/keyboard';
import { usePrefix } from '../../../internal/usePrefix';
import { useId } from '../../../internal/useId';

function DefinitionTooltip(_ref) {
  var children = _ref.children,
      definition = _ref.definition,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var prefix = usePrefix();
  var id = useId();

  function handleKeyDown(event) {
    if (isOpen && match(event, keys.Escape)) {
      event.stopPropagation();
      setOpen(false);
    }
  }

  return /*#__PURE__*/React.createElement(Popover, {
    align: "bottom-left",
    dropShadow: false,
    highContrast: true,
    onMouseLeave: function onMouseLeave() {
      setOpen(false);
    },
    open: isOpen
  }, /*#__PURE__*/React.createElement("button", _extends({
    className: "".concat(prefix, "--definition-term")
  }, rest, {
    "aria-controls": id,
    "aria-expanded": isOpen,
    onBlur: function onBlur() {
      setOpen(false);
    },
    onClick: function onClick() {
      setOpen(!isOpen);
    },
    onKeyDown: handleKeyDown,
    type: "button"
  }), children), /*#__PURE__*/React.createElement(PopoverContent, {
    className: "".concat(prefix, "--definition-tooltip"),
    id: id
  }, definition));
}

DefinitionTooltip.propTypes = {
  /**
   * Provide the content being defined
   */
  children: PropTypes.node,

  /**
   * Provide the content being defined
   */
  definition: PropTypes.string.isRequired
};
export { DefinitionTooltip };