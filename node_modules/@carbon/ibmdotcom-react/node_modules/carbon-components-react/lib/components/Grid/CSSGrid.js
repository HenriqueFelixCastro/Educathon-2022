"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CSSGrid = CSSGrid;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _usePrefix = require("../../internal/usePrefix");

var _GridContext = require("./GridContext");

var _excluded = ["as", "condensed", "fullWidth", "columns", "className", "children"];

function CSSGrid(_ref) {
  var _cx;

  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,
      _ref$condensed = _ref.condensed,
      condensed = _ref$condensed === void 0 ? false : _ref$condensed,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      _ref$columns = _ref.columns,
      columns = _ref$columns === void 0 ? 16 : _ref$columns,
      containerClassName = _ref.className,
      children = _ref.children,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  var _useGridSettings = (0, _GridContext.useGridSettings)(),
      subgrid = _useGridSettings.subgrid;

  var className = (0, _classnames.default)(containerClassName, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid"), !subgrid), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid--").concat(columns), !subgrid && columns !== 16), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid--condensed"), condensed), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid--full-width"), fullWidth), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--subgrid"), subgrid), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--col-span-").concat(columns), subgrid && columns !== 16 || columns !== 16), _cx));
  return /*#__PURE__*/_react.default.createElement(_GridContext.GridSettings, {
    mode: "css-grid",
    subgrid: true
  }, /*#__PURE__*/_react.default.createElement(BaseComponent, (0, _extends2.default)({
    className: className
  }, rest), children));
}

CSSGrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Pass in content that will be rendered within the `Grid`
   */
  children: _propTypes.default.node,

  /**
   * Specify a custom className to be applied to the `Grid`
   */
  className: _propTypes.default.string,

  /**
   * Specify how many columns wide the Grid should span
   */
  columns: _propTypes.default.number,

  /**
   * Collapse the gutter to 1px. Useful for fluid layouts.
   * Rows have 1px of margin between them to match gutter.
   */
  condensed: _propTypes.default.bool,

  /**
   * Remove the default max width that the grid has set
   */
  fullWidth: _propTypes.default.bool
};