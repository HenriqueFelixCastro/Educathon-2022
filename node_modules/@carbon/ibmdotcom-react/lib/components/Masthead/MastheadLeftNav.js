"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _HeaderSideNavItems = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderSideNavItems"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _SideNav = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNav"));

var _SideNavItems = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNavItems"));

var _SideNavMenu = _interopRequireDefault(require("../carbon-components-react/UIShell/SideNavMenu"));

var _SideNavMenuItem = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SideNavMenuItem"));

var _SideNavMenuSection = _interopRequireDefault(require("../carbon-components-react/UIShell/SideNavMenuSection"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * Masthead left nav component.
 */

var MastheadLeftNav = function MastheadLeftNav(_ref) {
  var backButtonText = _ref.backButtonText,
      navigation = _ref.navigation,
      isSideNavExpanded = _ref.isSideNavExpanded,
      platform = _ref.platform,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["backButtonText", "navigation", "isSideNavExpanded", "platform"]);

  /**
   * checks if menu item's children url match the current url path, if so return the menu item and its children
   * will set the selected state for entire hierarchy of menu items
   *
   * @returns {object} selectedItems
   */
  // eslint-disable-next-line class-methods-use-this
  var _selectedLeftNavItems = function _selectedLeftNavItems() {
    var matchFound = false;
    var selectedItems = {
      level0: '',
      level1: '',
      level2: ''
    };
    return function (_ref2) {
      var _root$location;

      var _ref2$menu = _ref2.menu,
          menu = _ref2$menu === void 0 ? [{
        url: '',
        megapanelContent: {
          quickLinks: {
            links: [{
              url: ''
            }]
          }
        }
      }] : _ref2$menu,
          _ref2$key = _ref2.key,
          key = _ref2$key === void 0 ? '' : _ref2$key,
          _ref2$parentItemUrl = _ref2.parentItemUrl,
          parentItemUrl = _ref2$parentItemUrl === void 0 ? '' : _ref2$parentItemUrl;
      var currentUrlPath = (_root$location = _windowOrGlobal.default.location) === null || _root$location === void 0 ? void 0 : _root$location.href;

      if (!matchFound) {
        if (parentItemUrl === currentUrlPath) {
          selectedItems.level0 = "".concat(key);
          matchFound = true;
        } // check if child url matches current url path
        else {
            for (var i = 0; i < (menu === null || menu === void 0 ? void 0 : menu.length); i++) {
              var _menu$i;

              if (((_menu$i = menu[i]) === null || _menu$i === void 0 ? void 0 : _menu$i.url) === currentUrlPath) {
                selectedItems.level0 = "".concat(key);
                selectedItems.level1 = "".concat(key, "-").concat(i);
                matchFound = true;
                break;
              } else {
                var _menu$i2, _menu$i2$megapanelCon, _menu$i2$megapanelCon2;

                var links = (_menu$i2 = menu[i]) === null || _menu$i2 === void 0 ? void 0 : (_menu$i2$megapanelCon = _menu$i2.megapanelContent) === null || _menu$i2$megapanelCon === void 0 ? void 0 : (_menu$i2$megapanelCon2 = _menu$i2$megapanelCon.quickLinks) === null || _menu$i2$megapanelCon2 === void 0 ? void 0 : _menu$i2$megapanelCon2.links;

                for (var k = 0; k < (links === null || links === void 0 ? void 0 : links.length); k++) {
                  var _links$k;

                  if (((_links$k = links[k]) === null || _links$k === void 0 ? void 0 : _links$k.url) === currentUrlPath) {
                    selectedItems.level0 = "".concat(key);
                    selectedItems.level1 = "".concat(key, "-").concat(i);
                    selectedItems.level2 = "".concat(key, "-").concat(i, "-").concat(k);
                    matchFound = true;
                    break;
                  }
                }
              }
            }
          }

        return selectedItems;
      }

      return selectedItems;
    };
  };

  var selectedUrlCheck = _selectedLeftNavItems();
  /**
   * Keep track of which menu section is visible/expanded and ties current visible panel
   * back to its parent menu panel
   *
   * Example interaction and menuState change:
   * 1. When left nav is first opened - default state --> {level0: -1, level1: -1}
   * 2. User then clicks on first menu item (item index is 0) --> {level0: 0, level1: -1}
   * 3. User then clicks on second menu item (item index is 1) of current visible panel --> {level0: 0, level1: 1}
   * 4. User then clicks back button --> {level0: 0, level1: -1}
   * 5. User then clicks back button again, going back to first panel --> {level0: -1, level1: -1}
   */


  var _useState = (0, _react.useState)({
    level0: -1,
    level1: -1
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      menuState = _useState2[0],
      setMenuState = _useState2[1]; // reset the left nav to default menu section when closed


  (0, _react.useEffect)(function () {
    if (!isSideNavExpanded) {
      setMenuState({
        level0: -1,
        level1: -1
      });
    }
  }, [isSideNavExpanded]);
  var sideNavRef = (0, _react.useRef)();
  var level0Items = [];
  var level1Items = [];

  var sideNav = function sideNav() {
    var _sideNavRef$current;

    var selectedItems;
    navigation.map(function (link, i) {
      var _link$menuSections, _link$menuSections$, _link$menuSections2;

      var dataTitle = link.titleEnglish ? link.titleEnglish.replace(/[^-a-zA-Z0-9_ ]/g, '').replace(/ +/g, '-').toLowerCase() : null;
      var autoid = "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__").concat(rest.hasL1Data ? 'l1' : 'l0', "-nav").concat(i);
      var menuItems = (_link$menuSections = link.menuSections) === null || _link$menuSections === void 0 ? void 0 : (_link$menuSections$ = _link$menuSections[0]) === null || _link$menuSections$ === void 0 ? void 0 : _link$menuSections$.menuItems;
      selectedItems = selectedUrlCheck({
        menu: menuItems,
        key: i,
        parentItemUrl: link.url
      });

      if (link.hasMenu || link.hasMegaPanel || ((_link$menuSections2 = link.menuSections) === null || _link$menuSections2 === void 0 ? void 0 : _link$menuSections2.length) !== 0) {
        var _selectedItems;

        level1Items.push({
          title: link.title,
          autoid: autoid,
          parentKey: i,
          sections: link.menuSections
        });
        level0Items.push( /*#__PURE__*/_react.default.createElement(_SideNavMenu.default, {
          autoid: autoid,
          dataTitle: dataTitle,
          key: link.title,
          title: link.title,
          selected: !rest.selectedMenuItem ? ((_selectedItems = selectedItems) === null || _selectedItems === void 0 ? void 0 : _selectedItems.level0) === "".concat(i) : rest.selectedMenuItem === link.titleEnglish,
          onToggle: function onToggle() {
            return setMenuState(_objectSpread(_objectSpread({}, menuState), {}, {
              level0: i
            }));
          },
          isSideNavExpanded: i === menuState.level0 && menuState.level1 == -1
        }));
      } else {
        var _selectedItems2;

        level0Items.push( /*#__PURE__*/_react.default.createElement(_SideNavMenuItem.default, {
          href: link.url,
          className: (!rest.selectedMenuItem ? ((_selectedItems2 = selectedItems) === null || _selectedItems2 === void 0 ? void 0 : _selectedItems2.level0) === "".concat(i) : rest.selectedMenuItem === link.titleEnglish) && "".concat(prefix, "--masthead__side-nav--submemu--selected") || null,
          "data-autoid": autoid,
          key: link.title,
          role: "menuitem"
        }, link.title));
      }
    });

    var level1 = _renderLevel1Submenus(level1Items, backButtonText, setMenuState, menuState, rest.navType, rest.selectedMenuItem, selectedItems);

    var level2Submenus = _renderLevel2Submenus(level1.submenus, backButtonText, setMenuState, menuState, rest.navType, rest.selectedMenuItem, selectedItems);

    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_SideNavMenuSection.default, {
      id: "panel__(-1,-1)",
      focusNode: (_sideNavRef$current = sideNavRef.current) === null || _sideNavRef$current === void 0 ? void 0 : _sideNavRef$current.parentNode.querySelector(".".concat(prefix, "--header__menu-toggle")),
      show: menuState.level0 === -1
    }, level0Items), level1.menuSections, level2Submenus);
  };

  return /*#__PURE__*/_react.default.createElement(_SideNav.default, {
    "aria-label": "Side navigation",
    expanded: isSideNavExpanded,
    isPersistent: false,
    ref: sideNavRef,
    onOverlayClick: rest.onOverlayClick
  }, /*#__PURE__*/_react.default.createElement("nav", {
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0")
  }, platform && /*#__PURE__*/_react.default.createElement("a", {
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(rest.navType, "-sidenav__l0-productname"),
    href: platform.url,
    "aria-haspopup": "true",
    className: (0, _classnames.default)("".concat(prefix, "--side-nav__submenu"), "".concat(prefix, "--side-nav__submenu-platform"))
  }, platform.name), /*#__PURE__*/_react.default.createElement(_SideNavItems.default, null, /*#__PURE__*/_react.default.createElement(_HeaderSideNavItems.default, null, sideNav()))));
};
/**
 * Loops through and renders a list of links for the side nav
 *
 * @param {Array} menuItems menu items
 * @param {string} backButtonText back button text
 * @param {Function} setMenuState setState func
 * @param {object} menuState currrent menu that is visible
 * @param {string} navType navigation type
 * @param {string} selectedMenuItem inputted selected menu item
 * @param {object} selectedItems selected menu items based on url
 *
 * @returns {object} JSX object
 */


function _renderLevel1Submenus(menuItems, backButtonText, setMenuState, menuState, navType, selectedMenuItem, selectedItems) {
  // gather submenu items for next level
  var submenus = [];
  var sideNavMenuSections = menuItems.map(function (menu, i) {
    var _menu$sections, _cx, _menu$sections2, _menu$sections2$;

    // get array of highlighted menu items to render first
    var highlightedItems = [];
    var items = [];
    (_menu$sections = menu.sections) === null || _menu$sections === void 0 ? void 0 : _menu$sections[0].menuItems.forEach(function (item) {
      if (item.highlighted) return highlightedItems.push(item);
      return items.push(item);
    });
    var sortedMenu = highlightedItems.concat(items);
    var highlightedCount = highlightedItems.length;
    return /*#__PURE__*/_react.default.createElement(_SideNavMenuSection.default, {
      isSubmenu: true,
      className: (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__menu-section-submenu"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__menu-section-submenu--expanded"), menuState.level0 === menu.parentKey && menuState.level1 >= 0), _cx)),
      id: "panel__(".concat(menu.parentKey, ",-1)"),
      heading: (_menu$sections2 = menu.sections) === null || _menu$sections2 === void 0 ? void 0 : (_menu$sections2$ = _menu$sections2[0]) === null || _menu$sections2$ === void 0 ? void 0 : _menu$sections2$.heading,
      key: menu.title,
      title: menu.title,
      navType: navType,
      backButtonText: backButtonText,
      onBackClick: function onBackClick() {
        return setMenuState({
          level0: -1,
          level1: -1
        });
      },
      show: menuState.level0 === menu.parentKey && menuState.level1 === -1
    }, sortedMenu.map(function (item, index) {
      var _item$megapanelConten, _item$megapanelConten2, _React$createElement;

      submenus.push({
        title: item.title,
        titleUrl: item.url,
        autoid: "".concat(menu.autoid, "-list").concat(index),
        sections: (_item$megapanelConten = item.megapanelContent) === null || _item$megapanelConten === void 0 ? void 0 : (_item$megapanelConten2 = _item$megapanelConten.quickLinks) === null || _item$megapanelConten2 === void 0 ? void 0 : _item$megapanelConten2.links,
        parentKey: menu.parentKey,
        index: index
      });
      var highlightedClass = highlightedCount !== 0 && index + 1 === highlightedCount && "".concat(prefix, "--masthead__side-nav__last-highlighted") || null;

      if (item.megapanelContent) {
        return /*#__PURE__*/_react.default.createElement(_SideNavMenu.default, {
          autoid: "".concat(menu.autoid, "-list").concat(index),
          title: item.title,
          key: item.title,
          selected: !selectedMenuItem && (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.level1) === "".concat(menu.parentKey, "-").concat(index),
          className: highlightedClass,
          onToggle: function onToggle() {
            return setMenuState(_objectSpread(_objectSpread({}, menuState), {}, {
              level1: index
            }));
          },
          isSideNavExpanded: i === menuState.level0 && menuState.level1 == index
        });
      }

      return /*#__PURE__*/_react.default.createElement(_SideNavMenuItem.default, (_React$createElement = {
        href: item.url,
        className: highlightedClass,
        "data-autoid": "".concat(menu.autoid, "-list").concat(index),
        key: item.title
      }, (0, _defineProperty2.default)(_React$createElement, "className", !selectedMenuItem && (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.level1) === "".concat(menu.parentKey, "-").concat(index) && "".concat(prefix, "--masthead__side-nav--submemu--selected") || null), (0, _defineProperty2.default)(_React$createElement, "role", "menuitem"), _React$createElement), item.title);
    }));
  });
  return {
    menuSections: sideNavMenuSections,
    submenus: submenus
  };
}
/**
 * Loops through and renders a list of links for the side nav
 *
 * @param {Array} menuItems menu items
 * @param {string} backButtonText back button text
 * @param {Function} setMenuState setState func
 * @param {object} menuState currrent menu that is visible
 * @param {string} navType navigation type
 * @param {string} selectedMenuItem inputted selected menu item
 * @param {object} selectedItems selected menu items based on url
 *
 * @returns {object} JSX object
 */


function _renderLevel2Submenus(menuItems, backButtonText, setMenuState, menuState, navType, selectedMenuItem, selectedItems) {
  var sideNavMenuSections = menuItems.map(function (menu) {
    var _menu$sections3;

    return /*#__PURE__*/_react.default.createElement(_SideNavMenuSection.default, {
      isSubmenu: true,
      className: "".concat(prefix, "--side-nav__menu-section-submenu"),
      id: "panel__(".concat(menu.parentKey, ",").concat(menu.index, ")"),
      key: menu.title,
      title: menu.title,
      titleUrl: menu.titleUrl,
      navType: navType,
      backButtonText: backButtonText,
      onBackClick: function onBackClick() {
        return setMenuState(_objectSpread(_objectSpread({}, menuState), {}, {
          level1: -1
        }));
      },
      show: menuState.level0 === menu.parentKey && menuState.level1 === menu.index
    }, (_menu$sections3 = menu.sections) === null || _menu$sections3 === void 0 ? void 0 : _menu$sections3.map(function (item, k) {
      return /*#__PURE__*/_react.default.createElement(_SideNavMenuItem.default, {
        href: item.url,
        "data-autoid": "".concat(menu.autoid, "-item").concat(k),
        key: item.title,
        className: !selectedMenuItem && (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.level2) === "".concat(menu.parentKey, "-").concat(menu.index, "-").concat(k) && "".concat(prefix, "--masthead__side-nav--submemu--selected") || null,
        role: "menuitem"
      }, item.title);
    }));
  });
  return sideNavMenuSections;
}

MastheadLeftNav.propTypes = {
  /**
   * Back button text
   */
  backButtonText: _propTypes.default.string,

  /**
   * Object containing left navigation elements.
   */
  navigation: _propTypes.default.arrayOf(_propTypes.default.shape({
    hasMenu: _propTypes.default.bool,
    title: _propTypes.default.string,
    url: _propTypes.default.string,
    menuSections: _propTypes.default.arrayOf(_propTypes.default.shape({
      menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
        title: _propTypes.default.string,
        url: _propTypes.default.string
      }))
    }))
  })),

  /**
   * `true` to make the sidenav expanded.
   */
  isSideNavExpanded: _propTypes.default.bool,

  /**
   * Platform object with name and url
   */
  platform: _propTypes.default.shape({
    name: _propTypes.default.string,
    url: _propTypes.default.string
  })
};
MastheadLeftNav.defaultProps = {
  backButtonText: 'Back'
};
var _default = MastheadLeftNav;
exports.default = _default;