"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
/**
 * Renders the input bar with the search icon.
 */

var MastheadSearchInput = function MastheadSearchInput(_ref) {
  var componentInputProps = _ref.componentInputProps,
      dispatch = _ref.dispatch,
      isActive = _ref.isActive,
      disableFocus = _ref.disableFocus;
  var searchRef = (0, _react.useRef)();
  /**
   * Clear search and clear input when called
   */

  var resetSearch = (0, _react.useCallback)(function () {
    dispatch({
      type: 'setSearchClosed'
    });
    dispatch({
      type: 'setVal',
      payload: {
        val: ''
      }
    });
  }, [dispatch]);
  /**
   * emit custom event for search input enter keypress
   */

  var handleSearchEnter = function handleSearchEnter(event) {
    if (event.key === 'Enter') {
      var onSearchEnter = new CustomEvent('onSearchEnter', {
        bubbles: true,
        detail: {
          value: event.target.value
        }
      });
      event.currentTarget.dispatchEvent(onSearchEnter);
    }
  };

  (0, _react.useEffect)(function () {
    if (isActive) {
      if (!disableFocus) {
        searchRef.current && searchRef.current.focus();
      }

      _windowOrGlobal.default.document.addEventListener('keyup', handleSearchEnter, true);

      return function () {
        _windowOrGlobal.default.document.removeEventListener('keyup', handleSearchEnter, true);
      };
    } else resetSearch();
  }, [isActive, disableFocus, resetSearch]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, componentInputProps, {
    "data-autoid": "".concat(stablePrefix, "--header__search--input"),
    ref: searchRef,
    name: "q",
    tabIndex: isActive ? null : '-1'
  })));
};

MastheadSearchInput.propTypes = {
  /**
   * The input props.
   */
  componentInputProps: _propTypes.default.object,

  /**
   * The Redux action dispatcher to control `<MastheadSearch>`.
   */
  dispatch: _propTypes.default.func,

  /**
   * `true` to make the search active.
   */
  isActive: _propTypes.default.bool,

  /**
   * Executes when the search icon is clicked.
   */
  searchIconClick: _propTypes.default.func,

  /**
   * Boolean to prevent focusing on the input if open on load, focus normally upon reopen.
   */
  disableFocus: _propTypes.default.bool
};
MastheadSearchInput.defaultProps = {
  componentInputProps: {},
  dispatch: function dispatch() {},
  searchIconClick: function searchIconClick() {}
};
var _default = MastheadSearchInput;
exports.default = _default;