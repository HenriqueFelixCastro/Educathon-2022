"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _layout = require("@carbon/layout");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FeatureFlags = require("../../internal/FeatureFlags");

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _deprecate = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/deprecate/deprecate.js"));

var _global = require("../../internal/vendor/@carbon/ibmdotcom-services/services/global/global");

var _Header = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/Header"));

var _HeaderContainer = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderContainer"));

var _HeaderGlobalBar = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderGlobalBar"));

var _HeaderMenuButton = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderMenuButton"));

var _Icon = require("../Icon");

var _MastheadL = _interopRequireDefault(require("./MastheadL1"));

var _MastheadLeftNav = _interopRequireDefault(require("./MastheadLeftNav"));

var _MastheadProfile = _interopRequireDefault(require("./MastheadProfile"));

var _MastheadSearch = _interopRequireDefault(require("./MastheadSearch"));

var _MastheadTopNav = _interopRequireDefault(require("./MastheadTopNav"));

var _Profile = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-services/services/Profile/Profile"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _SkipToContent = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/SkipToContent"));

var _Translation = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-services/services/Translation/Translation"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/user/20"));

var _2 = _interopRequireDefault(require("@carbon/icons-react/lib/user--online/20"));

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;

var gridBreakpoint = parseFloat(_layout.breakpoints.lg.width) * _layout.baseFontSize;
/**
 * MastHead component
 *
 * @param {object} props React props object
 * @param {object} props.navigation Object containing navigation elements
 * @param {boolean} props.hasProfile Determines whether to render Profile component
 * @param {boolean} props.hasSearch Determines whether to render Search Bar
 * @param {boolean} props.searchOpenOnload Determines if the search field is open on page load
 * @param {string} props.placeHolderText Placeholder value for search input
 * @param {string} props.initialSearchTerm Initial value for search input
 * @param {object} props.platform Platform name that appears on L0.
 * @param {string} props.title Title for the masthead L1
 * @param {string} props.eyebrowText Text for the eyebrow link in masthead L1
 * @param {string} props.eyebrowLink URL for the eyebrow link in masthead L1
 * @param {string} props.selectedMenuItem L0/L1 menu item to render with selected state
 * @returns {*} Masthead component
 */


var Masthead = function Masthead(_ref) {
  var _cx;

  var navigation = _ref.navigation,
      hasProfile = _ref.hasProfile,
      hasSearch = _ref.hasSearch,
      searchOpenOnload = _ref.searchOpenOnload,
      placeHolderText = _ref.placeHolderText,
      initialSearchTerm = _ref.initialSearchTerm,
      platform = _ref.platform,
      mastheadL1Data = _ref.mastheadL1Data,
      selectedMenuItem = _ref.selectedMenuItem,
      mastheadProps = (0, _objectWithoutProperties2.default)(_ref, ["navigation", "hasProfile", "hasSearch", "searchOpenOnload", "placeHolderText", "initialSearchTerm", "platform", "mastheadL1Data", "selectedMenuItem"]);

  /**
   * Returns IBM.com authenticated status
   *
   * @param {boolean} isAuthenticated Whether the user is authenticated to IBM.com
   * @returns {*} The user status
   */
  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isAuthenticated = _useState2[0],
      setStatus = _useState2[1];
  /**
   * Returns state of search status
   *
   * @param {boolean} isSearchActive Whether the search bar is open
   * @returns {*} The active search status
   */


  var _useState3 = (0, _react.useState)(searchOpenOnload),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isSearchActive = _useState4[0],
      setIsSearchActive = _useState4[1];

  var searchIconButton = (0, _react.useRef)(null);
  var handleChangeSearchActive = (0, _react.useCallback)(function (event, _ref2) {
    var isOpen = _ref2.isOpen;
    setIsSearchActive(isOpen);
    setTimeout(function () {
      searchIconButton.current.focus();
    }, 0);
  }, []);
  (0, _react.useEffect)(function () {
    // initialize global execution calls
    (0, _global.globalInit)();
  }, []);
  (0, _react.useEffect)(function () {
    var unmounted = false;
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var status;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _Profile.default.getUserStatus();

            case 2:
              status = _context.sent;

              if (!unmounted) {
                setStatus(status.user !== 'Unauthenticated');
              }

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
    return function () {
      unmounted = true;
    };
  }, []);

  var _useState5 = (0, _react.useState)([]),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      mastheadData = _useState6[0],
      setMastheadData = _useState6[1];

  var _useState7 = (0, _react.useState)({
    signedin: [],
    signedout: []
  }),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      profileData = _useState8[0],
      setProfileData = _useState8[1];

  (0, _react.useEffect)(function () {
    var unmounted = false;
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      var pageData;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return _Translation.default.getTranslation();

            case 3:
              pageData = _context2.sent;

              if (!unmounted) {
                setMastheadData(pageData.mastheadNav.links);
                setProfileData(pageData.profileMenu);
              }

              _context2.next = 10;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              console.error('Error populating masthead data:', _context2.t0);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 7]]);
    }))();
    return function () {
      unmounted = true;
    };
  }, []);
  /**
   * Forces profile menu position to fixed to prevent scrolling
   *
   */

  var _setProfileListPosition = function _setProfileListPosition() {
    var profileMenuList = document.querySelector(".".concat(prefix, "--masthead__profile-item"));
    profileMenuList.closest('ul').style.position = 'fixed';
    profileMenuList.closest('ul').style.top = '48px';
  };

  var stickyRef = (0, _react.useRef)(null);
  var mastheadL1Ref = (0, _react.useRef)(null);
  var headerSearchClasses = (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--masthead__platform"), platform), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--masthead__header--search-active"), isSearchActive), _cx));
  (0, _react.useEffect)(function () {
    var tableOfContents = document.querySelector('.bx--tableofcontents__sidebar');
    var lastScrollPosition = 0;
    /**
     * Sets sticky masthead. If both L0 and L1 are present, L1 will be sticky.
     *
     */

    var handleScroll = _windowOrGlobal.default.addEventListener('scroll', function () {
      /**
       * L0 will hide on scroll down, show on scroll up
       *
       */
      if (mastheadL1Ref.current != null && tableOfContents != null) {
        var tocBoundingClient = tableOfContents.getBoundingClientRect();
        var mobileMastheadTop = Math.round(Math.min(0, tocBoundingClient.top - stickyRef.current.offsetHeight));
        var tocPosition = tocBoundingClient.top + lastScrollPosition - window.scrollY;
        tableOfContents.style.top = "".concat(Math.max(Math.min(tocPosition, stickyRef.current.offsetHeight), 0), "px");
        var regularMastheadTop = window.scrollY < lastScrollPosition ? 0 : -Math.min(stickyRef.current.offsetHeight - mastheadL1Ref.current.offsetHeight, Math.abs(mobileMastheadTop));
        var mastheadTop = window.innerWidth < gridBreakpoint ? mobileMastheadTop : regularMastheadTop;
        stickyRef.current.style.top = "".concat(mastheadTop, "px");
        stickyRef.current.style.transition = 'none';
        /**
         * L0 will hide on scroll down, show up on scroll up when mobile ToC is present
         */
      } else if (tableOfContents != null && stickyRef.current !== null && window.innerWidth < gridBreakpoint) {
        var _tocBoundingClient = tableOfContents.getBoundingClientRect();

        stickyRef.current.style.transition = "none";

        var _mastheadTop = Math.round(Math.min(0, _tocBoundingClient.top - stickyRef.current.offsetHeight));

        var _tocPosition = _tocBoundingClient.top + lastScrollPosition - window.scrollY;

        tableOfContents.style.top = "".concat(Math.max(Math.min(_tocPosition, stickyRef.current.offsetHeight), 0), "px");

        if (tableOfContents.style.top === '0px') {
          stickyRef.current.style.top = "-".concat(stickyRef.current.offsetHeight, "px");
        } else if (tableOfContents.style.top === "".concat(stickyRef.current.offsetHeight, "px")) {
          stickyRef.current.style.top = '0';
        } else {
          stickyRef.current.style.top = "".concat(_mastheadTop, "px");
        }
      }

      lastScrollPosition = window.scrollY;
    });

    return function () {
      _windowOrGlobal.default.removeEventListener('scroll', function () {
        return handleScroll;
      });
    };
  });

  if (navigation) {
    switch ((0, _typeof2.default)(navigation)) {
      case 'default':
        // eslint-disable-next-line
        mastheadData = mastheadData;
        break;

      case 'object':
        mastheadData = navigation;
        break;

      default:
        break;
    }
  } // set navigation type (default, alternate, or ecosystem) for autoids


  var navType;

  if (!navigation && !platform) {
    navType = 'alt';
  } else if (navigation && !platform) {
    navType = 'default';
  } else if (platform) {
    navType = 'eco';
  }
  /**
   * checks if there is a child item in the menu section that matches current url and returns true for first valid result
   *
   * @returns {boolean} function that returns true or false
   */
  // eslint-disable-next-line class-methods-use-this


  var _hasCurrentUrl = function _hasCurrentUrl() {
    var matchFound = false;
    return function (sections, currentUrlPath) {
      if (!matchFound) {
        var _sections$menuSection;

        if (sections.url === currentUrlPath) {
          matchFound = true;
        } else if (sections === null || sections === void 0 ? void 0 : (_sections$menuSection = sections.menuSections) === null || _sections$menuSection === void 0 ? void 0 : _sections$menuSection[0]) {
          var _sections$menuSection2 = sections === null || sections === void 0 ? void 0 : sections.menuSections[0],
              menuItems = _sections$menuSection2.menuItems;

          for (var i = 0; i < menuItems.length; i++) {
            var _menuItems$i, _menuItems$i2, _menuItems$i2$megapan, _menuItems$i2$megapan2, _menuItems$i2$megapan3;

            if (((_menuItems$i = menuItems[i]) === null || _menuItems$i === void 0 ? void 0 : _menuItems$i.url) === currentUrlPath || ((_menuItems$i2 = menuItems[i]) === null || _menuItems$i2 === void 0 ? void 0 : (_menuItems$i2$megapan = _menuItems$i2.megapanelContent) === null || _menuItems$i2$megapan === void 0 ? void 0 : (_menuItems$i2$megapan2 = _menuItems$i2$megapan.quickLinks) === null || _menuItems$i2$megapan2 === void 0 ? void 0 : (_menuItems$i2$megapan3 = _menuItems$i2$megapan2.links) === null || _menuItems$i2$megapan3 === void 0 ? void 0 : _menuItems$i2$megapan3.filter(function (link) {
              return link.url === currentUrlPath;
            }).length)) {
              matchFound = true;
            }
          }
        }

        return matchFound;
      }

      return false;
    };
  };

  return /*#__PURE__*/_react.default.createElement(_HeaderContainer.default, {
    render: function render(_ref5) {
      var _mastheadL1Data$navig;

      var isSideNavExpanded = _ref5.isSideNavExpanded,
          onClickSideNavExpand = _ref5.onClickSideNavExpand;

      if (isSideNavExpanded) {
        var _root$document, _root$document$body;

        (_root$document = _windowOrGlobal.default.document) === null || _root$document === void 0 ? void 0 : (_root$document$body = _root$document.body) === null || _root$document$body === void 0 ? void 0 : _root$document$body.classList.add("".concat(prefix, "--body__lock-scroll"));
      } else {
        var _root$document2, _root$document2$body;

        (_root$document2 = _windowOrGlobal.default.document) === null || _root$document2 === void 0 ? void 0 : (_root$document2$body = _root$document2.body) === null || _root$document2$body === void 0 ? void 0 : _root$document2$body.classList.remove("".concat(prefix, "--body__lock-scroll"));
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefix, "--masthead"),
        ref: stickyRef
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefix, "--masthead__l0")
      }, /*#__PURE__*/_react.default.createElement(_Header.default, {
        "aria-label": "IBM",
        "data-autoid": "".concat(stablePrefix, "--masthead")
      }, /*#__PURE__*/_react.default.createElement(_SkipToContent.default, null), (mastheadL1Data || navigation) && /*#__PURE__*/_react.default.createElement(_HeaderMenuButton.default, {
        "aria-label": isSideNavExpanded ? 'Close menu' : 'Open menu',
        "data-autoid": "".concat(stablePrefix, "--masthead-").concat(navType, "-sidenav__l0-menu"),
        onClick: onClickSideNavExpand,
        isActive: isSideNavExpanded,
        className: headerSearchClasses,
        onBlur: function onBlur(e) {
          var platform = e.target.parentElement.querySelector("nav .".concat(prefix, "--side-nav__submenu-platform"));
          var firstMenuItem = e.target.parentElement.querySelector(".".concat(prefix, "--side-nav__menu-section--expanded li:first-of-type button")) || e.target.parentElement.querySelector(".".concat(prefix, "--side-nav__menu-section--expanded li:first-of-type a"));
          var lastMenuItem = e.target.parentElement.querySelector(".".concat(prefix, "--side-nav__menu-section--expanded li:last-of-type button")) || e.target.parentElement.querySelector(".".concat(prefix, "--side-nav__menu-section--expanded li:last-of-type a"));
          if (e.relatedTarget && e.relatedTarget !== firstMenuItem && e.relatedTarget !== platform) return lastMenuItem.focus();
        }
      }), (navigation || mastheadL1Data) && /*#__PURE__*/_react.default.createElement(_MastheadLeftNav.default, (0, _extends2.default)({}, mastheadProps, {
        backButtonText: "Back",
        platform: platform,
        hasL1Data: !!mastheadL1Data,
        navigation: (_mastheadL1Data$navig = mastheadL1Data === null || mastheadL1Data === void 0 ? void 0 : mastheadL1Data.navigationL1) !== null && _mastheadL1Data$navig !== void 0 ? _mastheadL1Data$navig : mastheadData,
        isSideNavExpanded: isSideNavExpanded,
        navType: navType,
        selectedMenuItem: selectedMenuItem,
        onOverlayClick: onClickSideNavExpand
      })), /*#__PURE__*/_react.default.createElement(_Icon.IbmLogo, {
        logoData: mastheadProps.mastheadLogo,
        autoid: "".concat(stablePrefix, "--masthead-").concat(navType, "__l0-logo"),
        isSearchActive: isSearchActive
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefix, "--header__search ").concat(headerSearchClasses)
      }, navigation && !mastheadL1Data && /*#__PURE__*/_react.default.createElement(_MastheadTopNav.default, (0, _extends2.default)({}, mastheadProps, {
        platform: platform,
        navigation: mastheadData,
        navType: navType,
        hasCurrentUrl: _hasCurrentUrl,
        selectedMenuItem: selectedMenuItem
      })), hasSearch && /*#__PURE__*/_react.default.createElement(_MastheadSearch.default, (0, _extends2.default)({}, mastheadProps, searchOpenOnload ? {
        searchOpenOnload: searchOpenOnload
      } : {}, {
        placeHolderText: placeHolderText,
        initialSearchTerm: initialSearchTerm,
        navType: navType,
        isSearchActive: isSearchActive,
        ref: searchIconButton,
        onChangeSearchActive: handleChangeSearchActive
      }))), hasProfile && /*#__PURE__*/_react.default.createElement(_HeaderGlobalBar.default, {
        className: "".concat(prefix, "--header__profile")
      }, /*#__PURE__*/_react.default.createElement(_MastheadProfile.default, (0, _extends2.default)({
        overflowMenuProps: {
          ariaLabel: 'User Profile',
          'data-autoid': "".concat(stablePrefix, "--masthead-").concat(navType, "__l0-account"),
          flipped: true,
          style: {
            width: '3rem'
          },
          onOpen: function onOpen() {
            return _setProfileListPosition();
          },
          renderIcon: function renderIcon() {
            return isAuthenticated ? /*#__PURE__*/_react.default.createElement(_2.default, null) : /*#__PURE__*/_react.default.createElement(_.default, null);
          }
        },
        overflowMenuItemProps: {
          wrapperClassName: "".concat(prefix, "--masthead__profile-item")
        },
        profileMenu: isAuthenticated ? profileData.signedin : profileData.signedout
      }, mastheadProps.customProfileLogin && _FeatureFlags.DDS_CUSTOM_PROFILE_LOGIN ? {
        customProfileLogin: mastheadProps.customProfileLogin
      } : {}, {
        navType: navType
      }))))), mastheadL1Data && /*#__PURE__*/_react.default.createElement("div", {
        ref: mastheadL1Ref
      }, /*#__PURE__*/_react.default.createElement(_MastheadL.default, (0, _extends2.default)({}, mastheadL1Data, {
        platform: platform,
        navType: navType,
        hasCurrentUrl: _hasCurrentUrl,
        selectedMenuItem: selectedMenuItem
      }))));
    }
  });
};

Masthead.propTypes = {
  /**
   * Navigation data object/string for Masthead. These navigation properties belongs to the Masthead L0 Top navigation. Use one from below:
   *
   * | Behavior           | Data Type | Description                                 | Example                             |
   * | ------------------ | --------- | ------------------------------------------- | ----------------------------------- |
   * | default navigation | String    | Default navigation data from IBM.com        | `<Masthead navigation="default" />` |
   * | custom navigation  | Object    | Pass in custom navigation data as an object | `<Masthead navigation={myNavObj}/>` |
   * | none               | null      | No navigation                               | `<Masthead />`                      |
   *
   * `Custom` navigation data must follow the same structure and key names as `default`.
   * See [this](https://1.www.s81c.com/common/carbon-for-ibm-dotcom/translations/masthead-footer/usen.json) for an example.
   */
  navigation: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.shape({
    hasMenu: _propTypes.default.bool,
    title: _propTypes.default.string,
    url: _propTypes.default.string,
    menuSections: _propTypes.default.arrayOf(_propTypes.default.shape({
      menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
        title: _propTypes.default.string,
        url: _propTypes.default.string
      }))
    }))
  }))]),

  /**
   * `true` to render IBM Profile Menu component.
   */
  hasProfile: _propTypes.default.bool,

  /**
   * Custom login url in masthead profile menu (experimental)
   */
  customProfileLogin: _propTypes.default.string,

  /**
   * `true` to render SearchBar component.
   */
  hasSearch: _propTypes.default.bool,

  /**
   * `true` to have search field open on page load. Does not close `onBlur`
   */
  searchOpenOnload: _propTypes.default.bool,

  /**
   * Platform name that appears on L0.
   * Includes platform name (only available with `default` and `custom navigation`).
   * Object requires `name` and `url`.
   * See [docs](http://www.ibm.com/standards/carbon/react/?path=/docs/components-masthead--default#platform) for more details.
   */
  platform: _propTypes.default.shape({
    name: _propTypes.default.string,
    url: _propTypes.default.string
  }),

  /**
   * L0 menu item to render with selected state. Needs to match `titleEnglish` field from nav data.
   */
  selectedMenuItem: _propTypes.default.string,

  /**
   * Placeholder value for search input.
   */
  placeHolderText: _propTypes.default.string,

  /**
   * Initial value for search input.
   */
  initialSearchTerm: _propTypes.default.string,

  /**
   * All the data that goes to the L1 of the Masthead.
   */
  mastheadL1Data: _propTypes.default.shape({
    /**
     * Platform name that appears on L1.
     * Includes platform name
     * Object requires `name` and `url`.
     * See [docs](http://www.ibm.com/standards/carbon/react/?path=/docs/components-masthead--default#platform) for more details.
     */
    platform: _propTypes.default.shape({
      name: _propTypes.default.string,
      url: _propTypes.default.string
    }),

    /**
     * Text for the eyebrow link in masthead L1 (experimental).
     */
    eyebrowText: _propTypes.default.string,

    /**
     * URL for the eyebrow link in masthead L1 (experimental).
     */
    eyebrowLink: _propTypes.default.string,

    /**
     * Navigation data object/string for Masthead L1. Use one from below:
     *
     * | Behavior           | Data Type | Description                                 | Example                             |
     * | ------------------ | --------- | ------------------------------------------- | ----------------------------------- |
     * | default navigation | String    | Default navigation data from IBM.com        | `<MastheadL1 navigationL1="default" />` |
     * | custom navigation  | Object    | Pass in custom navigation data as an object | `<MastheadL1 navigationL1={myNavObj}/>` |
     * | none               | null      | No navigation                               | `<MastheadL1 />`                      |
     *
     * `Custom` navigation data must follow the same structure and key names as `default`.
     * See [this](https://1.www.s81c.com/common/carbon-for-ibm-dotcom/translations/masthead-footer/usen.json) for an example.
     */
    navigationL1: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.shape({
      hasMenu: _propTypes.default.bool,
      title: _propTypes.default.string,
      url: _propTypes.default.string,
      menuSections: _propTypes.default.arrayOf(_propTypes.default.shape({
        menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
          title: _propTypes.default.string,
          url: _propTypes.default.string
        }))
      }))
    }))])
  }),

  /**
   * Custom typeahead API function
   */
  customTypeaheadApi: _propTypes.default.func,

  /**
   * Multiple search sections
   */
  multiSection: _propTypes.default.bool
};
Masthead.defaultProps = {
  hasProfile: true,
  hasSearch: true,
  searchOpenOnload: false,
  selectedMenuItem: '',
  platform: null,
  placeHolderText: 'Search all of IBM',
  initialSearchTerm: '',
  mastheadL1Data: null
};

var _default = (0, _deprecate.default)(Masthead, "\n  The React Masthead is now in feature freeze; any new features or enhancements will only be added to the Web Components Masthead. \n  \n  We will continue to address any bugs specific to the React version for the rest of of Carbon for IBM.com v1.\n  \n  Please refer to the Web Components Masthead documentation for further details.\n  https://www.ibm.com/standards/carbon/web-components/?path=/docs/components-masthead--default\n");

exports.default = _default;