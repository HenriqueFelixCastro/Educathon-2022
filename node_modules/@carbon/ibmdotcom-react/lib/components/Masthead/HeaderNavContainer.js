"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _keyboard = require("../../internal/vendor/carbon-components-react/internal/keyboard");

var _react = _interopRequireWildcard(require("react"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/caret--left/20"));

var _2 = _interopRequireDefault(require("@carbon/icons-react/lib/caret--right/20"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _settings = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var prefix = _settings.default.prefix;
/**
 * Header nav container component.
 */

var HeaderNavContainer = function HeaderNavContainer(_ref) {
  var _root$document;

  var children = _ref.children;
  var containerRef = (0, _react.useRef)(null);
  var contentRef = (0, _react.useRef)(null);
  var contentLeftRef = (0, _react.useRef)(null);
  var contentRightRef = (0, _react.useRef)(null);
  var caretLeftRef = (0, _react.useRef)(null);
  var caretRightRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      io = _useState2[0],
      setIO = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      position = _useState4[0],
      setPosition = _useState4[1];

  var buttonSize = 48; // 40px(width) + 8px(gradient)

  var pageIsRTL = ((_root$document = _windowOrGlobal.default.document) === null || _root$document === void 0 ? void 0 : _root$document.dir) === 'rtl';
  var paginateLeft = (0, _react.useCallback)(function () {
    var menuItems = contentRef.current.querySelectorAll('.bx--header__menu-bar > li');

    if (pageIsRTL) {
      for (var i = 0; i < menuItems.length; i++) {
        if (contentRef.current.offsetWidth - menuItems[i].offsetLeft - buttonSize > -parseFloat(window.getComputedStyle(contentRef.current).right)) {
          setPosition(Math.min(-contentRef.current.offsetWidth + containerRef.current.offsetWidth + menuItems[i].offsetLeft - buttonSize, 0));
          contentRef.current.style.right = String(Math.min(-contentRef.current.offsetWidth + containerRef.current.offsetWidth + menuItems[i].offsetLeft - buttonSize, 0)) + 'px';
          break;
        }
      }
    } else {
      for (var _i = 0; _i < menuItems.length; _i++) {
        // checks if first visible item is partially hidden
        if (menuItems[_i].offsetLeft + menuItems[_i].offsetWidth + position >= buttonSize) {
          // checks if there is space for remaining menuItems
          if (menuItems[_i].offsetLeft + menuItems[_i].offsetWidth > containerRef.current.offsetWidth - buttonSize) {
            setPosition(containerRef.current.offsetWidth - menuItems[_i].offsetLeft - menuItems[_i].offsetWidth - buttonSize);
            contentRef.current.style.left = String(containerRef.current.offsetWidth - menuItems[_i].offsetLeft - menuItems[_i].offsetWidth - buttonSize) + 'px';
          } else {
            setPosition(0);
            contentRef.current.style.left = '0px';
          }

          break;
        }
      }
    }
  }, [position, pageIsRTL]);
  var paginateRight = (0, _react.useCallback)(function () {
    var menuItems = contentRef.current.querySelectorAll('.bx--header__menu-bar > li');

    if (pageIsRTL) {
      for (var i = 0; i < menuItems.length; i++) {
        // checks if the right most visible element is partially hidden
        if (contentRef.current.offsetWidth - menuItems[i].offsetLeft > containerRef.current.offsetWidth - buttonSize - position) {
          setPosition(Math.max(-contentRef.current.offsetWidth + menuItems[i].offsetLeft + menuItems[i].offsetWidth + buttonSize, containerRef.current.offsetWidth - contentRef.current.offsetWidth));
          contentRef.current.style.right = String(Math.max(-contentRef.current.offsetWidth + menuItems[i].offsetLeft + menuItems[i].offsetWidth + buttonSize, containerRef.current.offsetWidth - contentRef.current.offsetWidth)) + 'px';
          break;
        }
      }
    } else {
      for (var _i2 = 0; _i2 < menuItems.length; _i2++) {
        if (menuItems[_i2].offsetLeft + menuItems[_i2].offsetWidth + position > containerRef.current.offsetWidth - buttonSize) {
          // checks if there is space for remaining menuItems
          if (contentRef.current.offsetWidth - menuItems[_i2].offsetLeft < containerRef.current.offsetWidth - buttonSize) {
            setPosition(containerRef.current.offsetWidth - contentRef.current.offsetWidth);
            contentRef.current.style.left = String(containerRef.current.offsetWidth - contentRef.current.offsetWidth) + 'px';
          } else {
            setPosition(buttonSize - menuItems[_i2].offsetLeft);
            contentRef.current.style.left = String(buttonSize - menuItems[_i2].offsetLeft) + 'px';
          }

          break;
        }
      }
    }
  }, [position, pageIsRTL]);
  (0, _react.useEffect)(function () {
    if (window.IntersectionObserver) {
      setIO(new IntersectionObserver(function (records) {
        records.forEach(function (record) {
          if (contentLeftRef.current && record.target.classList.contains(contentLeftRef.current.className)) {
            caretLeftRef.current.hidden = record.isIntersecting;
          }

          if (contentRightRef.current && record.target.classList.contains(contentRightRef.current.className)) {
            caretRightRef.current.hidden = record.isIntersecting;
          }
        });
      }, {
        root: containerRef.current,
        threshold: 1
      }));
    }
  }, [setIO]);
  (0, _react.useEffect)(function () {
    var navContent = contentRef.current;

    if (io) {
      navContent.addEventListener('keydown', handleOnKeyDown);
      io.observe(contentLeftRef.current);
      io.observe(contentRightRef.current);
    } else {
      return function () {
        if (io) {
          navContent.removeEventListener('keydown', handleOnKeyDown);
          io.disconnect();
        }
      };
    }
  });
  /**
   * Keyboard event handler for menu items.
   */

  var handleOnKeyDown = function handleOnKeyDown(event) {
    if ((0, _keyboard.matches)(event, [_keyboard.keys.Tab])) {
      if (pageIsRTL) {
        if (event.shiftKey) {
          var _document$activeEleme, _document$activeEleme2, _document$activeEleme3, _document$activeEleme4, _document$activeEleme5, _document$activeEleme6, _document$activeEleme7, _document$activeEleme8;

          if (((_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : (_document$activeEleme2 = _document$activeEleme.parentElement) === null || _document$activeEleme2 === void 0 ? void 0 : _document$activeEleme2.previousSibling) && ((_document$activeEleme3 = document.activeElement) === null || _document$activeEleme3 === void 0 ? void 0 : (_document$activeEleme4 = _document$activeEleme3.parentElement) === null || _document$activeEleme4 === void 0 ? void 0 : (_document$activeEleme5 = _document$activeEleme4.previousSibling) === null || _document$activeEleme5 === void 0 ? void 0 : _document$activeEleme5.offsetLeft) + ((_document$activeEleme6 = document.activeElement) === null || _document$activeEleme6 === void 0 ? void 0 : (_document$activeEleme7 = _document$activeEleme6.parentElement) === null || _document$activeEleme7 === void 0 ? void 0 : (_document$activeEleme8 = _document$activeEleme7.previousSibling) === null || _document$activeEleme8 === void 0 ? void 0 : _document$activeEleme8.offsetWidth) - parseFloat(window.getComputedStyle(contentRef.current).right) + buttonSize > contentRef.current.offsetWidth) {
            paginateLeft();
          }
        } else {
          var _document$activeEleme9, _document$activeEleme10, _document$activeEleme11, _document$activeEleme12, _document$activeEleme13;

          if (((_document$activeEleme9 = document.activeElement) === null || _document$activeEleme9 === void 0 ? void 0 : (_document$activeEleme10 = _document$activeEleme9.parentElement) === null || _document$activeEleme10 === void 0 ? void 0 : _document$activeEleme10.nextSibling) && contentRef.current.offsetWidth - ((_document$activeEleme11 = document.activeElement) === null || _document$activeEleme11 === void 0 ? void 0 : (_document$activeEleme12 = _document$activeEleme11.parentElement) === null || _document$activeEleme12 === void 0 ? void 0 : (_document$activeEleme13 = _document$activeEleme12.nextSibling) === null || _document$activeEleme13 === void 0 ? void 0 : _document$activeEleme13.offsetLeft) > containerRef.current.offsetWidth - buttonSize - position) {
            paginateRight();
          }
        }
      } else {
        if (event.shiftKey) {
          //Focus previous input
          if (document.activeElement.parentElement.previousSibling && document.activeElement.parentElement.previousSibling.offsetLeft + position <= buttonSize) {
            paginateLeft();
          }
        } else {
          //Focus next input
          if (document.activeElement.parentElement.nextSibling && document.activeElement.parentElement.nextSibling.offsetLeft + document.activeElement.parentElement.nextSibling.offsetWidth >= containerRef.current.offsetWidth - buttonSize) {
            paginateRight();
          }
        }
      }
    }
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--header__nav-container"),
    ref: containerRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--header__nav-content"),
    ref: contentRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--sub-content-left"),
    ref: contentLeftRef
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--sub-content-right"),
    ref: contentRightRef
  }), children), /*#__PURE__*/_react.default.createElement("div", {
    ref: caretLeftRef,
    className: "".concat(prefix, "--header__nav-caret-left-container"),
    hidden: true
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "".concat(prefix, "--header__nav-caret-left"),
    "aria-label": "Masthead left caret",
    onClick: paginateLeft,
    tabIndex: "-1",
    "aria-hidden": "true"
  }, pageIsRTL ? /*#__PURE__*/_react.default.createElement(_2.default, null) : /*#__PURE__*/_react.default.createElement(_.default, null)), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--header__nav-caret-left-gradient")
  })), /*#__PURE__*/_react.default.createElement("div", {
    ref: caretRightRef,
    className: "".concat(prefix, "--header__nav-caret-right-container"),
    hidden: true
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--header__nav-caret-right-gradient")
  }), /*#__PURE__*/_react.default.createElement("button", {
    className: "".concat(prefix, "--header__nav-caret-right"),
    "aria-label": "Masthead right caret",
    onClick: paginateRight,
    tabIndex: "-1",
    "aria-hidden": "true"
  }, pageIsRTL ? /*#__PURE__*/_react.default.createElement(_.default, null) : /*#__PURE__*/_react.default.createElement(_2.default, null)))));
};

HeaderNavContainer.propTypes = {
  /**
   * Container for other components.
   */
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node])
};
var _default = HeaderNavContainer;
exports.default = _default;