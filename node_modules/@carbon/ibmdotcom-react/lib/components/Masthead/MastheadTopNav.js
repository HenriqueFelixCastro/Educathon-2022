"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _HeaderMenu = _interopRequireDefault(require("../carbon-components-react/UIShell/HeaderMenu"));

var _HeaderMenuItem = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderMenuItem"));

var _HeaderName = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderName"));

var _HeaderNavContainer = _interopRequireDefault(require("./HeaderNavContainer"));

var _HeaderNavigation = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/UIShell/HeaderNavigation"));

var _MegaMenu = _interopRequireDefault(require("./MastheadMegaMenu/MegaMenu"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * Masthead top nav component.
 */

var MastheadTopNav = function MastheadTopNav(_ref) {
  var navigation = _ref.navigation,
      topNavProps = (0, _objectWithoutProperties2.default)(_ref, ["navigation"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      overlay = _useState2[0],
      setOverlay = _useState2[1];

  var childLinkChecker = topNavProps.hasCurrentUrl();
  (0, _react.useEffect)(function () {
    var _document$querySelect;

    (_document$querySelect = document.querySelector(".".concat(prefix, "--header__menu-bar"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute('role', 'menu');
    document.querySelectorAll(".".concat(prefix, "--header__menu-bar li")).forEach(function (e) {
      e.setAttribute('role', 'menuitem');
      e.querySelector('a').removeAttribute('role');
    });
  }, []);
  /**
   * Top masthead navigation
   *
   * @returns {*} Top masthead navigation
   */

  var mastheadLinks = navigation.map(function (link, i) {
    var _root$location;

    var selectedUrlItem = childLinkChecker && childLinkChecker(link, (_root$location = _windowOrGlobal.default.location) === null || _root$location === void 0 ? void 0 : _root$location.href);
    var autoid = "".concat(stablePrefix, "--masthead-").concat(topNavProps.navType, "__l0-nav").concat(i);
    var selected = topNavProps.selectedMenuItem ? link.titleEnglish === topNavProps.selectedMenuItem : selectedUrlItem;
    var dataTitle = link.titleEnglish ? link.titleEnglish.replace(/[^-a-zA-Z0-9_ ]/g, '').replace(/ +/g, '-').toLowerCase() : null;

    if (link.hasMenu || link.hasMegapanel) {
      return /*#__PURE__*/_react.default.createElement(_HeaderMenu.default, {
        "aria-label": link.title,
        menuLinkName: link.title,
        className: (0, _classnames3.default)((0, _defineProperty2.default)({}, "".concat(prefix, "--masthead__megamenu__l0-nav"), link.hasMegapanel)),
        selected: selected,
        autoId: autoid,
        key: i,
        disableScroll: link.hasMegapanel,
        setOverlay: setOverlay,
        dataTitle: dataTitle
      }, renderNav(link, autoid));
    }

    return /*#__PURE__*/_react.default.createElement(_HeaderMenuItem.default, {
      "data-selected": "".concat(!!selected),
      href: link.url,
      "data-autoid": autoid,
      key: i
    }, link.title);
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, topNavProps.platform && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--masthead__platform-name")
  }, /*#__PURE__*/_react.default.createElement(_HeaderName.default, {
    prefix: "",
    href: topNavProps.platform.url,
    "data-autoid": "".concat(stablePrefix, "--masthead-").concat(topNavProps.navType, "__l0-ecosystemname")
  }, topNavProps.platform.name)), /*#__PURE__*/_react.default.createElement(_HeaderNavContainer.default, null, /*#__PURE__*/_react.default.createElement(_HeaderNavigation.default, {
    "aria-label": "IBM",
    "data-autoid": "".concat(stablePrefix, "--masthead__l0-nav")
  }, mastheadLinks)), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames3.default)("".concat(prefix, "--masthead__overlay"), (0, _defineProperty2.default)({}, "".concat(prefix, "--masthead__overlay-show"), overlay))
  }));
};
/**
 * Loops through and renders a list of links for the masthead nav
 *
 * @param {object} link A list of links to be rendered
 * @param {string} autoid autoid predecessor for megamenu items/menu items data-autoids
 * @returns {object} JSX object
 */


function renderNav(link, autoid) {
  var navItems = [];

  if (link.hasMegapanel) {
    navItems.push( /*#__PURE__*/_react.default.createElement(_MegaMenu.default, {
      key: link.title,
      data: link,
      autoid: autoid
    }));
  } else {
    link.menuSections.forEach(function (section, i) {
      section.menuItems.forEach(function (item, j) {
        navItems.push( /*#__PURE__*/_react.default.createElement(_HeaderMenuItem.default, {
          href: item.url,
          "data-autoid": "".concat(autoid, "--subnav-col").concat(i, "-item").concat(j),
          key: item.title
        }, item.title));
      });
    });
  }

  return navItems;
}

MastheadTopNav.propTypes = {
  /**
   * Object containing top navigation elements.
   */
  navigation: _propTypes.default.arrayOf(_propTypes.default.shape({
    hasMenu: _propTypes.default.bool,
    title: _propTypes.default.string,
    url: _propTypes.default.string,
    menuSections: _propTypes.default.arrayOf(_propTypes.default.shape({
      menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
        title: _propTypes.default.string,
        url: _propTypes.default.string
      }))
    }))
  }))
};
var _default = MastheadTopNav;
exports.default = _default;