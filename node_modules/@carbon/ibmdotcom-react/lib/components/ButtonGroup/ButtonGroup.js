"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _Button = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/Button/Button"));

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * Button group.
 */

var ButtonGroup = function ButtonGroup(_ref) {
  var buttons = _ref.buttons;
  var groupRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (groupRef.current) {
      groupRef.current.style.setProperty("--".concat(stablePrefix, "--button-group--item-count"), String(buttons.length));
    }
  }, [buttons]);
  return /*#__PURE__*/_react.default.createElement("ol", {
    className: "".concat(prefix, "--buttongroup"),
    "data-autoid": "".concat(stablePrefix, "--button-group"),
    ref: groupRef
  }, buttons.map(function (button, key) {
    return /*#__PURE__*/_react.default.createElement("li", {
      key: key,
      className: "".concat(prefix, "--buttongroup-item")
    }, /*#__PURE__*/_react.default.createElement(_Button.default, (0, _extends2.default)({
      "data-autoid": "".concat(stablePrefix, "--button-group-").concat(key),
      isExpressive: true
    }, button, {
      type: "button",
      kind: key === buttons.length - 1 ? 'primary' : 'tertiary'
    }), button.copy));
  }));
};

ButtonGroup.propTypes = {
  /**
   * Array of button objects to render.
   * Use the following for each items:
   *
   * | Name         | Data Type | Description                                                                                                                    |
   * | ------------ | --------- | ------------------------------------------------------------------------------------------------------------------------------ |
   * | `href`       | String    | URL for the button item                                                                                                        |
   * | `onClick`    | Function  | Function triggered on click of button                                                                                          |
   * | `copy`       | String    | Button copy                                                                                                                    |
   * | `renderIcon` | Object    | Provide an optional icon for the CTA from [Carbon's icon library](https://www.carbondesignsystem.com/guidelines/icons/library) |
   *
   * Visit the [Button documentation](http://react.carbondesignsystem.com/?path=/story/buttons--default)
   * from Carbon for a full list of available props.
   */
  buttons: _propTypes.default.arrayOf(_propTypes.default.shape({
    copy: _propTypes.default.string,
    href: _propTypes.default.string,
    onClick: _propTypes.default.func,
    renderIcon: _propTypes.default.elementType
  })).isRequired
};
var _default = ButtonGroup;
exports.default = _default;