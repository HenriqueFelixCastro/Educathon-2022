"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _Image = require("../Image");

var _KalturaPlayer = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-services/services/KalturaPlayer/KalturaPlayer"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var PlayIcon = function PlayIcon(props) {
  return /*#__PURE__*/_react.default.createElement("svg", props, /*#__PURE__*/_react.default.createElement("title", null, "Group 3"), /*#__PURE__*/_react.default.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/_react.default.createElement("circle", {
    fillOpacity: ".9",
    fill: "#525252",
    cx: "32",
    cy: "32",
    r: "32"
  }), /*#__PURE__*/_react.default.createElement("path", {
    d: "M26.556 43.111a1 1 0 0 1-1-1v-22a1 1 0 0 1 1.5-.87l19 11a1 1 0 0 1 0 1.74l-19 11a1 1 0 0 1-.5.13z",
    fill: "#F3F3F3",
    fillRule: "nonzero"
  })));
};

PlayIcon.defaultProps = {
  width: "64",
  height: "64",
  viewBox: "0 0 64 64",
  xmlns: "http://www.w3.org/2000/svg"
};
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * VideoPlayer Image Overlay component
 */

var VideoImageOverlay = function VideoImageOverlay(_ref) {
  var videoId = _ref.videoId,
      videoData = _ref.videoData,
      embedVideo = _ref.embedVideo,
      playingMode = _ref.playingMode,
      thumbnail = _ref.thumbnail,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["videoId", "videoData", "embedVideo", "playingMode", "thumbnail"]);

  var _useState = (0, _react.useState)(3),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      thumbnailSize = _useState2[0],
      setThumbnailSize = _useState2[1];

  var refImage = (0, _react.useCallback)(function (node) {
    if (node === null || node === void 0 ? void 0 : node.parentElement) {
      setThumbnailSize(node.parentElement.offsetWidth);
    }
  }, []);

  var handleClick = function handleClick(event) {
    var onClick = rest.onClick;
    onClick && onClick(event);

    if (playingMode === 'inline') {
      _embedPlayer(event, embedVideo);
    }
  };

  var imageSrc = thumbnail || _KalturaPlayer.default.getThumbnailUrl({
    mediaId: videoId,
    width: thumbnailSize
  });

  return /*#__PURE__*/_react.default.createElement("button", {
    className: "".concat(prefix, "--video-player__image-overlay"),
    "data-autoid": "".concat(stablePrefix, "--video-player__image-overlay"),
    onClick: handleClick
  }, /*#__PURE__*/_react.default.createElement(_Image.Image, {
    refImage: refImage,
    defaultSrc: imageSrc,
    alt: videoData.name,
    icon: PlayIcon
  }));
};

var _embedPlayer = function _embedPlayer(e, embedVideo) {
  var element = e.target;
  element.remove();
  embedVideo(true);
};

VideoImageOverlay.propTypes = {
  /**
   * Video ID from Kaltura video platform.
   */
  videoId: _propTypes.default.string.isRequired,

  /**
   * Object containing videoData such as name, description, duration, etc.
   */
  videoData: _propTypes.default.object,

  /**
   * Func to set state to trigger embedding of video
   */
  embedVideo: _propTypes.default.func,

  /**
   * Choose whether the video will be rendered inline or using the `LightboxMediaViewer`.
   */
  playingMode: _propTypes.default.oneOf(['inline', 'lightbox']),

  /**
   * Optional custom video thumbnail
   */
  thumbnail: _propTypes.default.string
};
var _default = VideoImageOverlay;
exports.default = _default;