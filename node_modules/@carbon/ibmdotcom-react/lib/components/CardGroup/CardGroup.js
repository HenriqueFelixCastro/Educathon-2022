"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/arrow--right/20"));

var _Card = require("../Card");

var _CTA = require("../CTA");

var _classnames = _interopRequireDefault(require("classnames"));

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sameHeight = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/sameHeight/sameHeight"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * CardGroup component
 */

var CardGroup = function CardGroup(_ref) {
  var cards = _ref.cards,
      cardsPerRow = _ref.cardsPerRow,
      cta = _ref.cta,
      border = _ref.border;
  var containerRef = (0, _react.useRef)();
  /**
   * Resize observer to trigger same height function.
   *
   * @private
   */

  var resizeObserver = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    resizeObserver.current = new ResizeObserver(setSameHeight);
    resizeObserver.current.observe(document.documentElement);
    return function () {
      return resizeObserver.current = null;
    };
  }, [setSameHeight]);
  /**
   * Function that activates the sameHeight utility
   */

  var setSameHeight = (0, _react.useCallback)(function () {
    window.requestAnimationFrame(function () {
      var containerNode = containerRef.current;

      if (containerNode) {
        if (containerNode.getElementsByClassName("".concat(prefix, "--card__eyebrow")).length > 0) {
          (0, _sameHeight.default)(containerNode.getElementsByClassName("".concat(prefix, "--card__eyebrow")), 'md');
        }

        if (containerNode.getElementsByClassName("".concat(prefix, "--card__heading")).length > 0) {
          (0, _sameHeight.default)(containerNode.getElementsByClassName("".concat(prefix, "--card__heading")), 'md');
        }

        if (containerNode.getElementsByClassName("".concat(prefix, "--card__copy")).length > 0) {
          (0, _sameHeight.default)(containerNode.getElementsByClassName("".concat(prefix, "--card__copy")), 'md');
        }

        if (containerNode.getElementsByClassName("".concat(prefix, "--card__footer")).length > 0) {
          (0, _sameHeight.default)(containerNode.getElementsByClassName("".concat(prefix, "--card__footer")), 'md');
        }
      }
    });
  }, []);
  return _renderCards(cards, cardsPerRow, containerRef, cta, border);
};
/**
 * Renders the cards based on the CardGroup entries.
 *
 * @param {Array} cards objects array
 * @param {number} cardsPerRow number of cards per column
 * @param {object} containerRef ref of elements
 * @param {object} cta object
 * @param {boolean} border boolean
 * @returns {*} CardGroup JSX objects
 */


var _renderCards = function _renderCards(cards, cardsPerRow, containerRef, cta, border) {
  var _cx;

  return /*#__PURE__*/_react.default.createElement("div", {
    "data-autoid": "".concat(stablePrefix, "--card-group"),
    className: (0, _classnames.default)("".concat(prefix, "--card-group__cards__row"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--card-group--border"), border), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--row--condensed"), !border), _cx)),
    style: {
      '--dds--card-group--cards-in-row': cardsPerRow
    },
    ref: containerRef
  }, cards.map(function (card, index) {
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "".concat(prefix, "--card-group__cards__col")
    }, /*#__PURE__*/_react.default.createElement(_CTA.CTA, {
      style: "card",
      key: index,
      customClassName: "".concat(prefix, "--card-group__card"),
      image: card.image,
      media: card.media,
      heading: card.heading,
      eyebrow: card.eyebrow,
      copy: card.copy,
      pictogram: card.pictogram,
      cta: _objectSpread(_objectSpread({}, card.cta), {}, {
        icon: {
          src: _.default
        }
      }),
      type: card.media ? 'video' : card.type ? card.type : 'local'
    }));
  }), cta && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--card-group__cards__col")
  }, /*#__PURE__*/_react.default.createElement(_Card.Card, {
    inverse: true,
    heading: cta.heading,
    cta: {
      href: cta.cta.href,
      icon: {
        src: _.default
      }
    }
  })));
};

CardGroup.propTypes = {
  /**
   * Array of card objects.
   * Uses a sub-scheme of `<CTA style="card">`'s props for each items.
   *
   * Simple:
   *
   * | Name       | Required | Data Type | Description                            |
   * | ---------- | -------- | --------- | -------------------------------------- |
   * | `copy`     | YES      | String    | Copy of the card.                      |
   * | `heading`  | YES      | String    | Heading of the card.                   |
   * | `cta.href` | YES      | String    | URI for internal or external resource. |
   *
   * Image:
   *
   * | Name       | Required | Data Type | Description                              |
   * | ---------- | -------- | --------- | ---------------------------------------- |
   * | `image`    | YES      | Object    | Contains source and alt text properties. |
   * | `eyebrow`  | YES      | String    | Eyebrow of the card.                     |
   * | `heading`  | YES      | String    | Heading of the card.                     |
   * | `cta.href` | YES      | String    | URI for internal or external resource.   |
   *
   * See [`<CTA style="card">`'s README](https://www.ibm.com/standards/carbon/react/?path=/docs/components-cta--card#props) for full usage details.
   */
  cards: _propTypes.default.arrayOf(_propTypes.default.shape({
    heading: _propTypes.default.string,
    eyebrow: _propTypes.default.string,
    copy: _propTypes.default.string,
    image: _propTypes.default.shape({
      classname: _propTypes.default.string,
      sources: _propTypes.default.arrayOf(_propTypes.default.shape({
        src: _propTypes.default.string,
        breakpoint: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
      })),
      media: _propTypes.default.arrayOf(_propTypes.default.shape({
        src: _propTypes.default.string,
        type: _propTypes.default.string
      })),
      defaultSrc: _propTypes.default.string.isRequired,
      alt: _propTypes.default.string.isRequired,
      longDescription: _propTypes.default.string
    }),
    cta: _propTypes.default.shape({
      href: _propTypes.default.string
    }),
    pictogram: _propTypes.default.node
  })).isRequired,

  /**
   * The number of columns per row. Min 2, max 4, default 3. Applies to >=`lg` breakpoint only.
   */
  cardsPerRow: _propTypes.default.number,

  /**
   * Optional CTA card for group. Always displays as last item.
   * Uses a sub-scheme of `<Card>`'s props.
   * See [`<Card>`'s README](http://www.ibm.com/standards/carbon/react/?path=/docs/components-card--static#props) for full usage details.
   */
  cta: _propTypes.default.shape({
    heading: _propTypes.default.string,
    cta: _propTypes.default.shape({
      href: _propTypes.default.string
    })
  })
};
CardGroup.defaultProps = {
  cardsPerRow: 3
};
var _default = CardGroup;
exports.default = _default;