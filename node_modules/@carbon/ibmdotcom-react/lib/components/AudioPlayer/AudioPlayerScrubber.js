"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Button = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/Button/Button"));

var _FeatureFlags = require("../../internal/FeatureFlags");

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/forward--10/32"));

var _services = require("@carbon/ibmdotcom-services/lib/services");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _2 = _interopRequireDefault(require("@carbon/icons-react/lib/rewind--10/32"));

var _settings = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _Slider = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/Slider/Slider"));

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var prefix = _settings.default.prefix;

var AudioPlayerScrubber = function AudioPlayerScrubber(_ref) {
  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,
      audioTime = _ref.audioTime,
      setAudioTime = _ref.setAudioTime,
      audioDuration = _ref.audioDuration,
      setDisplayVolumeControl = _ref.setDisplayVolumeControl;

  var audioDurationAsString = _services.KalturaPlayer.getMediaDuration(audioDuration); // Audio Total Time


  var handleFormat = function handleFormat(minMax, minOrMaxLabel) {
    return minOrMaxLabel;
  };

  var handleRewindForwardAudio = function handleRewindForwardAudio(addedValue) {
    if (kalturaDigitalPlayer) {
      var time = audioTime + addedValue;
      time = time < 0 ? 0 : time;
      time = time >= audioDuration ? audioDuration : time;
      kalturaDigitalPlayer.sendNotification('doSeek', time);
      setAudioTime(time); // Hide the Volume Control Bar if Opened

      setDisplayVolumeControl(false);
    }
  };

  var handleScrubberChange = function handleScrubberChange(time) {
    /**
     * As this will trigger every time the updatePlayhead listener triggers
     *  and we floor the floating value returned, sometimes it will return like
     *  1.123 -> Floored to 1
     *  then next tick / callback will return
     *  1.98123 -> Floored to 1
     * Meaning that this function will trigger and set the second
     *  on the player to 1 - making it go back in the audio time
     *  and thus generating a really SAD choke/gulp in the audio
     * So this function should ONLY trigger if the absolute difference
     *  of the new scrubber time is bigger then 1 from the previou time value
     */
    if (Math.abs(time - audioTime) >= 1 && kalturaDigitalPlayer) {
      kalturaDigitalPlayer.sendNotification('doSeek', time);
      setAudioTime(time); // Hide the Volume Control Bar if Opened

      setDisplayVolumeControl(false);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Button.default, {
    renderIcon: _2.default,
    iconDescription: "Rewind 10 seconds",
    hasIconOnly: true,
    kind: "ghost",
    tooltipPosition: "top",
    onClick: function onClick() {
      handleRewindForwardAudio(-10);
    },
    disabled: !kalturaDigitalPlayer
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--audio-player__audio-time")
  }, /*#__PURE__*/_react.default.createElement(_Slider.default, {
    min: 0,
    max: audioDuration,
    minLabel: _services.KalturaPlayer.getMediaDuration(audioTime),
    maxLabel: audioDurationAsString,
    value: audioTime,
    onChange: function onChange(_ref2) {
      var value = _ref2.value;
      return handleScrubberChange(value);
    },
    hideTextInput: true,
    formatLabel: function formatLabel(value, minOrMaxLabel) {
      return handleFormat(value, minOrMaxLabel);
    },
    step: 1,
    stepMultiplier: 10,
    disabled: !kalturaDigitalPlayer
  })), /*#__PURE__*/_react.default.createElement(_Button.default, {
    renderIcon: _.default,
    iconDescription: "Forward 10 seconds",
    hasIconOnly: true,
    kind: "ghost",
    tooltipPosition: "top",
    onClick: function onClick() {
      handleRewindForwardAudio(10);
    },
    disabled: !kalturaDigitalPlayer
  }));
};

AudioPlayerScrubber.propTypes = {
  /**
   * The kaltura digital player (KDP) object
   * It starts as false and gets morphed into the html element
   *  of the target player id reference during the kaltura player
   *  embeding process as soon as the kaltura ready callback triggers
   */
  kalturaDigitalPlayer: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.bool]).isRequired,

  /**
   * The state getter for the current audio time (in seconds)
   */
  audioTime: _propTypes.default.number.isRequired,

  /**
   * The setter function for the current audio time (in seconds)
   */
  setAudioTime: _propTypes.default.func.isRequired,

  /**
   * The duration of the audio (in seconds)
   */
  audioDuration: _propTypes.default.number.isRequired,

  /**
   * The state setter that show/hide the custom volume menu
   */
  setDisplayVolumeControl: _propTypes.default.func.isRequired
};
AudioPlayerScrubber.defaultProps = {
  kalturaDigitalPlayer: false,
  audioTime: 0,
  audioDuration: 0
};

var _default = !_FeatureFlags.DDS_AUDIO_PLAYER ? undefined : AudioPlayerScrubber;

exports.default = _default;