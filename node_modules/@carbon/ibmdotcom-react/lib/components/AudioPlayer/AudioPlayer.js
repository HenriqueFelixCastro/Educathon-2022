"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _AudioPlayerCaptionsMenu = _interopRequireDefault(require("./AudioPlayerCaptionsMenu"));

var _AudioPlayerCaptionText = _interopRequireDefault(require("./AudioPlayerCaptionText"));

var _AudioPlayerPlaybackRateMenu = _interopRequireDefault(require("./AudioPlayerPlaybackRateMenu"));

var _AudioPlayerPlayButton = _interopRequireDefault(require("./AudioPlayerPlayButton"));

var _AudioPlayerScrubber = _interopRequireDefault(require("./AudioPlayerScrubber"));

var _AudioPlayerThumbnail = _interopRequireDefault(require("./AudioPlayerThumbnail"));

var _AudioPlayerVolumeControl = _interopRequireDefault(require("./AudioPlayerVolumeControl"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FeatureFlags = require("../../internal/FeatureFlags");

var _settings = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings"));

var _services = require("@carbon/ibmdotcom-services/lib/services");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _settings2 = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _uniqueid = _interopRequireDefault(require("../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/uniqueid/uniqueid"));

/**
 * Copyright IBM Corp. 2016, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var stablePrefix = _settings.default.stablePrefix;
var prefix = _settings2.default.prefix;
/**
 * AudioPlayer component.
 */

var AudioPlayer = function AudioPlayer(_ref) {
  var audioId = _ref.audioId,
      customClassName = _ref.customClassName,
      autoPlay = _ref.autoPlay,
      showCaptionMenu = _ref.showCaptionMenu,
      showPlaybackRateMenu = _ref.showPlaybackRateMenu,
      availablePlaybackRates = _ref.availablePlaybackRates;

  var _useState = (0, _react.useState)({
    duration: 0
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      audioData = _useState2[0],
      setAudioData = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      displayVolumeControl = _useState4[0],
      setDisplayVolumeControl = _useState4[1];

  var audioPlayerId = (0, _uniqueid.default)("audio-player__audio-".concat(audioId, "-"));
  var uniqueAudioPlayerId = "".concat(prefix, "--").concat(audioPlayerId);

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      kalturaDigitalPlayer = _useState6[0],
      setKalturaDigitalPlayer = _useState6[1]; // The KDP Object


  var _useState7 = (0, _react.useState)({}),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      availableCaptions = _useState8[0],
      setAvailableCaptions = _useState8[1]; // All Available Captions

  /**
   * The current state of the player
   *
   * @param {string} '' - Player not initialized
   * @param {string} 'loading' - Player initialized but waiting kdp to load
   * @param {string} 'playing' - Player is playing
   * @param {string} 'paused' - Player is paused
   * @param {string} 'stopped' - Player stopped playing (audio finished)
   */


  var _useState9 = (0, _react.useState)(''),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      audioState = _useState10[0],
      setAudioState = _useState10[1];

  var _useState11 = (0, _react.useState)(1),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      audioVolume = _useState12[0],
      setAudioVolume = _useState12[1]; // Current Volume


  var _useState13 = (0, _react.useState)(0),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      audioTime = _useState14[0],
      setAudioTime = _useState14[1]; // Current Play Time


  var _useState15 = (0, _react.useState)(''),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      audioCaption = _useState16[0],
      setAudioCaption = _useState16[1]; // Current Caption Language


  var _useState17 = (0, _react.useState)(1),
      _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
      audioPlaybackRate = _useState18[0],
      setAudioPlaybackRate = _useState18[1]; // Current Playback Rate


  (0, _react.useEffect)(function () {
    var stale = false;
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var embedAnswer, kdp, listeners, newAudioData;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(audioState === 'loading')) {
                _context.next = 11;
                break;
              }

              _context.next = 3;
              return _services.KalturaPlayer.embedMedia(audioId, uniqueAudioPlayerId, {
                autoPlay: true,
                playbackRateSelector: {
                  defaultSpeed: 1,
                  plugin: true
                }
              });

            case 3:
              embedAnswer = _context.sent;
              setAudioState('playing');
              _context.next = 7;
              return embedAnswer.kWidget();

            case 7:
              kdp = _context.sent;
              setKalturaDigitalPlayer(kdp);
              listeners = {
                playerUpdatePlayhead: function playerUpdatePlayhead(time) {
                  setAudioTime(Math.floor(time));
                },
                newClosedCaptionsData: function newClosedCaptionsData(captionData) {
                  var processedCaptions = availableCaptions;
                  processedCaptions[captionData.label] = captionData.captions;
                  setAvailableCaptions(processedCaptions);
                },
                playerPlayEnd: function playerPlayEnd() {
                  setAudioState('stopped');
                  /**
                   * As the audio current time is floored on playhead update
                   *  when the audio stop because it endend, there is a huge
                   *  chance that the scrubber will show something like:
                   *  2:29 <---- scrubber ----> 2:30
                   *  but the audio will be ended and playbutton will show
                   *  the reload icon
                   * In order to fix it, we're manually setting the current
                   *  audio time to the audio duration
                   */

                  setAudioTime(audioData.duration);
                }
              }; // Loop and bind all the player listeners

              _windowOrGlobal.default.Object.keys(listeners).map(function (listenerKey) {
                kdp.addJsListener(listenerKey, listeners[listenerKey]);
              });

            case 11:
              if (!stale) {
                _context.next = 13;
                break;
              }

              return _context.abrupt("return");

            case 13:
              if (!(audioData.duration === 0)) {
                _context.next = 20;
                break;
              }

              _context.next = 16;
              return _services.KalturaPlayer.api(audioId);

            case 16:
              newAudioData = _context.sent;

              if (!stale) {
                _context.next = 19;
                break;
              }

              return _context.abrupt("return");

            case 19:
              setAudioData(newAudioData);

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
    return function () {
      stale = true;
    };
  }, [audioId, audioState, uniqueAudioPlayerId, availableCaptions, audioData.duration]);

  var initPlayer = function initPlayer() {
    setAudioState('loading');
  };

  if (autoPlay && audioState === '') {
    initPlayer();
  }

  var classnames = (0, _classnames.default)("".concat(prefix, "--audio-player"), customClassName);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classnames
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--audio-player__embedded-player"),
    "data-autoid": "".concat(stablePrefix, "--audio-player__audio-").concat(audioId),
    id: uniqueAudioPlayerId
  }), /*#__PURE__*/_react.default.createElement(_AudioPlayerThumbnail.default, {
    audioId: audioId
  }), /*#__PURE__*/_react.default.createElement(_AudioPlayerPlayButton.default, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    initPlayer: initPlayer,
    audioState: audioState,
    setAudioState: setAudioState,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), /*#__PURE__*/_react.default.createElement(_AudioPlayerScrubber.default, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    audioDuration: audioData.duration,
    audioTime: audioTime,
    setAudioTime: setAudioTime,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), /*#__PURE__*/_react.default.createElement(_AudioPlayerVolumeControl.default, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    audioVolume: audioVolume,
    setAudioVolume: setAudioVolume,
    displayVolumeControl: displayVolumeControl,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), showPlaybackRateMenu && /*#__PURE__*/_react.default.createElement(_AudioPlayerPlaybackRateMenu.default, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    availablePlaybackRates: availablePlaybackRates,
    audioPlaybackRate: audioPlaybackRate,
    setAudioPlaybackRate: setAudioPlaybackRate,
    setDisplayVolumeControl: setDisplayVolumeControl
  }), showCaptionMenu && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AudioPlayerCaptionsMenu.default, {
    kalturaDigitalPlayer: kalturaDigitalPlayer,
    setDisplayVolumeControl: setDisplayVolumeControl,
    availableCaptions: availableCaptions,
    audioCaption: audioCaption,
    setAudioCaption: setAudioCaption
  }), (availableCaptions === null || availableCaptions === void 0 ? void 0 : availableCaptions[audioCaption]) && /*#__PURE__*/_react.default.createElement(_AudioPlayerCaptionText.default, {
    captions: availableCaptions[audioCaption],
    audioTime: audioTime
  })));
};

AudioPlayer.propTypes = {
  /**
   * Media ID from Kaltura media platform.
   */
  audioId: _propTypes.default.string.isRequired,

  /**
   * The CSS class name to apply.
   */
  customClassName: _propTypes.default.string,

  /**
   * `true` to autoplay the audio on load
   */
  autoPlay: _propTypes.default.bool,

  /**
   * `true` to show the playback rate button.
   */
  showPlaybackRateMenu: _propTypes.default.bool,

  /**
   * `true` to show the captions object.
   */
  showCaptionMenu: _propTypes.default.bool,

  /**
   * The available speed multiplier for playback rate
   * example: [1, 1.5, 2]
   */
  availablePlaybackRates: _propTypes.default.arrayOf(_propTypes.default.number)
  /**
   * The CSS class name to apply.
   */

};
AudioPlayer.defaultProps = {
  customClassName: '',
  autoPlay: false,
  showCaptionMenu: true,
  showPlaybackRateMenu: true,
  availablePlaybackRates: [1, 1.5, 2]
};

var _default = !_FeatureFlags.DDS_AUDIO_PLAYER ? undefined : AudioPlayer;

exports.default = _default;