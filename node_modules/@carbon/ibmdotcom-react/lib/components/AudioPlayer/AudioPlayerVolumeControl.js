"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Button = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/Button/Button"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FeatureFlags = require("../../internal/FeatureFlags");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

var _settings = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _Slider = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/Slider/Slider"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/volume--down/32"));

var _2 = _interopRequireDefault(require("@carbon/icons-react/lib/volume--mute/32"));

var _3 = _interopRequireDefault(require("@carbon/icons-react/lib/volume--up/32"));

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var prefix = _settings.default.prefix;

var AudioPlayerVolumeControl = function AudioPlayerVolumeControl(_ref) {
  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,
      audioVolume = _ref.audioVolume,
      setAudioVolume = _ref.setAudioVolume,
      displayVolumeControl = _ref.displayVolumeControl,
      setDisplayVolumeControl = _ref.setDisplayVolumeControl;

  var handleAudioVolumeChange = function handleAudioVolumeChange(volume) {
    volume = _windowOrGlobal.default.Number.parseFloat(volume.toString().substring(0, 3));

    if (kalturaDigitalPlayer) {
      kalturaDigitalPlayer.sendNotification('changeVolume', volume);
      setAudioVolume(volume);
    }
  };

  var renderVolumeButtonIcon = function renderVolumeButtonIcon() {
    if (audioVolume === 0) {
      return _2.default;
    } else if (audioVolume > 0 && audioVolume < 0.8) {
      return _.default;
    }

    return _3.default;
  };

  var buttonClasses = (0, _classnames.default)((0, _defineProperty2.default)({}, "".concat(prefix, "--force-tooltip-hidden ").concat(prefix, "--menu--open"), displayVolumeControl));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--audio-player__volume-control")
  }, /*#__PURE__*/_react.default.createElement(_Button.default, {
    className: buttonClasses,
    renderIcon: renderVolumeButtonIcon(),
    iconDescription: "Volume",
    hasIconOnly: true,
    kind: "ghost",
    onClick: function onClick() {
      return setDisplayVolumeControl(function (prev) {
        return !prev;
      });
    },
    tooltipPosition: "top",
    disabled: !kalturaDigitalPlayer
  }), displayVolumeControl && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--audio-player__volume-control-menu ").concat(prefix, "--audio-player__shadow")
  }, /*#__PURE__*/_react.default.createElement(_Slider.default, {
    max: 1,
    min: 0,
    step: 0.1,
    value: audioVolume,
    onChange: function onChange(_ref2) {
      var value = _ref2.value;
      return handleAudioVolumeChange(value);
    },
    hideTextInput: true,
    formatLabel: function formatLabel() {
      return '';
    }
  })));
};

AudioPlayerVolumeControl.propTypes = {
  /**
   * The kaltura digital player (KDP) object
   * It starts as false and gets morphed into the html element
   *  of the target player id reference during the kaltura player
   *  embeding process as soon as the kaltura ready callback triggers
   */
  kalturaDigitalPlayer: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.bool]).isRequired,

  /**
   * The state getter for the current volume of the player
   * 0 to 1, stepping by 0.1
   */
  audioVolume: _propTypes.default.number.isRequired,

  /**
   * The state setter for the current volume of the player
   * 0 to 1, stepping by 0.1
   */
  setAudioVolume: _propTypes.default.func.isRequired,

  /**
   * The state getter that show/hide the custom volume menu
   */
  displayVolumeControl: _propTypes.default.bool.isRequired,

  /**
   * The state setter that show/hide the custom volume menu
   */
  setDisplayVolumeControl: _propTypes.default.func.isRequired
};
AudioPlayerVolumeControl.defaultProps = {
  kalturaDigitalPlayer: false,
  audioVolume: 1,
  displayVolumeControl: false
};

var _default = !_FeatureFlags.DDS_AUDIO_PLAYER ? undefined : AudioPlayerVolumeControl;

exports.default = _default;