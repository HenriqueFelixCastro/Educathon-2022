"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Button = _interopRequireDefault(require("../../internal/vendor/carbon-components-react/components/Button/Button"));

var _FeatureFlags = require("../../internal/FeatureFlags");

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/pause--filled/32"));

var _2 = _interopRequireDefault(require("@carbon/icons-react/lib/play--filled--alt/32"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _settings = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var prefix = _settings.default.prefix;

var AudioPlayerPlayButton = function AudioPlayerPlayButton(_ref) {
  var kalturaDigitalPlayer = _ref.kalturaDigitalPlayer,
      initPlayer = _ref.initPlayer,
      audioState = _ref.audioState,
      setAudioState = _ref.setAudioState,
      setDisplayVolumeControl = _ref.setDisplayVolumeControl;

  var handlePlayButton = function handlePlayButton() {
    if (audioState === '') {
      initPlayer();
    } else if (kalturaDigitalPlayer) {
      if (audioState === 'playing') {
        setAudioState('paused');
        kalturaDigitalPlayer.sendNotification('doPause');
      } else if (audioState === 'paused' || audioState === 'stopped') {
        setAudioState('playing');
        kalturaDigitalPlayer.sendNotification('doPlay');
      } // Hide the Volume Control Bar if Opened


      setDisplayVolumeControl(false);
    }
  };

  var handleButtonProps = function handleButtonProps() {
    var icon = _2.default;
    var iconDescription = 'Play';

    switch (audioState) {
      case 'loading':
      case 'playing':
        icon = _.default;
        iconDescription = 'Pause';
        break;
    }

    return {
      icon: icon,
      iconDescription: iconDescription
    };
  };

  var playButtonProps = handleButtonProps();
  return /*#__PURE__*/_react.default.createElement(_Button.default, {
    className: "".concat(prefix, "--audio-player__play-button"),
    renderIcon: playButtonProps.icon,
    iconDescription: playButtonProps.iconDescription,
    hasIconOnly: true,
    kind: "ghost",
    onClick: function onClick() {
      handlePlayButton();
    },
    tooltipPosition: "top"
  });
};

AudioPlayerPlayButton.propTypes = {
  /**
   * The kaltura digital player (KDP) object
   * It starts as false and gets morphed into the html element
   *  of the target player id reference during the kaltura player
   *  embeding process as soon as the kaltura ready callback triggers
   */
  kalturaDigitalPlayer: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.bool]).isRequired,

  /**
   * The function that start the kaltura digital player embeding
   *  process, bind all the events and start / gives-life-to the
   *  audio component.
   */
  initPlayer: _propTypes.default.func.isRequired,

  /**
   * The state getter for the current state of the player
   * The state list can be found in AudioPlayer.js
   */
  audioState: _propTypes.default.string.isRequired,

  /**
   * The state setter for the current state of the player
   * The state list can be found in AudioPlayer.js
   */
  setAudioState: _propTypes.default.func.isRequired,

  /**
   * The state setter that show/hide the custom volume menu
   */
  setDisplayVolumeControl: _propTypes.default.func.isRequired
};
AudioPlayerPlayButton.defaultProps = {
  kalturaDigitalPlayer: false,
  audioState: ''
};

var _default = !_FeatureFlags.DDS_AUDIO_PLAYER ? undefined : AudioPlayerPlayButton;

exports.default = _default;