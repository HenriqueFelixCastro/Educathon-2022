"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SideNavMenu = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/chevron--down/20"));

var _settings = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _SideNavIcon = _interopRequireDefault(require("./SideNavIcon"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var prefix = _settings.default.prefix;

var SideNavMenu = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(SideNavMenu, _React$Component);

  var _super = _createSuper(SideNavMenu);

  function SideNavMenu(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SideNavMenu);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleToggleExpand", function (event) {
      var onToggle = _this.props.onToggle;
      var onMegaMenuToggle = new CustomEvent('onMegaMenuToggle', {
        bubbles: true,
        detail: {
          isExpanded: !_this.state.isExpanded
        }
      });
      event.currentTarget.dispatchEvent(onMegaMenuToggle);
      event.persist();

      _this.setState(function (state) {
        return {
          isExpanded: !state.isExpanded
        };
      }, function () {
        if (onToggle) {
          onToggle(event, {
            isExpanded: _this.state.isExpanded
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyToggleExpand", function (event) {
      if (event.key === 'Enter' || event.charCode === ' ') {
        event.stopPropagation();
        event.preventDefault();
        var onToggle = _this.props.onToggle;
        event.persist();

        _this.setState(function (state) {
          return {
            isExpanded: !state.isExpanded
          };
        }, function () {
          if (onToggle) {
            onToggle(event, {
              isExpanded: _this.state.isExpanded
            });
          }
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_renderSideNavItem", function (item) {
      if (item) {
        return _react.default.cloneElement(item, {
          onClick: item.props.isbackbutton === 'true' ? _this.handleToggleExpand.bind((0, _assertThisInitialized2.default)(_this)) : null,
          onKeyPress: item.props.isbackbutton === 'true' ? _this.handleKeyToggleExpand.bind((0, _assertThisInitialized2.default)(_this)) : null
        });
      }
    });
    _this.state = {
      isExpanded: props.defaultExpanded || false,
      wasPreviouslyExpanded: props.defaultExpanded || false
    };
    return _this;
  }

  (0, _createClass2.default)(SideNavMenu, [{
    key: "render",
    value: function render() {
      var _cx;

      var _this$props = this.props,
          buttonRef = _this$props.buttonRef,
          customClassName = _this$props.className,
          IconElement = _this$props.renderIcon,
          isActive = _this$props.isActive,
          title = _this$props.title,
          large = _this$props.large,
          _isbackbutton = _this$props.isbackbutton,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["buttonRef", "className", "renderIcon", "isActive", "title", "large", "isbackbutton"]);
      var isExpanded = this.state.isExpanded;
      var hasActiveChild;
      var className = (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__item"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__item--active"), isActive || hasActiveChild && !isExpanded), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__item--icon"), IconElement), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__item--large"), large), (0, _defineProperty2.default)(_cx, customClassName, !!customClassName), _cx));
      return /*#__PURE__*/_react.default.createElement("li", {
        className: className
      }, /*#__PURE__*/_react.default.createElement("button", {
        "aria-haspopup": "true",
        "aria-expanded": isExpanded,
        "data-selected": rest.selected ? 'true' : '',
        className: (0, _classnames.default)("".concat(prefix, "--side-nav__submenu"), (0, _defineProperty2.default)({}, "".concat(prefix, "--masthead__side-nav--submemu--selected"), rest.selected)),
        "data-title": rest.dataTitle,
        onClick: this.handleToggleExpand,
        ref: buttonRef,
        type: "button"
      }, IconElement && /*#__PURE__*/_react.default.createElement(_SideNavIcon.default, null, /*#__PURE__*/_react.default.createElement(IconElement, null)), /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefix, "--side-nav__submenu-content")
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "".concat(prefix, "--side-nav__submenu-title"),
        "data-autoid": "".concat(rest.autoid)
      }, title), /*#__PURE__*/_react.default.createElement(_SideNavIcon.default, {
        className: "".concat(prefix, "--side-nav__submenu-chevron"),
        small: true
      }, /*#__PURE__*/_react.default.createElement(_.default, null)))));
    }
  }]);
  return SideNavMenu;
}(_react.default.Component);

exports.SideNavMenu = SideNavMenu;
(0, _defineProperty2.default)(SideNavMenu, "propTypes", {
  /**
   * Provide an optional class to be applied to the containing node
   */
  className: _propTypes.default.string,

  /**
   * Pass in a custom icon to render next to the `SideNavMenu` title
   */
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

  /**
   * Specify whether the `SideNavMenu` is "active". `SideNavMenu` should be
   * considered active if one of its menu items are a link for the current
   * page.
   */
  isActive: _propTypes.default.bool,

  /**
   * Provide the text for the overall menu name
   */
  title: _propTypes.default.string.isRequired,

  /**
   * Specify whether the menu should default to expanded. By default, it will
   * be closed.
   */
  defaultExpanded: _propTypes.default.bool,

  /**
   * Property to indicate if the side nav container is open (or not). Use to
   * keep local state and styling in step with the SideNav expansion state.
   */
  isSideNavExpanded: _propTypes.default.bool,

  /**
   * Specify if this is a large variation of the SideNavMenu
   */
  large: _propTypes.default.bool,

  /**
   * For submenu back button to toggle expand/collapse
   */
  isbackbutton: _propTypes.default.string,

  /**
   * A callback that is called when this side nav menu is toggled by user gesture.
   */
  onToggle: _propTypes.default.func
});
(0, _defineProperty2.default)(SideNavMenu, "defaultProps", {
  defaultExpanded: false,
  isActive: false,
  large: false
});
(0, _defineProperty2.default)(SideNavMenu, "getDerivedStateFromProps", function (props, state) {
  var derivedState = null;

  if (props.isSideNavExpanded === false && state.isExpanded === true) {
    derivedState = {
      isExpanded: props.isSideNavExpanded,
      wasPreviouslyExpanded: true
    };
  } else if (props.isSideNavExpanded === true && state.wasPreviouslyExpanded === true) {
    derivedState = {
      isExpanded: props.isSideNavExpanded,
      wasPreviouslyExpanded: false
    };
  }

  return derivedState;
});

var _default = _react.default.forwardRef(function (props, ref) {
  return /*#__PURE__*/_react.default.createElement(SideNavMenu, (0, _extends2.default)({}, props, {
    buttonRef: ref
  }));
});

exports.default = _default;