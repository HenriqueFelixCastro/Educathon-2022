"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _ = _interopRequireDefault(require("@carbon/icons-react/lib/arrow--right/20"));

var _classnames = _interopRequireDefault(require("classnames"));

var _SideNavLink = _interopRequireDefault(require("../../../internal/vendor/carbon-components-react/components/UIShell/SideNavLink"));

var _SideNavMenuBackButton = _interopRequireDefault(require("./SideNavMenuBackButton"));

var _settings = _interopRequireDefault(require("carbon-components/umd/globals/js/settings"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var prefix = _settings.default.prefix;
/**
 * SideNavMenuSection component
 */

var SideNavMenuSection = function SideNavMenuSection(_ref) {
  var _cx;

  var customClassName = _ref.className,
      children = _ref.children,
      onBackClick = _ref.onBackClick,
      show = _ref.show,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["className", "children", "onBackClick", "show"]);
  var menuSectionRef = (0, _react.useRef)(null);
  var backButtonRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (show) {
      /**
       * In order for tabbing to work, focus has to be set in the menu section when it
       * becomes visible. If menu section is a submenu, set focus to the back button. If menu section
       * is the first parent section, set focus to the hamburger toggle button.
       *
       * @param {Node} focusElement node element to focus
       */
      var setFocus = function setFocus(focusElement) {
        var _menuSectionRef$curre;

        (_menuSectionRef$curre = menuSectionRef.current) === null || _menuSectionRef$curre === void 0 ? void 0 : _menuSectionRef$curre.addEventListener('transitionend', function focus(event) {
          var _menuSectionRef$curre2;

          if (event.propertyName === 'left' || event.propertyName === 'background-color' || event.propertyName === 'color') {
            focusElement === null || focusElement === void 0 ? void 0 : focusElement.focus();
          }

          (_menuSectionRef$curre2 = menuSectionRef.current) === null || _menuSectionRef$curre2 === void 0 ? void 0 : _menuSectionRef$curre2.removeEventListener('transitionend', focus);
        });
      };

      if (rest.isSubmenu) {
        setFocus(backButtonRef.current);
      } else {
        setFocus(rest.focusNode);
      }
    }
  }, [rest.focusNode, rest.isSubmenu, show]);
  var className = (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__menu-section"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--side-nav__menu-section--expanded"), show), (0, _defineProperty2.default)(_cx, customClassName, !!customClassName), _cx));
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": !show,
    className: className,
    id: rest.id,
    ref: menuSectionRef
  }, rest.isSubmenu && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("button", {
    className: "".concat(prefix, "--masthead__focus"),
    onFocus: function onFocus(e) {
      var lastMenuItem = e.target.parentElement.querySelector('li:last-of-type button') || e.target.parentElement.querySelector('li:last-of-type a');
      return lastMenuItem.focus();
    },
    "aria-hidden": true
  }), /*#__PURE__*/_react.default.createElement(_SideNavMenuBackButton.default, {
    ref: backButtonRef,
    onBackClick: onBackClick,
    navType: rest.navType,
    backButtonText: rest.backButtonText
  }), rest.titleUrl ? /*#__PURE__*/_react.default.createElement(_SideNavLink.default, {
    className: "".concat(prefix, "--masthead__side-nav--submemu-section-title"),
    href: rest.titleUrl
  }, rest.title, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--masthead__side-nav--submemu-section-title__icon")
  }, /*#__PURE__*/_react.default.createElement(_.default, null))) : /*#__PURE__*/_react.default.createElement("li", {
    className: "".concat(prefix, "--masthead__side-nav--submemu-title")
  }, rest.title), rest.heading && /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(prefix, "--masthead__side-nav--submemu-heading")
  }, rest.heading)), children, /*#__PURE__*/_react.default.createElement("button", {
    className: "".concat(prefix, "--masthead__focus"),
    onFocus: function onFocus(e) {
      if (rest.focusNode) {
        rest.focusNode.focus();
      } else {
        e.target.parentElement.querySelector('button[isbackbutton="true"]').focus();
      }
    },
    "aria-hidden": true
  }));
};

SideNavMenuSection.propTypes = {
  /**
   * Provide an optional class to be applied to the containing node
   */
  className: _propTypes.default.string,

  /**
   * <SideNavMenuItem>'s within SideNavMenuSection
   */
  children: _propTypes.default.node,

  /**
   * action on back click
   */
  onBackClick: _propTypes.default.func,

  /**
   * Determine whether to show SideNavMenuSection
   */
  show: _propTypes.default.bool
};
SideNavMenuSection.defaultProps = {
  show: false,
  onBackClick: function onBackClick() {}
};
var _default = SideNavMenuSection;
exports.default = _default;