"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _axios = _interopRequireDefault(require("axios"));

/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @constant {string | string} Host for the profile status API call
 * @private
 */
var _host = process && (process.env.REACT_APP_PROFILE_HOST || process.env.PROFILE_HOST) || 'https://login.ibm.com';
/**
 * @constant {string | string} API version
 * @private
 */


var _version = process && process.env.PROFILE_VERSION || 'v1';
/**
 * Profile status endpoint
 *
 * @type {string}
 * @private
 */


var _endpoint = "".concat(_host, "/").concat(_version, "/mgmt/idaas/user/status/");
/**
 * Profile API class with methods for checking user authentication for ibm.com
 */


var ProfileAPI = /*#__PURE__*/function () {
  function ProfileAPI() {
    (0, _classCallCheck2.default)(this, ProfileAPI);
  }

  (0, _createClass2.default)(ProfileAPI, null, [{
    key: "getUserStatus",

    /**
     * Returns user status (authenticated or unauthenticated)
     *
     * @returns {Promise<any>} User status
     * @example
     * import { ProfileAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getUserStatus() {
     *   const response = await ProfileAPI.getUserStatus();
     *   return response;
     * }
     */
    value: function () {
      var _getUserStatus = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _axios.default.get(_endpoint, {
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  withCredentials: true
                }).then(function (response) {
                  return response.data;
                }).catch(function (error) {
                  console.log('Failed Profile Network Call', error);
                  return {
                    user: 'Unauthenticated'
                  };
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getUserStatus() {
        return _getUserStatus.apply(this, arguments);
      }

      return getUserStatus;
    }()
  }]);
  return ProfileAPI;
}();

var _default = ProfileAPI;
exports.default = _default;