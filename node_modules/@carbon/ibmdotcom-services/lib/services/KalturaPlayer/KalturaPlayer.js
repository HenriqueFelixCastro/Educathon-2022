"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Analytics = require("../Analytics");

var _windowOrGlobal = _interopRequireDefault(require("window-or-global"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Sets the Kaltura Partner ID, set by environment variable "KALTURA_PARTNER_ID"
 *
 * @type {number}
 * @private
 */
var _partnerId = process && (process.env.REACT_APP_KALTURA_PARTNER_ID || process.env.KALTURA_PARTNER_ID) || 1773841;
/**
 * Sets the Kaltura UIConf ID, set by environment variable "KALTURA_UICONF_ID"
 *
 * @type {number}
 * @private
 */


var _uiConfId = process && (process.env.REACT_APP_KALTURA_UICONF_ID || process.env.KALTURA_UICONF_ID) || 27941801;
/**
 * @type {string} _embedUrl The API URL to call
 * @private
 */


var _embedUrl = "https://cdnapisec.kaltura.com/p/".concat(_partnerId, "/sp/").concat(_partnerId, "00/embedIframeJs/uiconf_id/").concat(_uiConfId, "/partner_id/").concat(_partnerId);
/**
 * @type {string} _thumbnailUrl
 * @private
 */


var _thumbnailUrl = "https://cdnsecakmi.kaltura.com/p/".concat(_partnerId, "/thumbnail/entry_id/");
/**
 * Number of times to retry the script ready loop before failing
 *
 * @type {number}
 * @private
 */


var _timeoutRetries = 50;
/**
 * Tracks the number of attempts for the script ready loop
 *
 * @type {number}
 * @private
 */

var _attempt = 0;
/**
 * Tracks the script status
 *
 * @type {boolean} _scriptLoading to track the script loading or not
 * @private
 */

var _scriptLoading = false;
/**
 * Timeout loop to check script state is the _scriptLoaded state or _scriptLoading state
 *
 * @param {Function} resolve Resolve function
 * @param {Function} reject Reject function
 * @private
 */

function _scriptReady(resolve, reject) {
  /**
   *
   * @param {object} root.kWidget if exists then resolve
   */
  if (_windowOrGlobal.default.kWidget) {
    _scriptLoading = false;
    resolve();
  } else if (_scriptLoading) {
    _attempt++;

    if (_attempt < _timeoutRetries) {
      setTimeout(function () {
        _scriptReady(resolve, reject);
      }, 100);
    } else {
      reject();
    }
  } else {
    _loadScript();

    _scriptReady(resolve, reject);
  }
}
/**
 * Returns boolean if the _scriptLoading and _scriptLoaded flag is false
 *
 * @private
 */


function _loadScript() {
  _scriptLoading = true;
  var script = document.createElement('script');
  script.src = _embedUrl;
  script.async = true;
  document.body.appendChild(script);
}
/**
 *
 * Object to cache media data
 *
 * @private
 */


var mediaData = {};
/**
 * KalturaPlayerAPI class with methods of checking script state and
 * embed media meta data and api data
 *
 * In order to set the Partner ID/UIConf ID, set the following environment
 * variables:
 *
 * - KALTURA_PARTNER_ID
 * - KALTURA_UICONF_ID
 */

var KalturaPlayerAPI = /*#__PURE__*/function () {
  function KalturaPlayerAPI() {
    (0, _classCallCheck2.default)(this, KalturaPlayerAPI);
  }

  (0, _createClass2.default)(KalturaPlayerAPI, null, [{
    key: "checkScript",

    /**
     *
     * Gets the full _scriptReady state
     *
     * @returns {Promise<*>} Promise kaltura media player file
     */
    value: function checkScript() {
      return new Promise(function (resolve, reject) {
        _scriptReady(resolve, reject);
      });
    }
    /**
     * Creates thumbnail image url with customizable params
     *
     * @param {object} params param object
     * @param {string} params.mediaId media id
     * @param {string} params.height specify height in pixels
     * @param {string} params.width specify width in pixels
     *
     * @returns {string} url of thumbnail image
     *
     * @example
     * import { KalturaPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * function thumbnail() {
     *   const thumbnailData = {
     *      mediaId: '1_9h94wo6b',
     *      height: '240',
     *      width: '320'
     *   }
     *   const thumbnailUrl = KalturaPlayerAPI.getThumbnailUrl(thumbnailData);
     * }
     */

  }, {
    key: "getThumbnailUrl",
    value: function getThumbnailUrl(_ref) {
      var mediaId = _ref.mediaId,
          height = _ref.height,
          width = _ref.width;
      var url = _thumbnailUrl + mediaId;
      if (height) url = url + "/height/".concat(height);
      if (width) url = url + "/width/".concat(width);
      return url;
    }
    /**
     * Gets the embed meta data
     *
     * @param {string} mediaId  The mediaId we're embedding the placeholder for.
     * @param {string} targetId The targetId the ID where we're putting the placeholder.
     * @param {object} flashvars Determine any extra param or plugin for the player.
     * @param {boolean} useIbmMetrics Whether or not should IBM Metrics events be fired.
     * @param {Function} customReadyCallback Determine any extra functions that should be executed
     *  on player readyCallback.
     * @returns {object}  object
     *
     * @example
     * import { KalturaPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * function embedMyVideo() {
     *   const elem = document.getElementById('foo');
     *   const videoid = '12345';
     *   KalturaPlayerAPI.embedMedia(videoid, elem);
     * }
     */

  }, {
    key: "embedMedia",
    value: function () {
      var _embedMedia = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(mediaId, targetId) {
        var flashvars,
            useIbmMetrics,
            customReadyCallback,
            fireEvent,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                flashvars = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                useIbmMetrics = _args.length > 3 && _args[3] !== undefined ? _args[3] : true;
                customReadyCallback = _args.length > 4 && _args[4] !== undefined ? _args[4] : function () {};
                fireEvent = this.fireEvent;
                _context.next = 6;
                return this.checkScript().then(function () {
                  var promiseKWidget = new Promise(function (resolve) {
                    var defaultFlashVars = {
                      autoPlay: true,
                      closedCaptions: {
                        plugin: true
                      },
                      titleLabel: {
                        plugin: true,
                        align: 'left',
                        text: '{mediaProxy.entry.name}'
                      },
                      ibm: {
                        template: 'idl'
                      }
                    };
                    var isCustomCreated;

                    if (!document.getElementById(targetId) && document.querySelector('dds-tabs-extended-media')) {
                      var newVideoDiv = document.createElement('div');
                      newVideoDiv.classList.add("bx--video-player__video");
                      newVideoDiv.setAttribute('id', targetId);
                      document.body.append(newVideoDiv);
                      isCustomCreated = true;
                    }

                    _windowOrGlobal.default.kWidget.embed({
                      targetId: targetId,
                      wid: '_' + _partnerId,
                      uiconf_id: _uiConfId,
                      entry_id: mediaId,
                      flashvars: _objectSpread(_objectSpread({}, defaultFlashVars), flashvars),
                      params: {
                        wmode: 'transparent'
                      },
                      // Ready callback is issued for this player:
                      readyCallback: function readyCallback(playerId) {
                        var kdp = document.getElementById(playerId);

                        if (useIbmMetrics) {
                          kdp.addJsListener('playerPaused.ibm', function () {
                            fireEvent({
                              playerState: 1,
                              kdp: kdp,
                              mediaId: mediaId
                            });
                          });
                          kdp.addJsListener('playerPlayed.ibm', function () {
                            fireEvent({
                              playerState: 2,
                              kdp: kdp,
                              mediaId: mediaId
                            });
                          });
                          kdp.addJsListener('playerPlayEnd.ibm', function () {
                            fireEvent({
                              playerState: 3,
                              kdp: kdp,
                              mediaId: mediaId
                            });
                          });
                          kdp.addJsListener('IbmCtaEvent.ibm', function (ctaData) {
                            var customMetricsData = (ctaData === null || ctaData === void 0 ? void 0 : ctaData.customMetricsData) || {};
                            fireEvent({
                              playerState: 101,
                              kdp: kdp,
                              mediaId: mediaId,
                              customMetricsData: customMetricsData
                            });
                          });
                        }

                        customReadyCallback(kdp);
                        resolve(kdp);
                      }
                    });

                    if (isCustomCreated) {
                      var previousVideoDiv = document.querySelector('dds-tabs-extended-media').shadowRoot.querySelector(".bx--accordion__item--active dds-video-player").lastChild;
                      previousVideoDiv.parentElement.appendChild(document.getElementById(targetId));
                    }
                  });
                  return {
                    kWidget: function kWidget() {
                      return promiseKWidget;
                    }
                  };
                });

              case 6:
                return _context.abrupt("return", _context.sent);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function embedMedia(_x, _x2) {
        return _embedMedia.apply(this, arguments);
      }

      return embedMedia;
    }()
    /**
     * Fires a metrics event when the media was played.
     * Pass events to common metrics event.
     *
     * @param {object} param params
     * @param {number} param.playerState state detecting different user actions
     * @param {object} param.kdp media object
     * @param {string} param.mediaId id of the media
     * @param {object} param.customMetricsData any extra parameter for custom events
     *
     */

  }, {
    key: "fireEvent",
    value: function fireEvent(_ref2) {
      var playerState = _ref2.playerState,
          kdp = _ref2.kdp,
          mediaId = _ref2.mediaId,
          _ref2$customMetricsDa = _ref2.customMetricsData,
          customMetricsData = _ref2$customMetricsDa === void 0 ? {} : _ref2$customMetricsDa;
      // If media was played and timestamp is 0, it should be "launched" state.
      var currentTime = Math.round(kdp.evaluate('{video.player.currentTime}'));

      if (playerState === 2 && currentTime === 0) {
        playerState = 0;
      }

      var eventData = {
        playerType: 'kaltura',
        title: kdp.evaluate('{mediaProxy.entry.name}'),
        currentTime: currentTime,
        duration: kdp.evaluate('{mediaProxy.entry.duration}'),
        playerState: playerState,
        mediaId: mediaId,
        customMetricsData: customMetricsData
      };

      _Analytics.AnalyticsAPI.videoPlayerStats(eventData);
    }
    /**
     * Gets the api data
     *
     * @param {string} mediaId  The mediaId we're embedding the placeholder for.
     * @returns {object}  object
     *
     * @example
     * import { KalturaPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * async function getMyVideoInfo(id) {
     *   const data = await KalturaPlayerAPI.api(id);
     *   console.log(data);
     * }
     */

  }, {
    key: "api",
    value: function () {
      var _api = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(mediaId) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.checkScript().then(function () {
                  if (mediaData && mediaData[mediaId]) {
                    return mediaData[mediaId];
                  } else {
                    return new Promise(function (resolve) {
                      return new _windowOrGlobal.default.kWidget.api({
                        wid: '_' + _partnerId
                      }).doRequest({
                        service: 'media',
                        action: 'get',
                        entryId: mediaId
                      }, function (jsonObj) {
                        mediaData[jsonObj.id] = jsonObj;
                        resolve(jsonObj);
                      });
                    });
                  }
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function api(_x3) {
        return _api.apply(this, arguments);
      }

      return api;
    }()
    /**
     * Convert media duration from milliseconds and seconds to HH:MM:SS
     *
     * @param {string} duration media duration in seconds
     * @param {boolean} fromMilliseconds the duration argument is expressed in milliseconds rather than seconds
     * @returns {string} converted duration
     */

  }, {
    key: "getMediaDuration",
    value: function getMediaDuration() {
      var _root$kWidget;

      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var fromMilliseconds = arguments.length > 1 ? arguments[1] : undefined;

      if (fromMilliseconds) {
        var _seconds = Math.floor(duration / 1000 % 60);

        var _minutes = Math.floor(duration / (1000 * 60) % 60);

        var _hours = Math.floor(duration / (1000 * 60 * 60) % 24);

        _hours = _hours > 0 ? _hours + ':' : '';
        _seconds = _seconds < 10 ? '0' + _seconds : _seconds;
        return duration && '(' + _hours + _minutes + ':' + _seconds + ')';
      }

      var parsedTime = (_windowOrGlobal.default === null || _windowOrGlobal.default === void 0 ? void 0 : (_root$kWidget = _windowOrGlobal.default.kWidget) === null || _root$kWidget === void 0 ? void 0 : _root$kWidget.seconds2Measurements(duration)) || {};
      var hours = (parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.hours) || 0;
      var minutes = (parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.minutes) || 0;
      var seconds = (parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.seconds) || 0;
      minutes = (hours > 0 ? '0' + minutes : minutes).toString().slice(-2);
      hours = hours > 0 ? hours + ':' : '';
      seconds = ('0' + seconds).slice(-2);
      return hours + minutes + ':' + seconds;
    }
  }, {
    key: "getMediaDurationFormatted",
    value: function getMediaDurationFormatted() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var fromMilliseconds = arguments.length > 1 ? arguments[1] : undefined;
      var ms = duration;

      if (!fromMilliseconds) {
        ms = duration * 1000;
      }

      var s = Math.floor(ms / 1000 % 60);
      var m = Math.floor(ms / (1000 * 60) % 60);
      var h = Math.floor(ms / (1000 * 60 * 60) % 24);
      var seconds = KalturaPlayerAPI.formatTime(s, 'second');
      var minutes = h || m ? KalturaPlayerAPI.formatTime(m, 'minute') : '';
      var hours = h ? KalturaPlayerAPI.formatTime(h, 'hour') : '';
      return "".concat(hours, " ").concat(minutes, " ").concat(seconds).trim();
    }
  }, {
    key: "formatTime",
    value: function formatTime(number, unit) {
      var locale = _windowOrGlobal.default.document.documentElement.lang || _windowOrGlobal.default.navigator.language;
      return new Intl.NumberFormat(locale, {
        style: 'unit',
        // @ts-ignore: TS lacking support for standard option
        unitDisplay: 'long',
        unit: unit
      }).format(number);
    }
  }]);
  return KalturaPlayerAPI;
}();

var _default = KalturaPlayerAPI;
exports.default = _default;