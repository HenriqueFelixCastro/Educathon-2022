import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import deprecate from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/deprecate/deprecate';
import KalturaPlayerAPI from '../KalturaPlayer/KalturaPlayer';
/**
 * @deprecated in favor of KalturaPlayerAPI
 * VideoPlayerAPI class with methods of checking script state and
 * embed video meta data and api data
 *
 * In order to set the Partner ID/UIConf ID, set the following environment
 * variables:
 *
 * - KALTURA_PARTNER_ID (or REACT_APP_KALTURA_PARTNER_ID)
 * - KALTURA_UICONF_ID (or REACT_APP_KALTURA_UICONF_ID)
 */

var VideoPlayerAPI = /*#__PURE__*/function (_KalturaPlayerAPI) {
  _inherits(VideoPlayerAPI, _KalturaPlayerAPI);

  var _super = _createSuper(VideoPlayerAPI);

  function VideoPlayerAPI() {
    _classCallCheck(this, VideoPlayerAPI);

    return _super.apply(this, arguments);
  }

  _createClass(VideoPlayerAPI, null, [{
    key: "embedVideo",

    /**
     * Gets the embed meta data
     *
     * @param {string} videoId  The videoId we're embedding the placeholder for.
     * @param {string} targetId The targetId the ID where we're putting the placeholder.
     * @param {boolean} autoPlay Determine whether to autoplay on load of video.
     * @returns {object}  object
     *
     * @example
     * import { VideoPlayerAPI } from '@carbon/ibmdotcom-services';
     *
     * function embedMyVideo() {
     *   const elem = document.getElementById('foo');
     *   const videoid = '12345';
     *   VideoPlayerAPI.embedVideo(videoid, elem);
     * }
     */
    value: function () {
      var _embedVideo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(videoId, targetId, autoPlay) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return KalturaPlayerAPI.embedMedia(videoId, targetId, autoPlay);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function embedVideo(_x, _x2, _x3) {
        return _embedVideo.apply(this, arguments);
      }

      return embedVideo;
    }()
    /**
     * Convert media duration from milliseconds and seconds to HH:MM:SS
     *
     * @param {string} duration video duration in milliseconds
     * @param {boolean} fromMilliseconds the duration argument is expressed in milliseconds rather than seconds
     * @returns {string} converted duration
     */

  }, {
    key: "getVideoDuration",
    value: function getVideoDuration(duration, fromMilliseconds) {
      return KalturaPlayerAPI.getMediaDuration(duration, fromMilliseconds);
    }
  }]);

  return VideoPlayerAPI;
}(KalturaPlayerAPI);

export default deprecate(VideoPlayerAPI, 'The VideoPlayerAPI service has been deprecated in favor of the KalturaPlayerAPI service.');